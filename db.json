{"meta":{"version":1,"warehouse":"2.2.0"},"models":{"Asset":[{"_id":"source/favicon.ico","path":"favicon.ico","modified":1,"renderable":0},{"_id":"themes/yilia/source/main.css","path":"main.css","modified":1,"renderable":1},{"_id":"themes/yilia/source/fonts/default-skin.svg","path":"fonts/default-skin.svg","modified":1,"renderable":1},{"_id":"themes/yilia/source/fonts/icomoon.eot","path":"fonts/icomoon.eot","modified":1,"renderable":1},{"_id":"themes/yilia/source/fonts/icomoon.svg","path":"fonts/icomoon.svg","modified":1,"renderable":1},{"_id":"themes/yilia/source/fonts/icomoon.ttf","path":"fonts/icomoon.ttf","modified":1,"renderable":1},{"_id":"themes/yilia/source/fonts/icomoon.woff","path":"fonts/icomoon.woff","modified":1,"renderable":1},{"_id":"themes/yilia/source/main.js","path":"main.js","modified":1,"renderable":1}],"Cache":[{"_id":"source/favicon.ico","hash":"8eeb9512caad89a04c3cc77672b48b58ba440d8e","modified":1490802682000},{"_id":"themes/yilia/.editorconfig","hash":"da6d022b8f4d9c961e2f8f80677e92af8de0db4d","modified":1490802682000},{"_id":"themes/yilia/.gitignore","hash":"9c4b7d27a1e3e5efa0c8ed143a032a85d586b03b","modified":1490802682000},{"_id":"themes/yilia/README.md","hash":"a9e088a983e037e28e0825ecc465d16f65cce44e","modified":1490802682000},{"_id":"themes/yilia/_config.yml","hash":"2de19192f71768c75bb4e247698127c701bedc70","modified":1490802682000},{"_id":"themes/yilia/package.json","hash":"5b0fa04a7b8e5b611a0d3dbe04c61f80f08be3bc","modified":1490802682000},{"_id":"themes/yilia/webpack.config.js","hash":"447b7469d79be7cf86a28805e0ef56d6e98895e0","modified":1490802682000},{"_id":"source/_posts/1、搭建环境和开始启动.md","hash":"5d4ff57dc091bc516d2f8687a500e75c51d7be6a","modified":1490802682000},{"_id":"source/_posts/2、第一个程序与状态机的概念.md","hash":"7553cb870c95ec287208acbae36326f51c498a9e","modified":1490802682000},{"_id":"source/_posts/3、调试.md","hash":"1320764174e4e84c2bd3d394c0b76cbb60e71dde","modified":1490802682000},{"_id":"source/_posts/4、Hello-World程序.md","hash":"5a5bc13a767413d7f73f639290eba836d02df00f","modified":1490802682000},{"_id":"source/_posts/6、样式.md","hash":"e3660120823e05c99de08bf799413f9ab6357b1e","modified":1490802682000},{"_id":"source/_posts/7、flexBox布局.md","hash":"1c91b86bb3f1cddee96a11219eb563eff294fbf1","modified":1490802682000},{"_id":"source/_posts/8、Text-和-TextInput-、组件属性继承写法.md","hash":"d97f200113780860b04678c2c312e192ce6a6ed0","modified":1490802682000},{"_id":"source/_posts/9、image.md","hash":"210d223b66f917b4b8b77a12b51c5b0420f1d6b8","modified":1490802682000},{"_id":"source/_posts/Android6.0以上获取权限总结.md","hash":"96227bfa467d6073d6a07e0fb47c0c206890f706","modified":1490802682000},{"_id":"source/_posts/DataBinding笔记.md","hash":"4e893c2aafa3b81250ec6b2a12f6adafa842e779","modified":1490802682000},{"_id":"source/_posts/Gson解析泛型问题.md","hash":"a621d8c55bd98d0b44f5fcd19b40cbb81994506a","modified":1490802682000},{"_id":"source/_posts/Material-Design-UI组件学习笔记（2）之Behavior.md","hash":"bf9d6c6844833345467ba1f3405617d6615d215c","modified":1490802682000},{"_id":"source/_posts/Material-Design学习笔记（1）.md","hash":"b5a850aff445469bd61698d5a69b83d0eb9779d6","modified":1490802682000},{"_id":"source/_posts/RecyclerView坑点.md","hash":"000d981bc78d29e85e01cd87ab041e2d77a19644","modified":1490802682000},{"_id":"source/_posts/java-反射机制.md","hash":"53a6b05d716f6e0cf6de16e19e3fc531387415f2","modified":1490802682000},{"_id":"source/_posts/我的第一篇博客.md","hash":"0a88cc030479dccedbf1d9f248c1bceaafc55116","modified":1490802682000},{"_id":"source/_posts/状态（State）.md","hash":"096ce948f09ac9b282baa35b14679175ec33ff9f","modified":1490802682000},{"_id":"themes/yilia/languages/default.yml","hash":"3083f319b352d21d80fc5e20113ddf27889c9d11","modified":1490802682000},{"_id":"themes/yilia/languages/fr.yml","hash":"84ab164b37c6abf625473e9a0c18f6f815dd5fd9","modified":1490802682000},{"_id":"themes/yilia/languages/nl.yml","hash":"12ed59faba1fc4e8cdd1d42ab55ef518dde8039c","modified":1490802682000},{"_id":"themes/yilia/languages/no.yml","hash":"965a171e70347215ec726952e63f5b47930931ef","modified":1490802682000},{"_id":"themes/yilia/languages/ru.yml","hash":"4fda301bbd8b39f2c714e2c934eccc4b27c0a2b0","modified":1490802682000},{"_id":"themes/yilia/languages/zh-CN.yml","hash":"ca40697097ab0b3672a80b455d3f4081292d1eed","modified":1490802682000},{"_id":"themes/yilia/languages/zh-tw.yml","hash":"53ce3000c5f767759c7d2c4efcaa9049788599c3","modified":1490802682000},{"_id":"themes/yilia/layout/archive.ejs","hash":"2703b07cc8ac64ae46d1d263f4653013c7e1666b","modified":1490802682000},{"_id":"themes/yilia/layout/category.ejs","hash":"765426a9c8236828dc34759e604cc2c52292835a","modified":1490802682000},{"_id":"themes/yilia/layout/index.ejs","hash":"a35dc900203f9d8dd863ea4c1722198d6d457ec8","modified":1490802682000},{"_id":"themes/yilia/layout/layout.ejs","hash":"18bc94a020c6e74b0a7a29bc412670605e0c0873","modified":1490802682000},{"_id":"themes/yilia/layout/page.ejs","hash":"7d80e4e36b14d30a7cd2ac1f61376d9ebf264e8b","modified":1490802682000},{"_id":"themes/yilia/layout/post.ejs","hash":"7d80e4e36b14d30a7cd2ac1f61376d9ebf264e8b","modified":1490802682000},{"_id":"themes/yilia/layout/tag.ejs","hash":"eaa7b4ccb2ca7befb90142e4e68995fb1ea68b2e","modified":1490802682000},{"_id":"themes/yilia/source/main.css","hash":"4b06fabc1363734247fe781a77bb12b5a3bc405e","modified":1490802682000},{"_id":"themes/yilia/layout/_partial/after-footer.ejs","hash":"ef0205fa690a388e48ddcb62ed77f05c753a7b9d","modified":1490802682000},{"_id":"themes/yilia/layout/_partial/archive-post.ejs","hash":"1f7d4819b7f67602c4a1b99871808d2160b60978","modified":1490802682000},{"_id":"themes/yilia/layout/_partial/archive.ejs","hash":"a6e94061ac55b9eb55275f87b608d62f6ea35659","modified":1490802682000},{"_id":"themes/yilia/layout/_partial/article.ejs","hash":"65e786ace35a89eb2ec3eaff406de88565cc0b82","modified":1490802682000},{"_id":"themes/yilia/layout/_partial/footer.ejs","hash":"f2994e0acd1d606ebf4680afc4fa652e148ccf4e","modified":1490802682000},{"_id":"themes/yilia/layout/_partial/google-analytics.ejs","hash":"f921e7f9223d7c95165e0f835f353b2938e40c45","modified":1490802682000},{"_id":"themes/yilia/layout/_partial/head.ejs","hash":"8058daccb8915e72f2d6c3cbf00d2ed03801c0da","modified":1490802682000},{"_id":"themes/yilia/layout/_partial/header.ejs","hash":"d78993618051392103df1107c0da5abb81e2acac","modified":1490802682000},{"_id":"themes/yilia/layout/_partial/left-col.ejs","hash":"256f83ef8bc7bdc8f69617e606fe1118136b5208","modified":1490802682000},{"_id":"themes/yilia/layout/_partial/mathjax.ejs","hash":"151a1ef2173ba7b6789d349f0f8da89616cc1394","modified":1490802682000},{"_id":"themes/yilia/layout/_partial/mobile-nav.ejs","hash":"324f809c7d1505cbf1ef3a479782c67ae90dfa81","modified":1490802682000},{"_id":"themes/yilia/layout/_partial/tools.ejs","hash":"c5b92f83828e41a891c6db1d3e63cd2e007034e0","modified":1490802682000},{"_id":"themes/yilia/layout/_partial/viewer.ejs","hash":"e495790b2abe2290875817e42bd505bc611d3e26","modified":1490802682000},{"_id":"themes/yilia/source/fonts/default-skin.svg","hash":"2ac727c9e092331d35cce95af209ccfac6d4c7c7","modified":1490802682000},{"_id":"themes/yilia/source/fonts/icomoon.eot","hash":"9a661069e1255d10032926a8ef87502f445f4e20","modified":1490802682000},{"_id":"themes/yilia/source/fonts/icomoon.svg","hash":"56ba63db8bfe20347e0457b4c583dd18e29ca701","modified":1490802682000},{"_id":"themes/yilia/source/fonts/icomoon.ttf","hash":"9f1e824fc076dbfedf186609a2664558d5e3e986","modified":1490802682000},{"_id":"themes/yilia/source/fonts/icomoon.woff","hash":"a5c2eb785800a3a0aeaf2284d191d69df1893d6d","modified":1490802682000},{"_id":"themes/yilia/source/main.js","hash":"e7101adc00030c3b2572d5c1ac80202d3d946b86","modified":1490802682000},{"_id":"themes/yilia/source-src/css/_core.scss","hash":"24f347a2412abbf58318369152504da9538f8d3b","modified":1490802682000},{"_id":"themes/yilia/source-src/css/_function.scss","hash":"93a50dd19a93485712da1f8d0a1672482dd1eabc","modified":1490802682000},{"_id":"themes/yilia/source-src/css/archive-inner.scss","hash":"55c6e8576d6c9cb2b6df0eb5d05c16a26973c77f","modified":1490802682000},{"_id":"themes/yilia/source-src/css/archive.scss","hash":"b750499d5120f963b683d0c96ac3f345c714e448","modified":1490802682000},{"_id":"themes/yilia/source-src/css/article-inner.scss","hash":"4edb98e196eac9e67f86b76e39a2a03673391842","modified":1490802682000},{"_id":"themes/yilia/source-src/css/article-main.scss","hash":"000a5875e1e46116b824c9ac0657178093ce4a17","modified":1490802682000},{"_id":"themes/yilia/source-src/css/article-nav.scss","hash":"d046414a96adc400b54897fc236b3272e6deeafd","modified":1490802682000},{"_id":"themes/yilia/source-src/css/article.scss","hash":"b1add6b3c05416ac854ec5dd9d4cc20be3fafc1f","modified":1490802682000},{"_id":"themes/yilia/source-src/css/duoshuo.scss","hash":"1a4be8634b8dcf271cebad1feb687e96a038ffbf","modified":1490802682000},{"_id":"themes/yilia/source-src/css/fonts.scss","hash":"f5ee21869fcd3e2b257b49b0f680c78763d416dd","modified":1490802682000},{"_id":"themes/yilia/source-src/css/footer.scss","hash":"7c995410b25baaf61dfc5e148e22ca60330abcd3","modified":1490802682000},{"_id":"themes/yilia/source-src/css/global.scss","hash":"b4cb4f45a55d4250cd9056f76dab2a3c0dabcec4","modified":1490802682000},{"_id":"themes/yilia/source-src/css/grid.scss","hash":"9ffd1bb579b67738c151a5ce88f16023de8204d2","modified":1490802682000},{"_id":"themes/yilia/source-src/css/highlight.scss","hash":"819774a2979d0d94eb4e3ebf62afc96f803bac67","modified":1490802682000},{"_id":"themes/yilia/source-src/css/left.scss","hash":"2a261fa2e402909a866c648a5de8eb287da6fba9","modified":1490802682000},{"_id":"themes/yilia/source-src/css/main.scss","hash":"5ffabb8323ff8cd26be466c7e02a6affc0f08da7","modified":1490802682000},{"_id":"themes/yilia/source-src/css/mobile-slider.scss","hash":"4277e4b7e8fef5480d8e2b9574cbfdf59f0225c8","modified":1490802682000},{"_id":"themes/yilia/source-src/css/mobile.scss","hash":"c170329ef2e7c2dcec58b1134793beac521133d4","modified":1490802682000},{"_id":"themes/yilia/source-src/css/page.scss","hash":"bf206bb7f7d0967bc8b7fdf01b7ffc99aff9ba88","modified":1490802682000},{"_id":"themes/yilia/source-src/css/scroll.scss","hash":"9c8dfd1c76854ef063494ca76fac6360b391ed6d","modified":1490802682000},{"_id":"themes/yilia/source-src/css/social.scss","hash":"5b4a2cfd8a26687dc7bc44a4fa55ebb7d1ffe363","modified":1490802682000},{"_id":"themes/yilia/source-src/css/switch.scss","hash":"795b0d1ad5ff278933409a1ab7451483fe6ceae5","modified":1490802682000},{"_id":"themes/yilia/source-src/css/tags-cloud.scss","hash":"c8aa84fca93862d3caae77c552873b8610f33327","modified":1490802682000},{"_id":"themes/yilia/source-src/css/tags.scss","hash":"79d3fad4fcda15210410774089b0ee7fe8d58810","modified":1490802682000},{"_id":"themes/yilia/source-src/css/tools.scss","hash":"059b6799ee21e63d05162d7ed0e1935b6574f52a","modified":1490802682000},{"_id":"themes/yilia/source-src/js/archive-inner.js","hash":"da4a770ccb23ca1ded23fa6475ce1379f0c10604","modified":1490802682000},{"_id":"themes/yilia/source-src/js/browser.js","hash":"8ca48b006591bbf6d75688637c14fd1b5bdd650f","modified":1490802682000},{"_id":"themes/yilia/source-src/js/fix-page.js","hash":"f18e33e99b1032b95a60b018960bed64235c1a29","modified":1490802682000},{"_id":"themes/yilia/source-src/js/jquery.lazyload.js","hash":"37961302284435b2677b7fd1e0c0f7624e226e4a","modified":1490802682000},{"_id":"themes/yilia/source-src/js/main.js","hash":"2732b1a92466da6c36f21473e2376f36af23c6ad","modified":1490802682000},{"_id":"themes/yilia/source-src/js/mobile.js","hash":"4d79f5f2d789e6cddfd7b502df238107e9c63aac","modified":1490802682000},{"_id":"themes/yilia/source-src/js/tags.js","hash":"f259b3f808df3a8523a42978f922bb9eda76e0ee","modified":1490802682000},{"_id":"themes/yilia/source-src/js/tools.js","hash":"ed69771cd501770c2c303ae6ae695d2a9a187cdd","modified":1490802682000},{"_id":"themes/yilia/source-src/js/util.js","hash":"28c66c54cab81b2a6c8c393226f5bd30f369e1bb","modified":1490802682000},{"_id":"themes/yilia/source-src/js/viewer.js","hash":"8842418f90ac630de1ea3c3a2035458efe0897cf","modified":1490802682000},{"_id":"themes/yilia/source-src/photoSwipe/photoswipe-ui-default.js","hash":"724162c14e5722a2ce1f44cf086dcea7b6855b80","modified":1490802682000},{"_id":"themes/yilia/source-src/photoSwipe/photoswipe-ui-default.min.js","hash":"38557bef17c33e172bc8e1670cd302d91622dfad","modified":1490802682000},{"_id":"themes/yilia/source-src/photoSwipe/photoswipe.min.js","hash":"e3267f5ae23f00c1ae052d019f12787296e34afc","modified":1490802682000},{"_id":"themes/yilia/source-src/photoSwipe/photoswipe.scss","hash":"838d43529282b91a60934bbd39f3f9f5dbefee98","modified":1490802682000},{"_id":"themes/yilia/source-src/photoSwipe/photoswipe.js","hash":"ff9e3cc58b44a61144a9e211503755b170c24e91","modified":1490802682000},{"_id":"themes/yilia/layout/_partial/post/category.ejs","hash":"62cde65a4ab7aef85a4390308bc7608f59463e02","modified":1490802682000},{"_id":"themes/yilia/layout/_partial/post/date.ejs","hash":"2ab4308d013dcb1f0898cf112e3f75573e597e33","modified":1490802682000},{"_id":"themes/yilia/layout/_partial/post/duoshuo.ejs","hash":"e8399025ed3b980aedb821c92855889f5f12fd5b","modified":1490802682000},{"_id":"themes/yilia/layout/_partial/post/nav.ejs","hash":"1036c8e4e1a7bc935ba173744da735a0d6ed09cd","modified":1490802682000},{"_id":"themes/yilia/layout/_partial/post/share_addthis.ejs","hash":"d9fa04c06319510bd088ca9c286af947da3cfb38","modified":1490802682000},{"_id":"themes/yilia/layout/_partial/post/share_jia.ejs","hash":"a59c83e46aaccb053b60bb41369dfcd6848cbd69","modified":1490802682000},{"_id":"themes/yilia/layout/_partial/post/tag.ejs","hash":"3a44b657ebdeed1764d90f81b43e91e5a8f25c21","modified":1490802682000},{"_id":"themes/yilia/layout/_partial/post/title.ejs","hash":"2f275739b6f1193c123646a5a31f37d48644c667","modified":1490802682000},{"_id":"themes/yilia/source-src/css/core/_media-queries.scss","hash":"491ab3378d5c11005ba65c607608bb36b368a9d5","modified":1490802682000},{"_id":"themes/yilia/source-src/css/core/_animation.scss","hash":"6f44ec8ff32515280c0b7ea8ad7e4cb5f4dfcd84","modified":1490802682000},{"_id":"themes/yilia/source-src/css/core/_mixin.scss","hash":"042b04e2b9e4de923dfae4649da054919a7ed370","modified":1490802682000},{"_id":"themes/yilia/source-src/css/core/_reset.scss","hash":"fab871fa93bd542e76a71a56428f2994a4aaf443","modified":1490802682000},{"_id":"themes/yilia/source-src/css/core/_variables.scss","hash":"fb511c505d1309249f21dc577d4ad2bad99a764f","modified":1490802682000},{"_id":"themes/yilia/source-src/css/fonts/icomoon.eot","hash":"9a661069e1255d10032926a8ef87502f445f4e20","modified":1490802682000},{"_id":"themes/yilia/source-src/css/fonts/icomoon.svg","hash":"56ba63db8bfe20347e0457b4c583dd18e29ca701","modified":1490802682000},{"_id":"themes/yilia/source-src/css/fonts/icomoon.woff","hash":"a5c2eb785800a3a0aeaf2284d191d69df1893d6d","modified":1490802682000},{"_id":"themes/yilia/source-src/css/fonts/icomoon.ttf","hash":"9f1e824fc076dbfedf186609a2664558d5e3e986","modified":1490802682000},{"_id":"themes/yilia/source-src/css/img/black-scales.png","hash":"243ea748d016704922ccfc0b6c18d97472c27bff","modified":1490802682000},{"_id":"themes/yilia/source-src/css/img/checkered-pattern.png","hash":"049262fa0886989d750637b264bed34ab51c23c8","modified":1490802682000},{"_id":"themes/yilia/source-src/css/img/coderwall.png","hash":"fa84676c4d654e040e51fd34bfcd9f9348cd5331","modified":1490802682000},{"_id":"themes/yilia/source-src/css/img/douban.png","hash":"e2ade003ffadd5826ee66ec23901c2d6e8607e4e","modified":1490802682000},{"_id":"themes/yilia/source-src/css/img/facebook.png","hash":"d19ad7a0903daf26817afd8753cd97e0cc714f54","modified":1490802682000},{"_id":"themes/yilia/source-src/css/img/github.png","hash":"b84d03b32fa388dcbf149296ebd16dce6223d48d","modified":1490802682000},{"_id":"themes/yilia/source-src/css/img/google.png","hash":"61a21fec7346fa3400b747ac9a201cf3d5bc013d","modified":1490802682000},{"_id":"themes/yilia/source-src/css/img/linkedin.png","hash":"e203138fb53c257cb214e97f4e30091b9c568d2c","modified":1490802682000},{"_id":"themes/yilia/source-src/css/img/mail.png","hash":"fca8199cc77fdbd700a45bf56d091c82f4a67fe7","modified":1490802682000},{"_id":"themes/yilia/source-src/css/img/pinboard.png","hash":"0891fbb6d092fa012bf936019923383d84c6aeb0","modified":1490802682000},{"_id":"themes/yilia/source-src/css/img/pinterest.png","hash":"9c72917f8779c083157c6ce7a5d62ed4874f0630","modified":1490802682000},{"_id":"themes/yilia/source-src/css/img/rss.png","hash":"430fd47340e75214c081abd05cd7410cf7c71b86","modified":1490802682000},{"_id":"themes/yilia/source-src/css/img/scrollbar_arrow.png","hash":"d64a33c4ddfbdb89deeb6f4e3d36eb84dc4777c0","modified":1490802682000},{"_id":"themes/yilia/source-src/css/img/stackoverflow.png","hash":"da5dfe9043055c95e479d49c78cd3b020de608f2","modified":1490802682000},{"_id":"themes/yilia/source-src/css/img/twitter.png","hash":"14dbb8e62d056525253bc0de13acd1723da7a934","modified":1490802682000},{"_id":"themes/yilia/source-src/css/img/weibo.png","hash":"280dae3fd38086158b4a1b57edb94c06b1a5014b","modified":1490802682000},{"_id":"themes/yilia/source-src/css/img/zhihu.png","hash":"a6d6ef65e9ac82e613a311810391ebb90d9b1c1d","modified":1490802682000},{"_id":"themes/yilia/source-src/photoSwipe/default-skin/default-skin.png","hash":"ed95a8e40a2c3478c5915376acb8e5f33677f24d","modified":1490802682000},{"_id":"themes/yilia/source-src/photoSwipe/default-skin/default-skin.scss","hash":"91f44576a5f5ccff4740ff5020656bd2f00ca13c","modified":1490802682000},{"_id":"themes/yilia/source-src/photoSwipe/default-skin/default-skin.svg","hash":"2ac727c9e092331d35cce95af209ccfac6d4c7c7","modified":1490802682000},{"_id":"themes/yilia/source-src/photoSwipe/default-skin/preloader.gif","hash":"6342367c93c82da1b9c620e97c84a389cc43d96d","modified":1490802682000},{"_id":"themes/yilia/source-src/css/img/black-paper.png","hash":"a180d3109a5cb6b9b9aa60d81730446ebe275473","modified":1490802682000},{"_id":"themes/yilia/source-src/js/jquery.js","hash":"bfc05b695dfa4f23e11d04b84993585da7a764bf","modified":1490802682000},{"_id":"public/2017/03/29/9、image/index.html","hash":"ae750ada55498faf669f0e32abac5342d92f70e8","modified":1490803032115},{"_id":"public/2017/03/29/7、flexBox布局/index.html","hash":"f6b8a452435d3222706137652f0179d4f3ca935d","modified":1490803032116},{"_id":"public/2017/03/29/6、样式/index.html","hash":"a31534a773ca768a7c2fd6880ad6aaa0d9177f29","modified":1490803032116},{"_id":"public/2017/03/29/3、调试/index.html","hash":"e8579dfb4721b895328dbec756635ff492ef5b08","modified":1490803032116},{"_id":"public/2017/03/29/1、搭建环境和开始启动/index.html","hash":"41e2a7e38cc78339dbaad3887b031e4cf30d231b","modified":1490803032116},{"_id":"public/2016/11/04/我的第一篇博客/index.html","hash":"9c77339f323e88ae44662b241256deb3c164b131","modified":1490803032116},{"_id":"public/archives/page/2/index.html","hash":"daeedf97101344d981cb0c695aadc775ac173584","modified":1490803032116},{"_id":"public/archives/2016/index.html","hash":"dd46a0d7efb71935eb33dd345440170871e30060","modified":1490803032116},{"_id":"public/archives/2016/11/index.html","hash":"07876e99d5b04fb5463e0dea45c756596571694c","modified":1490803032116},{"_id":"public/archives/2016/12/index.html","hash":"2c1fc823fb82244972162a00af900ff7a7346554","modified":1490803032116},{"_id":"public/archives/2017/page/2/index.html","hash":"373898661c7aff6b6540cde289015d1bd9495892","modified":1490803032116},{"_id":"public/archives/2017/03/page/2/index.html","hash":"b961f66d2bb3ec2e257f6fbe3d135d62e49bde00","modified":1490803032116},{"_id":"public/tags/Android/index.html","hash":"330107d275e02596fa591f2b6b8a24642dd17b52","modified":1490803032116},{"_id":"public/tags/Material-Design/index.html","hash":"971fc71246d39166b4090cf1c745f87907f8384c","modified":1490803032116},{"_id":"public/tags/随笔/index.html","hash":"afd9b30fe7c8ea5ca16c6d78725d3eab3b2e77c8","modified":1490803032116},{"_id":"public/tags/Java/index.html","hash":"274530b6c1f614747dbcbb1c886935caf8a68998","modified":1490803032117},{"_id":"public/2017/03/29/8、Text-和-TextInput-、组件属性继承写法/index.html","hash":"8ce55409aae074d18a0409407c50e97c55adff7c","modified":1490803032117},{"_id":"public/2017/03/29/状态（State）/index.html","hash":"d7674310a524e403e00c2f024de11fb17eb26522","modified":1490803032117},{"_id":"public/2017/03/29/4、Hello-World程序/index.html","hash":"5df0c84d08ccc05f857678d21ae2a6dd6ca3b626","modified":1490803032117},{"_id":"public/2017/03/29/2、第一个程序与状态机的概念/index.html","hash":"98be886f4490afe49d6df1b2618b8e9899266730","modified":1490803032117},{"_id":"public/2017/03/29/DataBinding笔记/index.html","hash":"acc6072fe52b66bb35e42cdedadf226b880adcaa","modified":1490803032117},{"_id":"public/2017/03/29/java-反射机制/index.html","hash":"c0c0ffe49cc7b4db4f52aacb34a1385f9d8aa53d","modified":1490803032117},{"_id":"public/2016/12/08/Material-Design-UI组件学习笔记（2）之Behavior/index.html","hash":"352bb71629aa456e912531175308587bdb712366","modified":1490803032117},{"_id":"public/2016/11/30/Gson解析泛型问题/index.html","hash":"fd2aae300cb9887d71987abab19f29403f137c50","modified":1490803032117},{"_id":"public/2016/11/28/RecyclerView坑点/index.html","hash":"4037bb0c598d85373a039393dc7f3b0131c0e6ac","modified":1490803032117},{"_id":"public/2016/11/10/Material-Design学习笔记（1）/index.html","hash":"e725c99f85693abfa8939c23db72ed4b3ba4a150","modified":1490803032117},{"_id":"public/2016/11/08/Android6.0以上获取权限总结/index.html","hash":"99451ce9b42150b575294f6e40788081c1280e69","modified":1490803032117},{"_id":"public/archives/index.html","hash":"add86d77892be8b62fae044217a1d86def82231e","modified":1490803032117},{"_id":"public/archives/2017/index.html","hash":"44e4fd039e47445696451514d0c5bece384af091","modified":1490803032117},{"_id":"public/archives/2017/03/index.html","hash":"c70071b3424cf7599a5601c68ab35aba5b9ec3c7","modified":1490803032117},{"_id":"public/index.html","hash":"a3d8376fa3f594b615ebc03a216e00c3addc6dbe","modified":1490803032117},{"_id":"public/page/2/index.html","hash":"bc0e99ebc97d1ab0f973b0746b06f09d1fa199c4","modified":1490803032117},{"_id":"public/tags/React-native/index.html","hash":"c8e726ae7261fe74d117761db32064c69afc38ed","modified":1490803032117},{"_id":"public/favicon.ico","hash":"8eeb9512caad89a04c3cc77672b48b58ba440d8e","modified":1490803032121},{"_id":"public/fonts/default-skin.svg","hash":"2ac727c9e092331d35cce95af209ccfac6d4c7c7","modified":1490803032121},{"_id":"public/fonts/icomoon.eot","hash":"9a661069e1255d10032926a8ef87502f445f4e20","modified":1490803032121},{"_id":"public/fonts/icomoon.svg","hash":"56ba63db8bfe20347e0457b4c583dd18e29ca701","modified":1490803032121},{"_id":"public/fonts/icomoon.ttf","hash":"9f1e824fc076dbfedf186609a2664558d5e3e986","modified":1490803032121},{"_id":"public/fonts/icomoon.woff","hash":"a5c2eb785800a3a0aeaf2284d191d69df1893d6d","modified":1490803032121},{"_id":"public/main.css","hash":"4b06fabc1363734247fe781a77bb12b5a3bc405e","modified":1490803032130},{"_id":"public/main.js","hash":"e7101adc00030c3b2572d5c1ac80202d3d946b86","modified":1490803032130}],"Category":[],"Data":[],"Page":[],"Post":[{"title":"1、搭建环境和开始启动","date":"2017-03-29T02:37:25.000Z","_content":"\n### 环境搭建\n必要软件：HomeBrew(Mac系统的包管理器)\n\n打开终端：（输入）\n\n```\n\n    /usr/bin/ruby -e \"$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install)\"\n\n    //在Max OS X 10.11（El Capitan)版本中，homebrew在安装软件时可能会碰到/usr/local目录不可写的权限问题。可以使用下面的命令修复：\n    sudo chown -R `whoami` /usr/local\n\n    //安装Node\n    brew install node\n    npm config set registry https://registry.npm.taobao.org --global\n    npm config set disturl https://npm.taobao.org/dist --global\n\n    //Yarn\\React Native命令行工具\n    npm install -g yarn react-native-cli\n    //如果你看到EACCES: permission denied这样的权限报错，那么请参照上文的homebrew译注，修复/usr/local目录的所有权：\n    sudo chown -R `whoami` /usr/local\n\n    //watchman安装\n    brew install watchman\n\n```\n\n<!-- more -->\n\n### 新建项目\n新建项目到/Users/tangjun/RNProject项目名为AwesomeProject\n>react-native init AwesomeProject cd /Users/tangjun/AwesomeProject\n\n### 运行项目\n运行android\n>react-native run-android\n\n运行ios\n>react-native run-ios\n\n#### 出现不能连接到模拟器或者真机\n>首先 确定 是用 brew install android-sdk\n安装后 会在 /usr/local/Cellar/android-sdk 这个目录\n\n然后在命令栏写\n>\nexport ANDROID_HOME=/Users/tangjun/Library/Android/sdk/\nexport PATH=${PATH}:${ANDROID_HOME}/tools\nexport PATH=${PATH}:${ANDROID_HOME}/platform-tools","source":"_posts/1、搭建环境和开始启动.md","raw":"---\ntitle: 1、搭建环境和开始启动\ndate: 2017-03-29 10:37:25\ntags: [React-native]\n---\n\n### 环境搭建\n必要软件：HomeBrew(Mac系统的包管理器)\n\n打开终端：（输入）\n\n```\n\n    /usr/bin/ruby -e \"$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install)\"\n\n    //在Max OS X 10.11（El Capitan)版本中，homebrew在安装软件时可能会碰到/usr/local目录不可写的权限问题。可以使用下面的命令修复：\n    sudo chown -R `whoami` /usr/local\n\n    //安装Node\n    brew install node\n    npm config set registry https://registry.npm.taobao.org --global\n    npm config set disturl https://npm.taobao.org/dist --global\n\n    //Yarn\\React Native命令行工具\n    npm install -g yarn react-native-cli\n    //如果你看到EACCES: permission denied这样的权限报错，那么请参照上文的homebrew译注，修复/usr/local目录的所有权：\n    sudo chown -R `whoami` /usr/local\n\n    //watchman安装\n    brew install watchman\n\n```\n\n<!-- more -->\n\n### 新建项目\n新建项目到/Users/tangjun/RNProject项目名为AwesomeProject\n>react-native init AwesomeProject cd /Users/tangjun/AwesomeProject\n\n### 运行项目\n运行android\n>react-native run-android\n\n运行ios\n>react-native run-ios\n\n#### 出现不能连接到模拟器或者真机\n>首先 确定 是用 brew install android-sdk\n安装后 会在 /usr/local/Cellar/android-sdk 这个目录\n\n然后在命令栏写\n>\nexport ANDROID_HOME=/Users/tangjun/Library/Android/sdk/\nexport PATH=${PATH}:${ANDROID_HOME}/tools\nexport PATH=${PATH}:${ANDROID_HOME}/platform-tools","slug":"1、搭建环境和开始启动","published":1,"updated":"2017-03-29T15:51:22.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj0v5msux0000x5ypuqmrgozq","content":"<h3 id=\"环境搭建\"><a href=\"#环境搭建\" class=\"headerlink\" title=\"环境搭建\"></a>环境搭建</h3><p>必要软件：HomeBrew(Mac系统的包管理器)</p>\n<p>打开终端：（输入）</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\">/usr/bin/ruby -e &quot;$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install)&quot;</div><div class=\"line\"></div><div class=\"line\">//在Max OS X 10.11（El Capitan)版本中，homebrew在安装软件时可能会碰到/usr/local目录不可写的权限问题。可以使用下面的命令修复：</div><div class=\"line\">sudo chown -R `whoami` /usr/local</div><div class=\"line\"></div><div class=\"line\">//安装Node</div><div class=\"line\">brew install node</div><div class=\"line\">npm config set registry https://registry.npm.taobao.org --global</div><div class=\"line\">npm config set disturl https://npm.taobao.org/dist --global</div><div class=\"line\"></div><div class=\"line\">//Yarn\\React Native命令行工具</div><div class=\"line\">npm install -g yarn react-native-cli</div><div class=\"line\">//如果你看到EACCES: permission denied这样的权限报错，那么请参照上文的homebrew译注，修复/usr/local目录的所有权：</div><div class=\"line\">sudo chown -R `whoami` /usr/local</div><div class=\"line\"></div><div class=\"line\">//watchman安装</div><div class=\"line\">brew install watchman</div></pre></td></tr></table></figure>\n<a id=\"more\"></a>\n<h3 id=\"新建项目\"><a href=\"#新建项目\" class=\"headerlink\" title=\"新建项目\"></a>新建项目</h3><p>新建项目到/Users/tangjun/RNProject项目名为AwesomeProject</p>\n<blockquote>\n<p>react-native init AwesomeProject cd /Users/tangjun/AwesomeProject</p>\n</blockquote>\n<h3 id=\"运行项目\"><a href=\"#运行项目\" class=\"headerlink\" title=\"运行项目\"></a>运行项目</h3><p>运行android</p>\n<blockquote>\n<p>react-native run-android</p>\n</blockquote>\n<p>运行ios</p>\n<blockquote>\n<p>react-native run-ios</p>\n</blockquote>\n<h4 id=\"出现不能连接到模拟器或者真机\"><a href=\"#出现不能连接到模拟器或者真机\" class=\"headerlink\" title=\"出现不能连接到模拟器或者真机\"></a>出现不能连接到模拟器或者真机</h4><blockquote>\n<p>首先 确定 是用 brew install android-sdk<br>安装后 会在 /usr/local/Cellar/android-sdk 这个目录</p>\n</blockquote>\n<p>然后在命令栏写<br>&gt;<br>export ANDROID_HOME=/Users/tangjun/Library/Android/sdk/<br>export PATH=${PATH}:${ANDROID_HOME}/tools<br>export PATH=${PATH}:${ANDROID_HOME}/platform-tools</p>\n","excerpt":"<h3 id=\"环境搭建\"><a href=\"#环境搭建\" class=\"headerlink\" title=\"环境搭建\"></a>环境搭建</h3><p>必要软件：HomeBrew(Mac系统的包管理器)</p>\n<p>打开终端：（输入）</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\">/usr/bin/ruby -e &quot;$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install)&quot;</div><div class=\"line\"></div><div class=\"line\">//在Max OS X 10.11（El Capitan)版本中，homebrew在安装软件时可能会碰到/usr/local目录不可写的权限问题。可以使用下面的命令修复：</div><div class=\"line\">sudo chown -R `whoami` /usr/local</div><div class=\"line\"></div><div class=\"line\">//安装Node</div><div class=\"line\">brew install node</div><div class=\"line\">npm config set registry https://registry.npm.taobao.org --global</div><div class=\"line\">npm config set disturl https://npm.taobao.org/dist --global</div><div class=\"line\"></div><div class=\"line\">//Yarn\\React Native命令行工具</div><div class=\"line\">npm install -g yarn react-native-cli</div><div class=\"line\">//如果你看到EACCES: permission denied这样的权限报错，那么请参照上文的homebrew译注，修复/usr/local目录的所有权：</div><div class=\"line\">sudo chown -R `whoami` /usr/local</div><div class=\"line\"></div><div class=\"line\">//watchman安装</div><div class=\"line\">brew install watchman</div></pre></td></tr></table></figure>","more":"<h3 id=\"新建项目\"><a href=\"#新建项目\" class=\"headerlink\" title=\"新建项目\"></a>新建项目</h3><p>新建项目到/Users/tangjun/RNProject项目名为AwesomeProject</p>\n<blockquote>\n<p>react-native init AwesomeProject cd /Users/tangjun/AwesomeProject</p>\n</blockquote>\n<h3 id=\"运行项目\"><a href=\"#运行项目\" class=\"headerlink\" title=\"运行项目\"></a>运行项目</h3><p>运行android</p>\n<blockquote>\n<p>react-native run-android</p>\n</blockquote>\n<p>运行ios</p>\n<blockquote>\n<p>react-native run-ios</p>\n</blockquote>\n<h4 id=\"出现不能连接到模拟器或者真机\"><a href=\"#出现不能连接到模拟器或者真机\" class=\"headerlink\" title=\"出现不能连接到模拟器或者真机\"></a>出现不能连接到模拟器或者真机</h4><blockquote>\n<p>首先 确定 是用 brew install android-sdk<br>安装后 会在 /usr/local/Cellar/android-sdk 这个目录</p>\n</blockquote>\n<p>然后在命令栏写<br>&gt;<br>export ANDROID_HOME=/Users/tangjun/Library/Android/sdk/<br>export PATH=${PATH}:${ANDROID_HOME}/tools<br>export PATH=${PATH}:${ANDROID_HOME}/platform-tools</p>"},{"title":"2、第一个程序与状态机的概念","date":"2017-03-29T02:38:59.000Z","_content":"\n首先认识Index.android.js里面的代码 \n\n<!--more--> \n\n### 认识Index.android.js里面的代码\n\n```html\n\n    ********\n    ** 组件导入区  **\n\n    import React, { Component } from 'react';\n    import {\n        AppRegistry, //框架提供的API\n        StyleSheet,\n        Text,  // RN提供的组件\n        View,\n        TextInput // 记得引入组件\n    } from 'react-native';\n\n    ********\n\n    ********\n    ** 核心代码区  **\n\n    //逻辑处理\n    //let是更完美的var\n    let Dimensions = require('Dimensions');// 宽高\n    let totalWidth = Dimensions.get('window').width;  //声明了三个变量,根据屏幕动态变化\n    let leftStartPoint = totalWidth * 0.1;\n    let componentWidth = totalWidth * 0.8;\n\n    //界面绘制\n    class AwesomeProject extends Component {\n         render() {\n            return (\n                // 绘制渲染的控件\n                <View style={styles.container}>\n                    <TextInput style={styles.numberInputStyle}\n                               placeholder={'请输入手机号'}/>\n                    <Text style={styles.textPromptStyle}>\n                        您输入的手机号：\n                    </Text>\n                    <TextInput style={styles.passwordInputStyle}\n                               placeholder={'请输入密码'}\n                               secureTextEntry={true}/>\n                    <Text style={styles.bigTextPrompt}>\n                        确  定\n                    </Text>\n                </View>\n            );\n        }\n    }\n\n    ********\n\n    ********\n    ** 组件样式区  **\n\n    // 样式  const变量只能在声明的时候赋值一次\n    const styles = StyleSheet.create({\n        //各个组件都没有定义高度,父View设置了flex1,他会沾满整个高度,子组件没有设置会包裹内容\n        container: {\n            flex: 1,  //表示宽高会自动扩展\n            backgroundColor: 'white'\n        },\n        numberInputStyle: {\n            top: 20,     // top left表示从父组件的顶端(左侧) 向下(向右) 多少位置显示\n            left: leftStartPoint,\n            // height:30,  // IOS开发需要加上该高度\n            width: componentWidth,\n            backgroundColor: 'gray',\n            fontSize: 20\n        },\n        textPromptStyle: {\n            top: 30,\n            left: leftStartPoint,\n            //  // height:30,  // IOS开发需要加上该高度 因为IOS中TextInput不会自动设置高度\n            width: componentWidth,\n            fontSize: 20\n        },\n        passwordInputStyle: {\n            top: 50,\n            left: leftStartPoint,\n            width: componentWidth,\n            backgroundColor: 'gray',\n            fontSize: 20\n        },\n        bigTextPrompt:{\n            top:70,\n            left:leftStartPoint,\n            width:componentWidth,\n            backgroundColor:'gray',\n            color:'white',\n            textAlign:'center',//位置居中显示\n            fontSize:60\n        }\n    });\n\n    ********\n\n    ********\n    *** 注册启动组件 ***\n\n    // 注册了 AwesomeProject 组件\n    AppRegistry.registerComponent('AwesomeProject', () => AwesomeProject);\n\n```\n\n**关键字说明**\n\n1、在写代码之前需要导入基本的组件，如：React,Component,AppRegistry,StyleSheet,还有可视组件：Text,View等。\n\n2、在核心代码区中，也分为两个部分：逻辑处理和界面绘制。\n\n3、绘制界面等区域需要创建一个组件，如上面的AwesomeProject（AwesomeProject是项目的名，在这里也定义成了一个组件（类class））。\n\n**4、React Native 每个组件都具备render()方法，该方法用来绘制UI。在这里，这个方法直接return了一个JSX代码描述的UI组件。**\n\n5、const styles定义了组件的样式。\n\n\n### 状态机的概念\n>*React框架将所有的UI视为一个简单的状态机,那么任意一个UI场景就是状态机中的一种状态.*\n 状态机的值一旦变化, 默认界面就会重新渲染,这样一个过程可以很轻松的做到数据与UI保持一致.我们只需要空间状态机中的值就行.\n\n\n#### 状态机的定义\n\n```html \n    \n    //在构造函数中申明状态机的初始值\n    this.state = {\n        inputedNum : '',    \n        inputedPW : ''\n    }\n\n    //在this.setState中声明 \n    updateNum(newText) {\n        this.setState((state)=> {\n            return {\n                inputedNum: newText\n\n                //这里添加新的状态机变量\n                aBrandnewStateVariable:'I am a new variable.' \n            }\n        });\n    }\n\n```\n\n**1、在括号内的两个参数就是状态机，说白了，状态机就相当于变量。**\n**2、状态机的修改需要并且一定只能使用setState函数**\n\n```html \n\n    // 定义用户名输入函数\n    updateNum(newText) {\n        this.setState((state)=> {  //传入状态机参数，state是一个集合类参数\n            return {\n                inputedNum: newText\n            }\n        });\n    }\n\n    // 定义密码输入改变\n    updatePW(newText) {\n        this.setState(()=> { // 用不到的参数也可以不用写\n            return {\n                inputedPw: newText\n            }\n        });\n    }\n\n    //当输入框发生变化的时候，调用上面两个方法，这里用伪代码表示\n\n    <TextInput style={styles.numberInputStyle}\n                           keyboardType={'phone-pad'}\n                           placeholder={'请输入手机号'} \n                           onChangeText={(newText)=>this.updateNum(newText)}/>\n\n    <TextInput secureTextEntry={true}\n                           style={styles.passwordInputStyle}\n                           placeholder={'请输入密码'}\n                           onChangeText={(newText)=>this.updatePW(newText)}/>\n\n    \n    //状态机的值发生变化时，就会重新刷新界面，所以下面显示的电话号码会同步出现\n    <Text style={styles.textPromptStyle}>\n            您输入的手机号：{this.state.inputedNum}\n    </Text>\n\n```\n\n\n#### 状态机的扩展\n> **修改状态机可以使用setState函数**\n>  其实RN还提供了另外两个函数, replaceState函数与forceUpdate函数,*但是不建议大家用。*\n>  \n> **RN会根据哪个状态机值变化,从而去做相应的渲染。**\n>  如果setState函数将传入函数的返回值与当前状态机相比没有任何修改与增加,那么将不会进行渲染.\n\nsetState函数的原型（第二个函数）\n\n```html \n\n    setState(object oldState,function callback)\n\n```\n\n伪代码如下：\n\n```html \n\n    updateNum(newText) {\n            this.setState((state)=> {\n                for(var aName in state){  // 遍历之前的状态的 键和值\n                    console.log(aName);\n                    console.log(state[aName]);\n                }\n                return {\n                    // 改变状态机变量\n                    inputedNum: newText,\n                    aBrandnewStateVariable:'I am a new variable.' //添加了新的状态机变量\n                };\n            },this.changeNumDone); // setSate函数的回调函数, 当设置完成重新渲染完成后调用\n        }\n        changeNumDone(){\n            console.log('React Native has changed inputed Num');\n    }\n\n```\n\n运行结果：\n\n**1、changeNumDone()函数将在setState完成并且重新渲染完成后调用**\n**2、I am a new variable.语句会在第二次输入字符的时候打印**\n\n\n#### 判断是否渲染\n\n```html \n    \n    //如果在组件中实现这个函数,当RN决定重新渲染组件时,会先调用这个函数.如果返回false, RN将放弃渲染组件. 方法里面接收两个参数,分别代表接下里准备进行渲染所基于的props与state. props里面就包含的styles属性等等.\n\n    \n    boolean shouldComponentUpdate(object nextProps,object nextState)\n\n\n``\n\n```html \n\n    //\n    // 接下来是否进行渲染 shouldComponentUpdate(object nextProps, object nextState)\n    shouldComponentUpdate() { //接下来是否进行渲染\n        if(this.state.inputedNum.length<3) return false;\n        return true;\n    }\n\n```\n","source":"_posts/2、第一个程序与状态机的概念.md","raw":"---\ntitle: 2、第一个程序与状态机的概念\ndate: 2017-03-29 10:38:59\ntags: [React-native]\n---\n\n首先认识Index.android.js里面的代码 \n\n<!--more--> \n\n### 认识Index.android.js里面的代码\n\n```html\n\n    ********\n    ** 组件导入区  **\n\n    import React, { Component } from 'react';\n    import {\n        AppRegistry, //框架提供的API\n        StyleSheet,\n        Text,  // RN提供的组件\n        View,\n        TextInput // 记得引入组件\n    } from 'react-native';\n\n    ********\n\n    ********\n    ** 核心代码区  **\n\n    //逻辑处理\n    //let是更完美的var\n    let Dimensions = require('Dimensions');// 宽高\n    let totalWidth = Dimensions.get('window').width;  //声明了三个变量,根据屏幕动态变化\n    let leftStartPoint = totalWidth * 0.1;\n    let componentWidth = totalWidth * 0.8;\n\n    //界面绘制\n    class AwesomeProject extends Component {\n         render() {\n            return (\n                // 绘制渲染的控件\n                <View style={styles.container}>\n                    <TextInput style={styles.numberInputStyle}\n                               placeholder={'请输入手机号'}/>\n                    <Text style={styles.textPromptStyle}>\n                        您输入的手机号：\n                    </Text>\n                    <TextInput style={styles.passwordInputStyle}\n                               placeholder={'请输入密码'}\n                               secureTextEntry={true}/>\n                    <Text style={styles.bigTextPrompt}>\n                        确  定\n                    </Text>\n                </View>\n            );\n        }\n    }\n\n    ********\n\n    ********\n    ** 组件样式区  **\n\n    // 样式  const变量只能在声明的时候赋值一次\n    const styles = StyleSheet.create({\n        //各个组件都没有定义高度,父View设置了flex1,他会沾满整个高度,子组件没有设置会包裹内容\n        container: {\n            flex: 1,  //表示宽高会自动扩展\n            backgroundColor: 'white'\n        },\n        numberInputStyle: {\n            top: 20,     // top left表示从父组件的顶端(左侧) 向下(向右) 多少位置显示\n            left: leftStartPoint,\n            // height:30,  // IOS开发需要加上该高度\n            width: componentWidth,\n            backgroundColor: 'gray',\n            fontSize: 20\n        },\n        textPromptStyle: {\n            top: 30,\n            left: leftStartPoint,\n            //  // height:30,  // IOS开发需要加上该高度 因为IOS中TextInput不会自动设置高度\n            width: componentWidth,\n            fontSize: 20\n        },\n        passwordInputStyle: {\n            top: 50,\n            left: leftStartPoint,\n            width: componentWidth,\n            backgroundColor: 'gray',\n            fontSize: 20\n        },\n        bigTextPrompt:{\n            top:70,\n            left:leftStartPoint,\n            width:componentWidth,\n            backgroundColor:'gray',\n            color:'white',\n            textAlign:'center',//位置居中显示\n            fontSize:60\n        }\n    });\n\n    ********\n\n    ********\n    *** 注册启动组件 ***\n\n    // 注册了 AwesomeProject 组件\n    AppRegistry.registerComponent('AwesomeProject', () => AwesomeProject);\n\n```\n\n**关键字说明**\n\n1、在写代码之前需要导入基本的组件，如：React,Component,AppRegistry,StyleSheet,还有可视组件：Text,View等。\n\n2、在核心代码区中，也分为两个部分：逻辑处理和界面绘制。\n\n3、绘制界面等区域需要创建一个组件，如上面的AwesomeProject（AwesomeProject是项目的名，在这里也定义成了一个组件（类class））。\n\n**4、React Native 每个组件都具备render()方法，该方法用来绘制UI。在这里，这个方法直接return了一个JSX代码描述的UI组件。**\n\n5、const styles定义了组件的样式。\n\n\n### 状态机的概念\n>*React框架将所有的UI视为一个简单的状态机,那么任意一个UI场景就是状态机中的一种状态.*\n 状态机的值一旦变化, 默认界面就会重新渲染,这样一个过程可以很轻松的做到数据与UI保持一致.我们只需要空间状态机中的值就行.\n\n\n#### 状态机的定义\n\n```html \n    \n    //在构造函数中申明状态机的初始值\n    this.state = {\n        inputedNum : '',    \n        inputedPW : ''\n    }\n\n    //在this.setState中声明 \n    updateNum(newText) {\n        this.setState((state)=> {\n            return {\n                inputedNum: newText\n\n                //这里添加新的状态机变量\n                aBrandnewStateVariable:'I am a new variable.' \n            }\n        });\n    }\n\n```\n\n**1、在括号内的两个参数就是状态机，说白了，状态机就相当于变量。**\n**2、状态机的修改需要并且一定只能使用setState函数**\n\n```html \n\n    // 定义用户名输入函数\n    updateNum(newText) {\n        this.setState((state)=> {  //传入状态机参数，state是一个集合类参数\n            return {\n                inputedNum: newText\n            }\n        });\n    }\n\n    // 定义密码输入改变\n    updatePW(newText) {\n        this.setState(()=> { // 用不到的参数也可以不用写\n            return {\n                inputedPw: newText\n            }\n        });\n    }\n\n    //当输入框发生变化的时候，调用上面两个方法，这里用伪代码表示\n\n    <TextInput style={styles.numberInputStyle}\n                           keyboardType={'phone-pad'}\n                           placeholder={'请输入手机号'} \n                           onChangeText={(newText)=>this.updateNum(newText)}/>\n\n    <TextInput secureTextEntry={true}\n                           style={styles.passwordInputStyle}\n                           placeholder={'请输入密码'}\n                           onChangeText={(newText)=>this.updatePW(newText)}/>\n\n    \n    //状态机的值发生变化时，就会重新刷新界面，所以下面显示的电话号码会同步出现\n    <Text style={styles.textPromptStyle}>\n            您输入的手机号：{this.state.inputedNum}\n    </Text>\n\n```\n\n\n#### 状态机的扩展\n> **修改状态机可以使用setState函数**\n>  其实RN还提供了另外两个函数, replaceState函数与forceUpdate函数,*但是不建议大家用。*\n>  \n> **RN会根据哪个状态机值变化,从而去做相应的渲染。**\n>  如果setState函数将传入函数的返回值与当前状态机相比没有任何修改与增加,那么将不会进行渲染.\n\nsetState函数的原型（第二个函数）\n\n```html \n\n    setState(object oldState,function callback)\n\n```\n\n伪代码如下：\n\n```html \n\n    updateNum(newText) {\n            this.setState((state)=> {\n                for(var aName in state){  // 遍历之前的状态的 键和值\n                    console.log(aName);\n                    console.log(state[aName]);\n                }\n                return {\n                    // 改变状态机变量\n                    inputedNum: newText,\n                    aBrandnewStateVariable:'I am a new variable.' //添加了新的状态机变量\n                };\n            },this.changeNumDone); // setSate函数的回调函数, 当设置完成重新渲染完成后调用\n        }\n        changeNumDone(){\n            console.log('React Native has changed inputed Num');\n    }\n\n```\n\n运行结果：\n\n**1、changeNumDone()函数将在setState完成并且重新渲染完成后调用**\n**2、I am a new variable.语句会在第二次输入字符的时候打印**\n\n\n#### 判断是否渲染\n\n```html \n    \n    //如果在组件中实现这个函数,当RN决定重新渲染组件时,会先调用这个函数.如果返回false, RN将放弃渲染组件. 方法里面接收两个参数,分别代表接下里准备进行渲染所基于的props与state. props里面就包含的styles属性等等.\n\n    \n    boolean shouldComponentUpdate(object nextProps,object nextState)\n\n\n``\n\n```html \n\n    //\n    // 接下来是否进行渲染 shouldComponentUpdate(object nextProps, object nextState)\n    shouldComponentUpdate() { //接下来是否进行渲染\n        if(this.state.inputedNum.length<3) return false;\n        return true;\n    }\n\n```\n","slug":"2、第一个程序与状态机的概念","published":1,"updated":"2017-03-29T15:51:22.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj0v5msv10001x5ypic7fosr0","content":"<p>首先认识Index.android.js里面的代码 </p>\n<a id=\"more\"></a> \n<h3 id=\"认识Index-android-js里面的代码\"><a href=\"#认识Index-android-js里面的代码\" class=\"headerlink\" title=\"认识Index.android.js里面的代码\"></a>认识Index.android.js里面的代码</h3><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div><div class=\"line\">73</div><div class=\"line\">74</div><div class=\"line\">75</div><div class=\"line\">76</div><div class=\"line\">77</div><div class=\"line\">78</div><div class=\"line\">79</div><div class=\"line\">80</div><div class=\"line\">81</div><div class=\"line\">82</div><div class=\"line\">83</div><div class=\"line\">84</div><div class=\"line\">85</div><div class=\"line\">86</div><div class=\"line\">87</div><div class=\"line\">88</div><div class=\"line\">89</div><div class=\"line\">90</div><div class=\"line\">91</div><div class=\"line\">92</div><div class=\"line\">93</div><div class=\"line\">94</div><div class=\"line\">95</div><div class=\"line\">96</div><div class=\"line\">97</div><div class=\"line\">98</div><div class=\"line\">99</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\">********</div><div class=\"line\">** 组件导入区  **</div><div class=\"line\"></div><div class=\"line\">import React, &#123; Component &#125; from 'react';</div><div class=\"line\">import &#123;</div><div class=\"line\">    AppRegistry, //框架提供的API</div><div class=\"line\">    StyleSheet,</div><div class=\"line\">    Text,  // RN提供的组件</div><div class=\"line\">    View,</div><div class=\"line\">    TextInput // 记得引入组件</div><div class=\"line\">&#125; from 'react-native';</div><div class=\"line\"></div><div class=\"line\">********</div><div class=\"line\"></div><div class=\"line\">********</div><div class=\"line\">** 核心代码区  **</div><div class=\"line\"></div><div class=\"line\">//逻辑处理</div><div class=\"line\">//let是更完美的var</div><div class=\"line\">let Dimensions = require('Dimensions');// 宽高</div><div class=\"line\">let totalWidth = Dimensions.get('window').width;  //声明了三个变量,根据屏幕动态变化</div><div class=\"line\">let leftStartPoint = totalWidth * 0.1;</div><div class=\"line\">let componentWidth = totalWidth * 0.8;</div><div class=\"line\"></div><div class=\"line\">//界面绘制</div><div class=\"line\">class AwesomeProject extends Component &#123;</div><div class=\"line\">     render() &#123;</div><div class=\"line\">        return (</div><div class=\"line\">            // 绘制渲染的控件</div><div class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">View</span> <span class=\"attr\">style</span>=<span class=\"string\">&#123;styles.container&#125;</span>&gt;</span></div><div class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">TextInput</span> <span class=\"attr\">style</span>=<span class=\"string\">&#123;styles.numberInputStyle&#125;</span></span></div><div class=\"line\">                           <span class=\"attr\">placeholder</span>=<span class=\"string\">&#123;</span>'请输入手机号'&#125;/&gt;</div><div class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">Text</span> <span class=\"attr\">style</span>=<span class=\"string\">&#123;styles.textPromptStyle&#125;</span>&gt;</span></div><div class=\"line\">                    您输入的手机号：</div><div class=\"line\">                <span class=\"tag\">&lt;/<span class=\"name\">Text</span>&gt;</span></div><div class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">TextInput</span> <span class=\"attr\">style</span>=<span class=\"string\">&#123;styles.passwordInputStyle&#125;</span></span></div><div class=\"line\">                           <span class=\"attr\">placeholder</span>=<span class=\"string\">&#123;</span>'请输入密码'&#125;</div><div class=\"line\">                           <span class=\"attr\">secureTextEntry</span>=<span class=\"string\">&#123;true&#125;/</span>&gt;</div><div class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">Text</span> <span class=\"attr\">style</span>=<span class=\"string\">&#123;styles.bigTextPrompt&#125;</span>&gt;</span></div><div class=\"line\">                    确  定</div><div class=\"line\">                <span class=\"tag\">&lt;/<span class=\"name\">Text</span>&gt;</span></div><div class=\"line\">            <span class=\"tag\">&lt;/<span class=\"name\">View</span>&gt;</span></div><div class=\"line\">        );</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">********</div><div class=\"line\"></div><div class=\"line\">********</div><div class=\"line\">** 组件样式区  **</div><div class=\"line\"></div><div class=\"line\">// 样式  const变量只能在声明的时候赋值一次</div><div class=\"line\">const styles = StyleSheet.create(&#123;</div><div class=\"line\">    //各个组件都没有定义高度,父View设置了flex1,他会沾满整个高度,子组件没有设置会包裹内容</div><div class=\"line\">    container: &#123;</div><div class=\"line\">        flex: 1,  //表示宽高会自动扩展</div><div class=\"line\">        backgroundColor: 'white'</div><div class=\"line\">    &#125;,</div><div class=\"line\">    numberInputStyle: &#123;</div><div class=\"line\">        top: 20,     // top left表示从父组件的顶端(左侧) 向下(向右) 多少位置显示</div><div class=\"line\">        left: leftStartPoint,</div><div class=\"line\">        // height:30,  // IOS开发需要加上该高度</div><div class=\"line\">        width: componentWidth,</div><div class=\"line\">        backgroundColor: 'gray',</div><div class=\"line\">        fontSize: 20</div><div class=\"line\">    &#125;,</div><div class=\"line\">    textPromptStyle: &#123;</div><div class=\"line\">        top: 30,</div><div class=\"line\">        left: leftStartPoint,</div><div class=\"line\">        //  // height:30,  // IOS开发需要加上该高度 因为IOS中TextInput不会自动设置高度</div><div class=\"line\">        width: componentWidth,</div><div class=\"line\">        fontSize: 20</div><div class=\"line\">    &#125;,</div><div class=\"line\">    passwordInputStyle: &#123;</div><div class=\"line\">        top: 50,</div><div class=\"line\">        left: leftStartPoint,</div><div class=\"line\">        width: componentWidth,</div><div class=\"line\">        backgroundColor: 'gray',</div><div class=\"line\">        fontSize: 20</div><div class=\"line\">    &#125;,</div><div class=\"line\">    bigTextPrompt:&#123;</div><div class=\"line\">        top:70,</div><div class=\"line\">        left:leftStartPoint,</div><div class=\"line\">        width:componentWidth,</div><div class=\"line\">        backgroundColor:'gray',</div><div class=\"line\">        color:'white',</div><div class=\"line\">        textAlign:'center',//位置居中显示</div><div class=\"line\">        fontSize:60</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;);</div><div class=\"line\"></div><div class=\"line\">********</div><div class=\"line\"></div><div class=\"line\">********</div><div class=\"line\">*** 注册启动组件 ***</div><div class=\"line\"></div><div class=\"line\">// 注册了 AwesomeProject 组件</div><div class=\"line\">AppRegistry.registerComponent('AwesomeProject', () =&gt; AwesomeProject);</div></pre></td></tr></table></figure>\n<p><strong>关键字说明</strong></p>\n<p>1、在写代码之前需要导入基本的组件，如：React,Component,AppRegistry,StyleSheet,还有可视组件：Text,View等。</p>\n<p>2、在核心代码区中，也分为两个部分：逻辑处理和界面绘制。</p>\n<p>3、绘制界面等区域需要创建一个组件，如上面的AwesomeProject（AwesomeProject是项目的名，在这里也定义成了一个组件（类class））。</p>\n<p><strong>4、React Native 每个组件都具备render()方法，该方法用来绘制UI。在这里，这个方法直接return了一个JSX代码描述的UI组件。</strong></p>\n<p>5、const styles定义了组件的样式。</p>\n<h3 id=\"状态机的概念\"><a href=\"#状态机的概念\" class=\"headerlink\" title=\"状态机的概念\"></a>状态机的概念</h3><blockquote>\n<p><em>React框架将所有的UI视为一个简单的状态机,那么任意一个UI场景就是状态机中的一种状态.</em><br> 状态机的值一旦变化, 默认界面就会重新渲染,这样一个过程可以很轻松的做到数据与UI保持一致.我们只需要空间状态机中的值就行.</p>\n</blockquote>\n<h4 id=\"状态机的定义\"><a href=\"#状态机的定义\" class=\"headerlink\" title=\"状态机的定义\"></a>状态机的定义</h4><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\">//在构造函数中申明状态机的初始值</div><div class=\"line\">this.state = &#123;</div><div class=\"line\">    inputedNum : '',    </div><div class=\"line\">    inputedPW : ''</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">//在this.setState中声明 </div><div class=\"line\">updateNum(newText) &#123;</div><div class=\"line\">    this.setState((state)=&gt; &#123;</div><div class=\"line\">        return &#123;</div><div class=\"line\">            inputedNum: newText</div><div class=\"line\"></div><div class=\"line\">            //这里添加新的状态机变量</div><div class=\"line\">            aBrandnewStateVariable:'I am a new variable.' </div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p><strong>1、在括号内的两个参数就是状态机，说白了，状态机就相当于变量。</strong><br><strong>2、状态机的修改需要并且一定只能使用setState函数</strong></p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\">// 定义用户名输入函数</div><div class=\"line\">updateNum(newText) &#123;</div><div class=\"line\">    this.setState((state)=&gt; &#123;  //传入状态机参数，state是一个集合类参数</div><div class=\"line\">        return &#123;</div><div class=\"line\">            inputedNum: newText</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;);</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">// 定义密码输入改变</div><div class=\"line\">updatePW(newText) &#123;</div><div class=\"line\">    this.setState(()=&gt; &#123; // 用不到的参数也可以不用写</div><div class=\"line\">        return &#123;</div><div class=\"line\">            inputedPw: newText</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;);</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">//当输入框发生变化的时候，调用上面两个方法，这里用伪代码表示</div><div class=\"line\"></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">TextInput</span> <span class=\"attr\">style</span>=<span class=\"string\">&#123;styles.numberInputStyle&#125;</span></span></div><div class=\"line\">                       <span class=\"attr\">keyboardType</span>=<span class=\"string\">&#123;</span>'<span class=\"attr\">phone-pad</span>'&#125;</div><div class=\"line\">                       <span class=\"attr\">placeholder</span>=<span class=\"string\">&#123;</span>'请输入手机号'&#125; </div><div class=\"line\">                       <span class=\"attr\">onChangeText</span>=<span class=\"string\">&#123;(newText)</span>=&gt;this.updateNum(newText)&#125;/&gt;</div><div class=\"line\"></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">TextInput</span> <span class=\"attr\">secureTextEntry</span>=<span class=\"string\">&#123;true&#125;</span></span></div><div class=\"line\">                       <span class=\"attr\">style</span>=<span class=\"string\">&#123;styles.passwordInputStyle&#125;</span></div><div class=\"line\">                       <span class=\"attr\">placeholder</span>=<span class=\"string\">&#123;</span>'请输入密码'&#125;</div><div class=\"line\">                       <span class=\"attr\">onChangeText</span>=<span class=\"string\">&#123;(newText)</span>=&gt;this.updatePW(newText)&#125;/&gt;</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">//状态机的值发生变化时，就会重新刷新界面，所以下面显示的电话号码会同步出现</div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">Text</span> <span class=\"attr\">style</span>=<span class=\"string\">&#123;styles.textPromptStyle&#125;</span>&gt;</span></div><div class=\"line\">        您输入的手机号：&#123;this.state.inputedNum&#125;</div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">Text</span>&gt;</span></div></pre></td></tr></table></figure>\n<h4 id=\"状态机的扩展\"><a href=\"#状态机的扩展\" class=\"headerlink\" title=\"状态机的扩展\"></a>状态机的扩展</h4><blockquote>\n<p><strong>修改状态机可以使用setState函数</strong><br> 其实RN还提供了另外两个函数, replaceState函数与forceUpdate函数,<em>但是不建议大家用。</em></p>\n<p><strong>RN会根据哪个状态机值变化,从而去做相应的渲染。</strong><br> 如果setState函数将传入函数的返回值与当前状态机相比没有任何修改与增加,那么将不会进行渲染.</p>\n</blockquote>\n<p>setState函数的原型（第二个函数）</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\">setState(object oldState,function callback)</div></pre></td></tr></table></figure>\n<p>伪代码如下：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\">updateNum(newText) &#123;</div><div class=\"line\">        this.setState((state)=&gt; &#123;</div><div class=\"line\">            for(var aName in state)&#123;  // 遍历之前的状态的 键和值</div><div class=\"line\">                console.log(aName);</div><div class=\"line\">                console.log(state[aName]);</div><div class=\"line\">            &#125;</div><div class=\"line\">            return &#123;</div><div class=\"line\">                // 改变状态机变量</div><div class=\"line\">                inputedNum: newText,</div><div class=\"line\">                aBrandnewStateVariable:'I am a new variable.' //添加了新的状态机变量</div><div class=\"line\">            &#125;;</div><div class=\"line\">        &#125;,this.changeNumDone); // setSate函数的回调函数, 当设置完成重新渲染完成后调用</div><div class=\"line\">    &#125;</div><div class=\"line\">    changeNumDone()&#123;</div><div class=\"line\">        console.log('React Native has changed inputed Num');</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>运行结果：</p>\n<p><strong>1、changeNumDone()函数将在setState完成并且重新渲染完成后调用</strong><br><strong>2、I am a new variable.语句会在第二次输入字符的时候打印</strong></p>\n<h4 id=\"判断是否渲染\"><a href=\"#判断是否渲染\" class=\"headerlink\" title=\"判断是否渲染\"></a>判断是否渲染</h4><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div></pre></td><td class=\"code\"><pre><div class=\"line\">    </div><div class=\"line\">    //如果在组件中实现这个函数,当RN决定重新渲染组件时,会先调用这个函数.如果返回false, RN将放弃渲染组件. 方法里面接收两个参数,分别代表接下里准备进行渲染所基于的props与state. props里面就包含的styles属性等等.</div><div class=\"line\"></div><div class=\"line\">    </div><div class=\"line\">    boolean shouldComponentUpdate(object nextProps,object nextState)</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">``</div><div class=\"line\"></div><div class=\"line\">```html </div><div class=\"line\"></div><div class=\"line\">    //</div><div class=\"line\">    // 接下来是否进行渲染 shouldComponentUpdate(object nextProps, object nextState)</div><div class=\"line\">    shouldComponentUpdate() &#123; //接下来是否进行渲染</div><div class=\"line\">        if(this.state.inputedNum.length<span class=\"tag\">&lt;<span class=\"name\">3)</span> <span class=\"attr\">return</span> <span class=\"attr\">false</span>;</span></div><div class=\"line\">        <span class=\"attr\">return</span> <span class=\"attr\">true</span>;</div><div class=\"line\">    &#125;</div></pre></td></tr></table></figure>\n","excerpt":"<p>首先认识Index.android.js里面的代码 </p>","more":"<h3 id=\"认识Index-android-js里面的代码\"><a href=\"#认识Index-android-js里面的代码\" class=\"headerlink\" title=\"认识Index.android.js里面的代码\"></a>认识Index.android.js里面的代码</h3><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div><div class=\"line\">73</div><div class=\"line\">74</div><div class=\"line\">75</div><div class=\"line\">76</div><div class=\"line\">77</div><div class=\"line\">78</div><div class=\"line\">79</div><div class=\"line\">80</div><div class=\"line\">81</div><div class=\"line\">82</div><div class=\"line\">83</div><div class=\"line\">84</div><div class=\"line\">85</div><div class=\"line\">86</div><div class=\"line\">87</div><div class=\"line\">88</div><div class=\"line\">89</div><div class=\"line\">90</div><div class=\"line\">91</div><div class=\"line\">92</div><div class=\"line\">93</div><div class=\"line\">94</div><div class=\"line\">95</div><div class=\"line\">96</div><div class=\"line\">97</div><div class=\"line\">98</div><div class=\"line\">99</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\">********</div><div class=\"line\">** 组件导入区  **</div><div class=\"line\"></div><div class=\"line\">import React, &#123; Component &#125; from 'react';</div><div class=\"line\">import &#123;</div><div class=\"line\">    AppRegistry, //框架提供的API</div><div class=\"line\">    StyleSheet,</div><div class=\"line\">    Text,  // RN提供的组件</div><div class=\"line\">    View,</div><div class=\"line\">    TextInput // 记得引入组件</div><div class=\"line\">&#125; from 'react-native';</div><div class=\"line\"></div><div class=\"line\">********</div><div class=\"line\"></div><div class=\"line\">********</div><div class=\"line\">** 核心代码区  **</div><div class=\"line\"></div><div class=\"line\">//逻辑处理</div><div class=\"line\">//let是更完美的var</div><div class=\"line\">let Dimensions = require('Dimensions');// 宽高</div><div class=\"line\">let totalWidth = Dimensions.get('window').width;  //声明了三个变量,根据屏幕动态变化</div><div class=\"line\">let leftStartPoint = totalWidth * 0.1;</div><div class=\"line\">let componentWidth = totalWidth * 0.8;</div><div class=\"line\"></div><div class=\"line\">//界面绘制</div><div class=\"line\">class AwesomeProject extends Component &#123;</div><div class=\"line\">     render() &#123;</div><div class=\"line\">        return (</div><div class=\"line\">            // 绘制渲染的控件</div><div class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">View</span> <span class=\"attr\">style</span>=<span class=\"string\">&#123;styles.container&#125;</span>&gt;</span></div><div class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">TextInput</span> <span class=\"attr\">style</span>=<span class=\"string\">&#123;styles.numberInputStyle&#125;</span></div><div class=\"line\">                           <span class=\"attr\">placeholder</span>=<span class=\"string\">&#123;</span>'请输入手机号'&#125;/&gt;</span></div><div class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">Text</span> <span class=\"attr\">style</span>=<span class=\"string\">&#123;styles.textPromptStyle&#125;</span>&gt;</span></div><div class=\"line\">                    您输入的手机号：</div><div class=\"line\">                <span class=\"tag\">&lt;/<span class=\"name\">Text</span>&gt;</span></div><div class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">TextInput</span> <span class=\"attr\">style</span>=<span class=\"string\">&#123;styles.passwordInputStyle&#125;</span></div><div class=\"line\">                           <span class=\"attr\">placeholder</span>=<span class=\"string\">&#123;</span>'请输入密码'&#125;</div><div class=\"line\">                           <span class=\"attr\">secureTextEntry</span>=<span class=\"string\">&#123;true&#125;/</span>&gt;</span></div><div class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">Text</span> <span class=\"attr\">style</span>=<span class=\"string\">&#123;styles.bigTextPrompt&#125;</span>&gt;</span></div><div class=\"line\">                    确  定</div><div class=\"line\">                <span class=\"tag\">&lt;/<span class=\"name\">Text</span>&gt;</span></div><div class=\"line\">            <span class=\"tag\">&lt;/<span class=\"name\">View</span>&gt;</span></div><div class=\"line\">        );</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">********</div><div class=\"line\"></div><div class=\"line\">********</div><div class=\"line\">** 组件样式区  **</div><div class=\"line\"></div><div class=\"line\">// 样式  const变量只能在声明的时候赋值一次</div><div class=\"line\">const styles = StyleSheet.create(&#123;</div><div class=\"line\">    //各个组件都没有定义高度,父View设置了flex1,他会沾满整个高度,子组件没有设置会包裹内容</div><div class=\"line\">    container: &#123;</div><div class=\"line\">        flex: 1,  //表示宽高会自动扩展</div><div class=\"line\">        backgroundColor: 'white'</div><div class=\"line\">    &#125;,</div><div class=\"line\">    numberInputStyle: &#123;</div><div class=\"line\">        top: 20,     // top left表示从父组件的顶端(左侧) 向下(向右) 多少位置显示</div><div class=\"line\">        left: leftStartPoint,</div><div class=\"line\">        // height:30,  // IOS开发需要加上该高度</div><div class=\"line\">        width: componentWidth,</div><div class=\"line\">        backgroundColor: 'gray',</div><div class=\"line\">        fontSize: 20</div><div class=\"line\">    &#125;,</div><div class=\"line\">    textPromptStyle: &#123;</div><div class=\"line\">        top: 30,</div><div class=\"line\">        left: leftStartPoint,</div><div class=\"line\">        //  // height:30,  // IOS开发需要加上该高度 因为IOS中TextInput不会自动设置高度</div><div class=\"line\">        width: componentWidth,</div><div class=\"line\">        fontSize: 20</div><div class=\"line\">    &#125;,</div><div class=\"line\">    passwordInputStyle: &#123;</div><div class=\"line\">        top: 50,</div><div class=\"line\">        left: leftStartPoint,</div><div class=\"line\">        width: componentWidth,</div><div class=\"line\">        backgroundColor: 'gray',</div><div class=\"line\">        fontSize: 20</div><div class=\"line\">    &#125;,</div><div class=\"line\">    bigTextPrompt:&#123;</div><div class=\"line\">        top:70,</div><div class=\"line\">        left:leftStartPoint,</div><div class=\"line\">        width:componentWidth,</div><div class=\"line\">        backgroundColor:'gray',</div><div class=\"line\">        color:'white',</div><div class=\"line\">        textAlign:'center',//位置居中显示</div><div class=\"line\">        fontSize:60</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;);</div><div class=\"line\"></div><div class=\"line\">********</div><div class=\"line\"></div><div class=\"line\">********</div><div class=\"line\">*** 注册启动组件 ***</div><div class=\"line\"></div><div class=\"line\">// 注册了 AwesomeProject 组件</div><div class=\"line\">AppRegistry.registerComponent('AwesomeProject', () =&gt; AwesomeProject);</div></pre></td></tr></table></figure>\n<p><strong>关键字说明</strong></p>\n<p>1、在写代码之前需要导入基本的组件，如：React,Component,AppRegistry,StyleSheet,还有可视组件：Text,View等。</p>\n<p>2、在核心代码区中，也分为两个部分：逻辑处理和界面绘制。</p>\n<p>3、绘制界面等区域需要创建一个组件，如上面的AwesomeProject（AwesomeProject是项目的名，在这里也定义成了一个组件（类class））。</p>\n<p><strong>4、React Native 每个组件都具备render()方法，该方法用来绘制UI。在这里，这个方法直接return了一个JSX代码描述的UI组件。</strong></p>\n<p>5、const styles定义了组件的样式。</p>\n<h3 id=\"状态机的概念\"><a href=\"#状态机的概念\" class=\"headerlink\" title=\"状态机的概念\"></a>状态机的概念</h3><blockquote>\n<p><em>React框架将所有的UI视为一个简单的状态机,那么任意一个UI场景就是状态机中的一种状态.</em><br> 状态机的值一旦变化, 默认界面就会重新渲染,这样一个过程可以很轻松的做到数据与UI保持一致.我们只需要空间状态机中的值就行.</p>\n</blockquote>\n<h4 id=\"状态机的定义\"><a href=\"#状态机的定义\" class=\"headerlink\" title=\"状态机的定义\"></a>状态机的定义</h4><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\">//在构造函数中申明状态机的初始值</div><div class=\"line\">this.state = &#123;</div><div class=\"line\">    inputedNum : '',    </div><div class=\"line\">    inputedPW : ''</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">//在this.setState中声明 </div><div class=\"line\">updateNum(newText) &#123;</div><div class=\"line\">    this.setState((state)=&gt; &#123;</div><div class=\"line\">        return &#123;</div><div class=\"line\">            inputedNum: newText</div><div class=\"line\"></div><div class=\"line\">            //这里添加新的状态机变量</div><div class=\"line\">            aBrandnewStateVariable:'I am a new variable.' </div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p><strong>1、在括号内的两个参数就是状态机，说白了，状态机就相当于变量。</strong><br><strong>2、状态机的修改需要并且一定只能使用setState函数</strong></p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\">// 定义用户名输入函数</div><div class=\"line\">updateNum(newText) &#123;</div><div class=\"line\">    this.setState((state)=&gt; &#123;  //传入状态机参数，state是一个集合类参数</div><div class=\"line\">        return &#123;</div><div class=\"line\">            inputedNum: newText</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;);</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">// 定义密码输入改变</div><div class=\"line\">updatePW(newText) &#123;</div><div class=\"line\">    this.setState(()=&gt; &#123; // 用不到的参数也可以不用写</div><div class=\"line\">        return &#123;</div><div class=\"line\">            inputedPw: newText</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;);</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">//当输入框发生变化的时候，调用上面两个方法，这里用伪代码表示</div><div class=\"line\"></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">TextInput</span> <span class=\"attr\">style</span>=<span class=\"string\">&#123;styles.numberInputStyle&#125;</span></div><div class=\"line\">                       <span class=\"attr\">keyboardType</span>=<span class=\"string\">&#123;</span>'<span class=\"attr\">phone-pad</span>'&#125;</div><div class=\"line\">                       <span class=\"attr\">placeholder</span>=<span class=\"string\">&#123;</span>'请输入手机号'&#125; </div><div class=\"line\">                       <span class=\"attr\">onChangeText</span>=<span class=\"string\">&#123;(newText)</span>=&gt;</span>this.updateNum(newText)&#125;/&gt;</div><div class=\"line\"></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">TextInput</span> <span class=\"attr\">secureTextEntry</span>=<span class=\"string\">&#123;true&#125;</span></div><div class=\"line\">                       <span class=\"attr\">style</span>=<span class=\"string\">&#123;styles.passwordInputStyle&#125;</span></div><div class=\"line\">                       <span class=\"attr\">placeholder</span>=<span class=\"string\">&#123;</span>'请输入密码'&#125;</div><div class=\"line\">                       <span class=\"attr\">onChangeText</span>=<span class=\"string\">&#123;(newText)</span>=&gt;</span>this.updatePW(newText)&#125;/&gt;</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">//状态机的值发生变化时，就会重新刷新界面，所以下面显示的电话号码会同步出现</div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">Text</span> <span class=\"attr\">style</span>=<span class=\"string\">&#123;styles.textPromptStyle&#125;</span>&gt;</span></div><div class=\"line\">        您输入的手机号：&#123;this.state.inputedNum&#125;</div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">Text</span>&gt;</span></div></pre></td></tr></table></figure>\n<h4 id=\"状态机的扩展\"><a href=\"#状态机的扩展\" class=\"headerlink\" title=\"状态机的扩展\"></a>状态机的扩展</h4><blockquote>\n<p><strong>修改状态机可以使用setState函数</strong><br> 其实RN还提供了另外两个函数, replaceState函数与forceUpdate函数,<em>但是不建议大家用。</em></p>\n<p><strong>RN会根据哪个状态机值变化,从而去做相应的渲染。</strong><br> 如果setState函数将传入函数的返回值与当前状态机相比没有任何修改与增加,那么将不会进行渲染.</p>\n</blockquote>\n<p>setState函数的原型（第二个函数）</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\">setState(object oldState,function callback)</div></pre></td></tr></table></figure>\n<p>伪代码如下：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\">updateNum(newText) &#123;</div><div class=\"line\">        this.setState((state)=&gt; &#123;</div><div class=\"line\">            for(var aName in state)&#123;  // 遍历之前的状态的 键和值</div><div class=\"line\">                console.log(aName);</div><div class=\"line\">                console.log(state[aName]);</div><div class=\"line\">            &#125;</div><div class=\"line\">            return &#123;</div><div class=\"line\">                // 改变状态机变量</div><div class=\"line\">                inputedNum: newText,</div><div class=\"line\">                aBrandnewStateVariable:'I am a new variable.' //添加了新的状态机变量</div><div class=\"line\">            &#125;;</div><div class=\"line\">        &#125;,this.changeNumDone); // setSate函数的回调函数, 当设置完成重新渲染完成后调用</div><div class=\"line\">    &#125;</div><div class=\"line\">    changeNumDone()&#123;</div><div class=\"line\">        console.log('React Native has changed inputed Num');</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>运行结果：</p>\n<p><strong>1、changeNumDone()函数将在setState完成并且重新渲染完成后调用</strong><br><strong>2、I am a new variable.语句会在第二次输入字符的时候打印</strong></p>\n<h4 id=\"判断是否渲染\"><a href=\"#判断是否渲染\" class=\"headerlink\" title=\"判断是否渲染\"></a>判断是否渲染</h4><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div></pre></td><td class=\"code\"><pre><div class=\"line\">    </div><div class=\"line\">    //如果在组件中实现这个函数,当RN决定重新渲染组件时,会先调用这个函数.如果返回false, RN将放弃渲染组件. 方法里面接收两个参数,分别代表接下里准备进行渲染所基于的props与state. props里面就包含的styles属性等等.</div><div class=\"line\"></div><div class=\"line\">    </div><div class=\"line\">    boolean shouldComponentUpdate(object nextProps,object nextState)</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">``</div><div class=\"line\"></div><div class=\"line\">```html </div><div class=\"line\"></div><div class=\"line\">    //</div><div class=\"line\">    // 接下来是否进行渲染 shouldComponentUpdate(object nextProps, object nextState)</div><div class=\"line\">    shouldComponentUpdate() &#123; //接下来是否进行渲染</div><div class=\"line\">        if(this.state.inputedNum.length<span class=\"tag\">&lt;<span class=\"name\">3)</span> <span class=\"attr\">return</span> <span class=\"attr\">false</span>;</div><div class=\"line\">        <span class=\"attr\">return</span> <span class=\"attr\">true</span>;</div><div class=\"line\">    &#125;</span></div></pre></td></tr></table></figure>"},{"title":"4、Hello World程序","date":"2017-03-29T02:44:15.000Z","_content":"\n### 第一个hello world 代码\n\n<!--more-->\n\n```js\n    \n    //导入组件\n    import React, {\n      Component\n    } from 'react';\n    import {\n      AppRegistry,\n      StyleSheet,\n      Text,\n      View\n    } from 'react-native';\n\n    //定义根容器\n    export default class Hellow extends Component {\n      render() {\n        return (\n          <Text>Hello ,world!!</Text>\n        );\n      }\n    }\n    \n    //注册\n    AppRegistry.registerComponent('AwesomeProject', () => Hellow);\n\n```\n\n要点：\n1、improt 用来导入所需要的组件（详细可以参考ES6）\n2、定义根容器\n    + 需要继承 Component对象。\n    + 要在render（）方法内返回JSX语句。如（ <Text >Hello ,world!!</Text>）\n3、AppRegistry模块则是用来告知React Native哪一个组件被注册为整个应用的根容器。只调用一次。\n\n\n\n### 加入props(属性)\n\n```html \n\n    import React, {\n      Component\n    } from 'react';\n\n    import {\n      AppRegistry,\n      Image\n    } from 'react-native';\n\n    export default class Bananas extends Component {\n      render() {\n        let pic = {\n          uri: 'https://upload.wikimedia.org/wikipedia/commons/d/de/Bananavarieties.jpg'\n        };\n        return (\n          <Image\n              style={{width : 193,height : 110}}\n              source={pic} />\n        );\n      }\n    }\n\n    AppRegistry.registerComponent('AwesomeProject', () => Bananas);\n\n```\n\n要点：\n1、如何指定props?\n    + 在JSX中用{}的形式包住js变量。并且变量要使用对象类型\n\n2、加入图片使用Image标签，图片的source属性对象为{uri:''};\n\n\n\n### 自定义组件\n\n```html \n  \n    import React, {\n      Component\n    } from 'react';\n    import {\n      AppRegistry,\n      View,\n      Image,\n      Text,\n    } from 'react-native';\n\n\n    class Greeting extends Component {\n      render() {\n        return (\n          <Text>Hello {this.props.name}!!</Text>\n        );\n      }\n    }\n    class LotsOfGreetings extends Component {\n      render() {\n        return (\n          <View style={{alignItems: 'center'}}>\n            <Greeting name='Rexxar' />\n            <Greeting name='Jaina' />\n            <Greeting name='Valeera' />\n          </View>\n        );\n      }\n    }\n\n    AppRegistry.registerComponent('AwesomeProject', () => LotsOfGreetings);\n\n\n```\n\n\n要点：\n1、自定义组件很简单，通过基础的Text,View,Image 等组件，然后定义其中的props属性，如上述代码。之后调用代码时，属性就变成了标签属性。","source":"_posts/4、Hello-World程序.md","raw":"---\ntitle: 4、Hello World程序\ndate: 2017-03-29 10:44:15\ntags: [React-native]\n---\n\n### 第一个hello world 代码\n\n<!--more-->\n\n```js\n    \n    //导入组件\n    import React, {\n      Component\n    } from 'react';\n    import {\n      AppRegistry,\n      StyleSheet,\n      Text,\n      View\n    } from 'react-native';\n\n    //定义根容器\n    export default class Hellow extends Component {\n      render() {\n        return (\n          <Text>Hello ,world!!</Text>\n        );\n      }\n    }\n    \n    //注册\n    AppRegistry.registerComponent('AwesomeProject', () => Hellow);\n\n```\n\n要点：\n1、improt 用来导入所需要的组件（详细可以参考ES6）\n2、定义根容器\n    + 需要继承 Component对象。\n    + 要在render（）方法内返回JSX语句。如（ <Text >Hello ,world!!</Text>）\n3、AppRegistry模块则是用来告知React Native哪一个组件被注册为整个应用的根容器。只调用一次。\n\n\n\n### 加入props(属性)\n\n```html \n\n    import React, {\n      Component\n    } from 'react';\n\n    import {\n      AppRegistry,\n      Image\n    } from 'react-native';\n\n    export default class Bananas extends Component {\n      render() {\n        let pic = {\n          uri: 'https://upload.wikimedia.org/wikipedia/commons/d/de/Bananavarieties.jpg'\n        };\n        return (\n          <Image\n              style={{width : 193,height : 110}}\n              source={pic} />\n        );\n      }\n    }\n\n    AppRegistry.registerComponent('AwesomeProject', () => Bananas);\n\n```\n\n要点：\n1、如何指定props?\n    + 在JSX中用{}的形式包住js变量。并且变量要使用对象类型\n\n2、加入图片使用Image标签，图片的source属性对象为{uri:''};\n\n\n\n### 自定义组件\n\n```html \n  \n    import React, {\n      Component\n    } from 'react';\n    import {\n      AppRegistry,\n      View,\n      Image,\n      Text,\n    } from 'react-native';\n\n\n    class Greeting extends Component {\n      render() {\n        return (\n          <Text>Hello {this.props.name}!!</Text>\n        );\n      }\n    }\n    class LotsOfGreetings extends Component {\n      render() {\n        return (\n          <View style={{alignItems: 'center'}}>\n            <Greeting name='Rexxar' />\n            <Greeting name='Jaina' />\n            <Greeting name='Valeera' />\n          </View>\n        );\n      }\n    }\n\n    AppRegistry.registerComponent('AwesomeProject', () => LotsOfGreetings);\n\n\n```\n\n\n要点：\n1、自定义组件很简单，通过基础的Text,View,Image 等组件，然后定义其中的props属性，如上述代码。之后调用代码时，属性就变成了标签属性。","slug":"4、Hello-World程序","published":1,"updated":"2017-03-29T15:51:22.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj0v5msv60003x5ypmn1c9y2c","content":"<h3 id=\"第一个hello-world-代码\"><a href=\"#第一个hello-world-代码\" class=\"headerlink\" title=\"第一个hello world 代码\"></a>第一个hello world 代码</h3><a id=\"more\"></a>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">//导入组件</span></div><div class=\"line\"><span class=\"keyword\">import</span> React, &#123;</div><div class=\"line\">  Component</div><div class=\"line\">&#125; <span class=\"keyword\">from</span> <span class=\"string\">'react'</span>;</div><div class=\"line\"><span class=\"keyword\">import</span> &#123;</div><div class=\"line\">  AppRegistry,</div><div class=\"line\">  StyleSheet,</div><div class=\"line\">  Text,</div><div class=\"line\">  View</div><div class=\"line\">&#125; <span class=\"keyword\">from</span> <span class=\"string\">'react-native'</span>;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">//定义根容器</span></div><div class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Hellow</span> <span class=\"keyword\">extends</span> <span class=\"title\">Component</span> </span>&#123;</div><div class=\"line\">  render() &#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> (</div><div class=\"line\">      <span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">Text</span>&gt;</span>Hello ,world!!<span class=\"tag\">&lt;/<span class=\"name\">Text</span>&gt;</span></span></div><div class=\"line\">    );</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">//注册</span></div><div class=\"line\">AppRegistry.registerComponent(<span class=\"string\">'AwesomeProject'</span>, () =&gt; Hellow);</div></pre></td></tr></table></figure>\n<p>要点：<br>1、improt 用来导入所需要的组件（详细可以参考ES6）<br>2、定义根容器</p>\n<pre><code>+ 需要继承 Component对象。\n+ 要在render（）方法内返回JSX语句。如（ &lt;Text &gt;Hello ,world!!&lt;/Text&gt;）\n</code></pre><p>3、AppRegistry模块则是用来告知React Native哪一个组件被注册为整个应用的根容器。只调用一次。</p>\n<h3 id=\"加入props-属性\"><a href=\"#加入props-属性\" class=\"headerlink\" title=\"加入props(属性)\"></a>加入props(属性)</h3><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\">import React, &#123;</div><div class=\"line\">  Component</div><div class=\"line\">&#125; from 'react';</div><div class=\"line\"></div><div class=\"line\">import &#123;</div><div class=\"line\">  AppRegistry,</div><div class=\"line\">  Image</div><div class=\"line\">&#125; from 'react-native';</div><div class=\"line\"></div><div class=\"line\">export default class Bananas extends Component &#123;</div><div class=\"line\">  render() &#123;</div><div class=\"line\">    let pic = &#123;</div><div class=\"line\">      uri: 'https://upload.wikimedia.org/wikipedia/commons/d/de/Bananavarieties.jpg'</div><div class=\"line\">    &#125;;</div><div class=\"line\">    return (</div><div class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">Image</span></span></div><div class=\"line\">          <span class=\"attr\">style</span>=<span class=\"string\">&#123;&#123;width</span> <span class=\"attr\">:</span> <span class=\"attr\">193</span>,<span class=\"attr\">height</span> <span class=\"attr\">:</span> <span class=\"attr\">110</span>&#125;&#125;</div><div class=\"line\">          <span class=\"attr\">source</span>=<span class=\"string\">&#123;pic&#125;</span> /&gt;</div><div class=\"line\">    );</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">AppRegistry.registerComponent('AwesomeProject', () =&gt; Bananas);</div></pre></td></tr></table></figure>\n<p>要点：<br>1、如何指定props?</p>\n<pre><code>+ 在JSX中用{}的形式包住js变量。并且变量要使用对象类型\n</code></pre><p>2、加入图片使用Image标签，图片的source属性对象为{uri:’’};</p>\n<h3 id=\"自定义组件\"><a href=\"#自定义组件\" class=\"headerlink\" title=\"自定义组件\"></a>自定义组件</h3><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div></pre></td><td class=\"code\"><pre><div class=\"line\">  </div><div class=\"line\">import React, &#123;</div><div class=\"line\">  Component</div><div class=\"line\">&#125; from 'react';</div><div class=\"line\">import &#123;</div><div class=\"line\">  AppRegistry,</div><div class=\"line\">  View,</div><div class=\"line\">  Image,</div><div class=\"line\">  Text,</div><div class=\"line\">&#125; from 'react-native';</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">class Greeting extends Component &#123;</div><div class=\"line\">  render() &#123;</div><div class=\"line\">    return (</div><div class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">Text</span>&gt;</span>Hello &#123;this.props.name&#125;!!<span class=\"tag\">&lt;/<span class=\"name\">Text</span>&gt;</span></div><div class=\"line\">    );</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div><div class=\"line\">class LotsOfGreetings extends Component &#123;</div><div class=\"line\">  render() &#123;</div><div class=\"line\">    return (</div><div class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">View</span> <span class=\"attr\">style</span>=<span class=\"string\">&#123;&#123;alignItems:</span> '<span class=\"attr\">center</span>'&#125;&#125;&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">Greeting</span> <span class=\"attr\">name</span>=<span class=\"string\">'Rexxar'</span> /&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">Greeting</span> <span class=\"attr\">name</span>=<span class=\"string\">'Jaina'</span> /&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">Greeting</span> <span class=\"attr\">name</span>=<span class=\"string\">'Valeera'</span> /&gt;</span></div><div class=\"line\">      <span class=\"tag\">&lt;/<span class=\"name\">View</span>&gt;</span></div><div class=\"line\">    );</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">AppRegistry.registerComponent('AwesomeProject', () =&gt; LotsOfGreetings);</div></pre></td></tr></table></figure>\n<p>要点：<br>1、自定义组件很简单，通过基础的Text,View,Image 等组件，然后定义其中的props属性，如上述代码。之后调用代码时，属性就变成了标签属性。</p>\n","excerpt":"<h3 id=\"第一个hello-world-代码\"><a href=\"#第一个hello-world-代码\" class=\"headerlink\" title=\"第一个hello world 代码\"></a>第一个hello world 代码</h3>","more":"<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">//导入组件</span></div><div class=\"line\"><span class=\"keyword\">import</span> React, &#123;</div><div class=\"line\">  Component</div><div class=\"line\">&#125; <span class=\"keyword\">from</span> <span class=\"string\">'react'</span>;</div><div class=\"line\"><span class=\"keyword\">import</span> &#123;</div><div class=\"line\">  AppRegistry,</div><div class=\"line\">  StyleSheet,</div><div class=\"line\">  Text,</div><div class=\"line\">  View</div><div class=\"line\">&#125; <span class=\"keyword\">from</span> <span class=\"string\">'react-native'</span>;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">//定义根容器</span></div><div class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Hellow</span> <span class=\"keyword\">extends</span> <span class=\"title\">Component</span> </span>&#123;</div><div class=\"line\">  render() &#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> (</div><div class=\"line\">      <span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">Text</span>&gt;</span>Hello ,world!!<span class=\"tag\">&lt;/<span class=\"name\">Text</span>&gt;</span></span></div><div class=\"line\">    );</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">//注册</span></div><div class=\"line\">AppRegistry.registerComponent(<span class=\"string\">'AwesomeProject'</span>, () =&gt; Hellow);</div></pre></td></tr></table></figure>\n<p>要点：<br>1、improt 用来导入所需要的组件（详细可以参考ES6）<br>2、定义根容器</p>\n<pre><code>+ 需要继承 Component对象。\n+ 要在render（）方法内返回JSX语句。如（ &lt;Text &gt;Hello ,world!!&lt;/Text&gt;）\n</code></pre><p>3、AppRegistry模块则是用来告知React Native哪一个组件被注册为整个应用的根容器。只调用一次。</p>\n<h3 id=\"加入props-属性\"><a href=\"#加入props-属性\" class=\"headerlink\" title=\"加入props(属性)\"></a>加入props(属性)</h3><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\">import React, &#123;</div><div class=\"line\">  Component</div><div class=\"line\">&#125; from 'react';</div><div class=\"line\"></div><div class=\"line\">import &#123;</div><div class=\"line\">  AppRegistry,</div><div class=\"line\">  Image</div><div class=\"line\">&#125; from 'react-native';</div><div class=\"line\"></div><div class=\"line\">export default class Bananas extends Component &#123;</div><div class=\"line\">  render() &#123;</div><div class=\"line\">    let pic = &#123;</div><div class=\"line\">      uri: 'https://upload.wikimedia.org/wikipedia/commons/d/de/Bananavarieties.jpg'</div><div class=\"line\">    &#125;;</div><div class=\"line\">    return (</div><div class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">Image</span></div><div class=\"line\">          <span class=\"attr\">style</span>=<span class=\"string\">&#123;&#123;width</span> <span class=\"attr\">:</span> <span class=\"attr\">193</span>,<span class=\"attr\">height</span> <span class=\"attr\">:</span> <span class=\"attr\">110</span>&#125;&#125;</div><div class=\"line\">          <span class=\"attr\">source</span>=<span class=\"string\">&#123;pic&#125;</span> /&gt;</span></div><div class=\"line\">    );</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">AppRegistry.registerComponent('AwesomeProject', () =&gt; Bananas);</div></pre></td></tr></table></figure>\n<p>要点：<br>1、如何指定props?</p>\n<pre><code>+ 在JSX中用{}的形式包住js变量。并且变量要使用对象类型\n</code></pre><p>2、加入图片使用Image标签，图片的source属性对象为{uri:’’};</p>\n<h3 id=\"自定义组件\"><a href=\"#自定义组件\" class=\"headerlink\" title=\"自定义组件\"></a>自定义组件</h3><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div></pre></td><td class=\"code\"><pre><div class=\"line\">  </div><div class=\"line\">import React, &#123;</div><div class=\"line\">  Component</div><div class=\"line\">&#125; from 'react';</div><div class=\"line\">import &#123;</div><div class=\"line\">  AppRegistry,</div><div class=\"line\">  View,</div><div class=\"line\">  Image,</div><div class=\"line\">  Text,</div><div class=\"line\">&#125; from 'react-native';</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">class Greeting extends Component &#123;</div><div class=\"line\">  render() &#123;</div><div class=\"line\">    return (</div><div class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">Text</span>&gt;</span>Hello &#123;this.props.name&#125;!!<span class=\"tag\">&lt;/<span class=\"name\">Text</span>&gt;</span></div><div class=\"line\">    );</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div><div class=\"line\">class LotsOfGreetings extends Component &#123;</div><div class=\"line\">  render() &#123;</div><div class=\"line\">    return (</div><div class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">View</span> <span class=\"attr\">style</span>=<span class=\"string\">&#123;&#123;alignItems:</span> '<span class=\"attr\">center</span>'&#125;&#125;&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">Greeting</span> <span class=\"attr\">name</span>=<span class=\"string\">'Rexxar'</span> /&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">Greeting</span> <span class=\"attr\">name</span>=<span class=\"string\">'Jaina'</span> /&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">Greeting</span> <span class=\"attr\">name</span>=<span class=\"string\">'Valeera'</span> /&gt;</span></div><div class=\"line\">      <span class=\"tag\">&lt;/<span class=\"name\">View</span>&gt;</span></div><div class=\"line\">    );</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">AppRegistry.registerComponent('AwesomeProject', () =&gt; LotsOfGreetings);</div></pre></td></tr></table></figure>\n<p>要点：<br>1、自定义组件很简单，通过基础的Text,View,Image 等组件，然后定义其中的props属性，如上述代码。之后调用代码时，属性就变成了标签属性。</p>"},{"title":"3、调试","date":"2017-03-29T02:41:50.000Z","_content":"\n### Developer Menu\n>**可以在模拟器和真机中直接使用。**\n 提示：生产环境release (production) 下Developer Menu是不可用的。\n\n* 如何开启？\n    - Android可以通过 Command⌘ + M快捷键\n    - IOS Command⌘ + D\n\n* Reload功能\n    - 修改了js代码后可以直接点Reload来重新加载数据，不需要重新编译\n\n* Hot Reloading\n    - 实现实时编译，在布局的时候特别好用\n\n* Errors and Warnings\n    - 在development模式下，js部分的Errors 和 Warnings会直接打印在手机或模拟器屏幕上，以红屏和黄屏展示。\n\n* Errors\n    - 可以通过console.error()来手动触发Errors\n\n* Warnings\n    - 可以通过console.warn()来手动触发Warnings。","source":"_posts/3、调试.md","raw":"---\ntitle: 3、调试\ndate: 2017-03-29 10:41:50\ntags: [React-native]\n---\n\n### Developer Menu\n>**可以在模拟器和真机中直接使用。**\n 提示：生产环境release (production) 下Developer Menu是不可用的。\n\n* 如何开启？\n    - Android可以通过 Command⌘ + M快捷键\n    - IOS Command⌘ + D\n\n* Reload功能\n    - 修改了js代码后可以直接点Reload来重新加载数据，不需要重新编译\n\n* Hot Reloading\n    - 实现实时编译，在布局的时候特别好用\n\n* Errors and Warnings\n    - 在development模式下，js部分的Errors 和 Warnings会直接打印在手机或模拟器屏幕上，以红屏和黄屏展示。\n\n* Errors\n    - 可以通过console.error()来手动触发Errors\n\n* Warnings\n    - 可以通过console.warn()来手动触发Warnings。","slug":"3、调试","published":1,"updated":"2017-03-29T15:51:22.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj0v5msv80004x5yprl6f46s3","content":"<h3 id=\"Developer-Menu\"><a href=\"#Developer-Menu\" class=\"headerlink\" title=\"Developer Menu\"></a>Developer Menu</h3><blockquote>\n<p><strong>可以在模拟器和真机中直接使用。</strong><br> 提示：生产环境release (production) 下Developer Menu是不可用的。</p>\n</blockquote>\n<ul>\n<li><p>如何开启？</p>\n<ul>\n<li>Android可以通过 Command⌘ + M快捷键</li>\n<li>IOS Command⌘ + D</li>\n</ul>\n</li>\n<li><p>Reload功能</p>\n<ul>\n<li>修改了js代码后可以直接点Reload来重新加载数据，不需要重新编译</li>\n</ul>\n</li>\n<li><p>Hot Reloading</p>\n<ul>\n<li>实现实时编译，在布局的时候特别好用</li>\n</ul>\n</li>\n<li><p>Errors and Warnings</p>\n<ul>\n<li>在development模式下，js部分的Errors 和 Warnings会直接打印在手机或模拟器屏幕上，以红屏和黄屏展示。</li>\n</ul>\n</li>\n<li><p>Errors</p>\n<ul>\n<li>可以通过console.error()来手动触发Errors</li>\n</ul>\n</li>\n<li><p>Warnings</p>\n<ul>\n<li>可以通过console.warn()来手动触发Warnings。</li>\n</ul>\n</li>\n</ul>\n","excerpt":"","more":"<h3 id=\"Developer-Menu\"><a href=\"#Developer-Menu\" class=\"headerlink\" title=\"Developer Menu\"></a>Developer Menu</h3><blockquote>\n<p><strong>可以在模拟器和真机中直接使用。</strong><br> 提示：生产环境release (production) 下Developer Menu是不可用的。</p>\n</blockquote>\n<ul>\n<li><p>如何开启？</p>\n<ul>\n<li>Android可以通过 Command⌘ + M快捷键</li>\n<li>IOS Command⌘ + D</li>\n</ul>\n</li>\n<li><p>Reload功能</p>\n<ul>\n<li>修改了js代码后可以直接点Reload来重新加载数据，不需要重新编译</li>\n</ul>\n</li>\n<li><p>Hot Reloading</p>\n<ul>\n<li>实现实时编译，在布局的时候特别好用</li>\n</ul>\n</li>\n<li><p>Errors and Warnings</p>\n<ul>\n<li>在development模式下，js部分的Errors 和 Warnings会直接打印在手机或模拟器屏幕上，以红屏和黄屏展示。</li>\n</ul>\n</li>\n<li><p>Errors</p>\n<ul>\n<li>可以通过console.error()来手动触发Errors</li>\n</ul>\n</li>\n<li><p>Warnings</p>\n<ul>\n<li>可以通过console.warn()来手动触发Warnings。</li>\n</ul>\n</li>\n</ul>\n"},{"title":"6、样式","date":"2017-03-29T02:47:18.000Z","_content":"\nstyle属性可以是一个普通的JavaScript对象。这是最简单的用法，因而在示例代码中很常见。你还可以传入一个数组——在数组中位置居后的样式对象比居前的优先级更高，这样你可以间接实现样式的继承。\n\n<!--more-->\n\n```html \n\n    import React, {\n      Component\n    } from 'react';\n\n    import {\n      AppRegistry,\n      StyleSheet,\n      View,\n      Image,\n      Text,\n    } from 'react-native';\n\n    const styles = StyleSheet.create({\n      bigblue: {\n        color: 'blue',\n        fontWeight: 'bold',\n        fontSize: 30,\n      },\n\n      red: {\n        color: 'red',\n      },\n    });\n\n\n    class LotsOfStyles extends Component {\n      render() {\n        return (\n          <View>\n            <Text style={styles.red}>just red</Text>\n            <Text style={styles.bigblue}>just bigblue</Text>\n            <Text style={[styles.bigblue, styles.red]}>bigblue, then red</Text>\n            <Text style={[styles.red, styles.bigblue]}>red, then bigblue</Text>\n          </View>\n        );\n      }\n    }\n\n    AppRegistry.registerComponent('AwesomeProject', () => LotsOfStyles);\n\n```\n\n要点：\n1、使用StyleSheet.create来集中定义组件的样式。\n2、与css成叠类似，也可以覆盖","source":"_posts/6、样式.md","raw":"---\ntitle: 6、样式\ndate: 2017-03-29 10:47:18\ntags: [React-native]\n---\n\nstyle属性可以是一个普通的JavaScript对象。这是最简单的用法，因而在示例代码中很常见。你还可以传入一个数组——在数组中位置居后的样式对象比居前的优先级更高，这样你可以间接实现样式的继承。\n\n<!--more-->\n\n```html \n\n    import React, {\n      Component\n    } from 'react';\n\n    import {\n      AppRegistry,\n      StyleSheet,\n      View,\n      Image,\n      Text,\n    } from 'react-native';\n\n    const styles = StyleSheet.create({\n      bigblue: {\n        color: 'blue',\n        fontWeight: 'bold',\n        fontSize: 30,\n      },\n\n      red: {\n        color: 'red',\n      },\n    });\n\n\n    class LotsOfStyles extends Component {\n      render() {\n        return (\n          <View>\n            <Text style={styles.red}>just red</Text>\n            <Text style={styles.bigblue}>just bigblue</Text>\n            <Text style={[styles.bigblue, styles.red]}>bigblue, then red</Text>\n            <Text style={[styles.red, styles.bigblue]}>red, then bigblue</Text>\n          </View>\n        );\n      }\n    }\n\n    AppRegistry.registerComponent('AwesomeProject', () => LotsOfStyles);\n\n```\n\n要点：\n1、使用StyleSheet.create来集中定义组件的样式。\n2、与css成叠类似，也可以覆盖","slug":"6、样式","published":1,"updated":"2017-03-29T15:51:22.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj0v5msva0005x5yppr6zxwa0","content":"<p>style属性可以是一个普通的JavaScript对象。这是最简单的用法，因而在示例代码中很常见。你还可以传入一个数组——在数组中位置居后的样式对象比居前的优先级更高，这样你可以间接实现样式的继承。</p>\n<a id=\"more\"></a>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\">import React, &#123;</div><div class=\"line\">  Component</div><div class=\"line\">&#125; from 'react';</div><div class=\"line\"></div><div class=\"line\">import &#123;</div><div class=\"line\">  AppRegistry,</div><div class=\"line\">  StyleSheet,</div><div class=\"line\">  View,</div><div class=\"line\">  Image,</div><div class=\"line\">  Text,</div><div class=\"line\">&#125; from 'react-native';</div><div class=\"line\"></div><div class=\"line\">const styles = StyleSheet.create(&#123;</div><div class=\"line\">  bigblue: &#123;</div><div class=\"line\">    color: 'blue',</div><div class=\"line\">    fontWeight: 'bold',</div><div class=\"line\">    fontSize: 30,</div><div class=\"line\">  &#125;,</div><div class=\"line\"></div><div class=\"line\">  red: &#123;</div><div class=\"line\">    color: 'red',</div><div class=\"line\">  &#125;,</div><div class=\"line\">&#125;);</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">class LotsOfStyles extends Component &#123;</div><div class=\"line\">  render() &#123;</div><div class=\"line\">    return (</div><div class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">View</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">Text</span> <span class=\"attr\">style</span>=<span class=\"string\">&#123;styles.red&#125;</span>&gt;</span>just red<span class=\"tag\">&lt;/<span class=\"name\">Text</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">Text</span> <span class=\"attr\">style</span>=<span class=\"string\">&#123;styles.bigblue&#125;</span>&gt;</span>just bigblue<span class=\"tag\">&lt;/<span class=\"name\">Text</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">Text</span> <span class=\"attr\">style</span>=<span class=\"string\">&#123;[styles.bigblue,</span> <span class=\"attr\">styles.red</span>]&#125;&gt;</span>bigblue, then red<span class=\"tag\">&lt;/<span class=\"name\">Text</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">Text</span> <span class=\"attr\">style</span>=<span class=\"string\">&#123;[styles.red,</span> <span class=\"attr\">styles.bigblue</span>]&#125;&gt;</span>red, then bigblue<span class=\"tag\">&lt;/<span class=\"name\">Text</span>&gt;</span></div><div class=\"line\">      <span class=\"tag\">&lt;/<span class=\"name\">View</span>&gt;</span></div><div class=\"line\">    );</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">AppRegistry.registerComponent('AwesomeProject', () =&gt; LotsOfStyles);</div></pre></td></tr></table></figure>\n<p>要点：<br>1、使用StyleSheet.create来集中定义组件的样式。<br>2、与css成叠类似，也可以覆盖</p>\n","excerpt":"<p>style属性可以是一个普通的JavaScript对象。这是最简单的用法，因而在示例代码中很常见。你还可以传入一个数组——在数组中位置居后的样式对象比居前的优先级更高，这样你可以间接实现样式的继承。</p>","more":"<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\">import React, &#123;</div><div class=\"line\">  Component</div><div class=\"line\">&#125; from 'react';</div><div class=\"line\"></div><div class=\"line\">import &#123;</div><div class=\"line\">  AppRegistry,</div><div class=\"line\">  StyleSheet,</div><div class=\"line\">  View,</div><div class=\"line\">  Image,</div><div class=\"line\">  Text,</div><div class=\"line\">&#125; from 'react-native';</div><div class=\"line\"></div><div class=\"line\">const styles = StyleSheet.create(&#123;</div><div class=\"line\">  bigblue: &#123;</div><div class=\"line\">    color: 'blue',</div><div class=\"line\">    fontWeight: 'bold',</div><div class=\"line\">    fontSize: 30,</div><div class=\"line\">  &#125;,</div><div class=\"line\"></div><div class=\"line\">  red: &#123;</div><div class=\"line\">    color: 'red',</div><div class=\"line\">  &#125;,</div><div class=\"line\">&#125;);</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">class LotsOfStyles extends Component &#123;</div><div class=\"line\">  render() &#123;</div><div class=\"line\">    return (</div><div class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">View</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">Text</span> <span class=\"attr\">style</span>=<span class=\"string\">&#123;styles.red&#125;</span>&gt;</span>just red<span class=\"tag\">&lt;/<span class=\"name\">Text</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">Text</span> <span class=\"attr\">style</span>=<span class=\"string\">&#123;styles.bigblue&#125;</span>&gt;</span>just bigblue<span class=\"tag\">&lt;/<span class=\"name\">Text</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">Text</span> <span class=\"attr\">style</span>=<span class=\"string\">&#123;[styles.bigblue,</span> <span class=\"attr\">styles.red</span>]&#125;&gt;</span>bigblue, then red<span class=\"tag\">&lt;/<span class=\"name\">Text</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">Text</span> <span class=\"attr\">style</span>=<span class=\"string\">&#123;[styles.red,</span> <span class=\"attr\">styles.bigblue</span>]&#125;&gt;</span>red, then bigblue<span class=\"tag\">&lt;/<span class=\"name\">Text</span>&gt;</span></div><div class=\"line\">      <span class=\"tag\">&lt;/<span class=\"name\">View</span>&gt;</span></div><div class=\"line\">    );</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">AppRegistry.registerComponent('AwesomeProject', () =&gt; LotsOfStyles);</div></pre></td></tr></table></figure>\n<p>要点：<br>1、使用StyleSheet.create来集中定义组件的样式。<br>2、与css成叠类似，也可以覆盖</p>"},{"title":"7、flexBox布局","date":"2017-03-29T02:48:15.000Z","_content":"\n>参考阮一峰大神的博客:http://www.ruanyifeng.com/blog/2015/07/flex-grammar.html\n\n### 基本概念\n\n>采用Flex布局的元素，称为Flex容器。它所有的子类元素自动成为容器成员(flex item)。\n\n1、容器默认存在两个轴：水平的主轴（main axis）,垂直的交叉轴（cross axis)\n2、主轴的开始位置（与边框的交叉点）叫做main start，结束位置叫做main end；（从左到右）\n3、交叉轴的开始位置叫做cross start，结束位置叫做cross end。（从上到下）\n\n<!--more-->\n\n### 容器的属性\n\n* flex-direction 决定主轴的方向\n    - row （默认值）：主轴为水平方向，起点在左边。\n    - row-reverse  ：主轴为水平方法，起点在右边。\n    - column ：主轴为垂直方向，起点在上边。\n    - column-reverse ：主轴为垂直方向，起点在下边。\n    \n* flex-wrap 决定子元素的排布方式\n    - nowrap 沿轴线排布，不换行\n    - wrap 沿轴线排布，换行\n    - wrap-reverse;换行，最下面是第一行\n    \n* flex-flow 是flex-direction 和 flex-wrap的简写形式，默认为row nowrap\n    - flex-flow: <flex-direction> || <flex-wrap>;\n\n\n* justify-content 在主轴上的对齐方式\n    - flex-start 主轴开始的方向对齐\n    - flex-end 主轴结束的的方法对齐\n    - center 居中\n    - space-between 两端对齐，子元素之间的距离相等\n    - space-around 每个项目两侧的间隔相等。所以，项目之间的间隔比项目与边框的间隔大一倍。\n\n* align-items 在交叉轴的对齐方式\n    - flex-start \n    - flex-end \n    - center \n    - baseline 项目的第一行文字的基线对齐。\n    - stretch (默认值）：如果项目未设置高度或设为auto，将占满整个容器的高度。\n    \n* align-content\n\n---\n\n\n#### 子元素的属性\n\n* order 属性定义项目的排列顺序。数值越小，排列越靠前，默认为0\n    - order : -1;\n\n* flex-grow 属性定义项目的放大比例，默认为0，即如果存在剩余空间，也不放大。\n    - flex-grow: <number>; /* default 0 */\n    - 貌似只有在direction为row时，才有用。是横向放大\n    - 有点像权重\n\n* flex-shrink 属性定义了项目的缩小比例，默认为1，即如果空间不足，该项目将缩小。\n    - 如果所有项目的flex-shrink属性都为1，当空间不足时，都将等比例缩小。\n* flex-basis\n* flex\n\n* align-self align-self属性允许单个项目有与其他项目不一样的对齐方式，可覆盖align-items属性。默认值为auto，表示继承父元素的align-items属性，如果没有父元素，则等同于stretch。","source":"_posts/7、flexBox布局.md","raw":"---\ntitle: 7、flexBox布局\ndate: 2017-03-29 10:48:15\ntags: [React-native]\n---\n\n>参考阮一峰大神的博客:http://www.ruanyifeng.com/blog/2015/07/flex-grammar.html\n\n### 基本概念\n\n>采用Flex布局的元素，称为Flex容器。它所有的子类元素自动成为容器成员(flex item)。\n\n1、容器默认存在两个轴：水平的主轴（main axis）,垂直的交叉轴（cross axis)\n2、主轴的开始位置（与边框的交叉点）叫做main start，结束位置叫做main end；（从左到右）\n3、交叉轴的开始位置叫做cross start，结束位置叫做cross end。（从上到下）\n\n<!--more-->\n\n### 容器的属性\n\n* flex-direction 决定主轴的方向\n    - row （默认值）：主轴为水平方向，起点在左边。\n    - row-reverse  ：主轴为水平方法，起点在右边。\n    - column ：主轴为垂直方向，起点在上边。\n    - column-reverse ：主轴为垂直方向，起点在下边。\n    \n* flex-wrap 决定子元素的排布方式\n    - nowrap 沿轴线排布，不换行\n    - wrap 沿轴线排布，换行\n    - wrap-reverse;换行，最下面是第一行\n    \n* flex-flow 是flex-direction 和 flex-wrap的简写形式，默认为row nowrap\n    - flex-flow: <flex-direction> || <flex-wrap>;\n\n\n* justify-content 在主轴上的对齐方式\n    - flex-start 主轴开始的方向对齐\n    - flex-end 主轴结束的的方法对齐\n    - center 居中\n    - space-between 两端对齐，子元素之间的距离相等\n    - space-around 每个项目两侧的间隔相等。所以，项目之间的间隔比项目与边框的间隔大一倍。\n\n* align-items 在交叉轴的对齐方式\n    - flex-start \n    - flex-end \n    - center \n    - baseline 项目的第一行文字的基线对齐。\n    - stretch (默认值）：如果项目未设置高度或设为auto，将占满整个容器的高度。\n    \n* align-content\n\n---\n\n\n#### 子元素的属性\n\n* order 属性定义项目的排列顺序。数值越小，排列越靠前，默认为0\n    - order : -1;\n\n* flex-grow 属性定义项目的放大比例，默认为0，即如果存在剩余空间，也不放大。\n    - flex-grow: <number>; /* default 0 */\n    - 貌似只有在direction为row时，才有用。是横向放大\n    - 有点像权重\n\n* flex-shrink 属性定义了项目的缩小比例，默认为1，即如果空间不足，该项目将缩小。\n    - 如果所有项目的flex-shrink属性都为1，当空间不足时，都将等比例缩小。\n* flex-basis\n* flex\n\n* align-self align-self属性允许单个项目有与其他项目不一样的对齐方式，可覆盖align-items属性。默认值为auto，表示继承父元素的align-items属性，如果没有父元素，则等同于stretch。","slug":"7、flexBox布局","published":1,"updated":"2017-03-29T15:51:22.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj0v5msvd0008x5ypcu3e048d","content":"<blockquote>\n<p>参考阮一峰大神的博客:<a href=\"http://www.ruanyifeng.com/blog/2015/07/flex-grammar.html\" target=\"_blank\" rel=\"external\">http://www.ruanyifeng.com/blog/2015/07/flex-grammar.html</a></p>\n</blockquote>\n<h3 id=\"基本概念\"><a href=\"#基本概念\" class=\"headerlink\" title=\"基本概念\"></a>基本概念</h3><blockquote>\n<p>采用Flex布局的元素，称为Flex容器。它所有的子类元素自动成为容器成员(flex item)。</p>\n</blockquote>\n<p>1、容器默认存在两个轴：水平的主轴（main axis）,垂直的交叉轴（cross axis)<br>2、主轴的开始位置（与边框的交叉点）叫做main start，结束位置叫做main end；（从左到右）<br>3、交叉轴的开始位置叫做cross start，结束位置叫做cross end。（从上到下）</p>\n<a id=\"more\"></a>\n<h3 id=\"容器的属性\"><a href=\"#容器的属性\" class=\"headerlink\" title=\"容器的属性\"></a>容器的属性</h3><ul>\n<li><p>flex-direction 决定主轴的方向</p>\n<ul>\n<li>row （默认值）：主轴为水平方向，起点在左边。</li>\n<li>row-reverse  ：主轴为水平方法，起点在右边。</li>\n<li>column ：主轴为垂直方向，起点在上边。</li>\n<li>column-reverse ：主轴为垂直方向，起点在下边。</li>\n</ul>\n</li>\n<li><p>flex-wrap 决定子元素的排布方式</p>\n<ul>\n<li>nowrap 沿轴线排布，不换行</li>\n<li>wrap 沿轴线排布，换行</li>\n<li>wrap-reverse;换行，最下面是第一行</li>\n</ul>\n</li>\n<li><p>flex-flow 是flex-direction 和 flex-wrap的简写形式，默认为row nowrap</p>\n<ul>\n<li>flex-flow: <flex-direction> || <flex-wrap>;</flex-wrap></flex-direction></li>\n</ul>\n</li>\n</ul>\n<ul>\n<li><p>justify-content 在主轴上的对齐方式</p>\n<ul>\n<li>flex-start 主轴开始的方向对齐</li>\n<li>flex-end 主轴结束的的方法对齐</li>\n<li>center 居中</li>\n<li>space-between 两端对齐，子元素之间的距离相等</li>\n<li>space-around 每个项目两侧的间隔相等。所以，项目之间的间隔比项目与边框的间隔大一倍。</li>\n</ul>\n</li>\n<li><p>align-items 在交叉轴的对齐方式</p>\n<ul>\n<li>flex-start </li>\n<li>flex-end </li>\n<li>center </li>\n<li>baseline 项目的第一行文字的基线对齐。</li>\n<li>stretch (默认值）：如果项目未设置高度或设为auto，将占满整个容器的高度。</li>\n</ul>\n</li>\n<li><p>align-content</p>\n</li>\n</ul>\n<hr>\n<h4 id=\"子元素的属性\"><a href=\"#子元素的属性\" class=\"headerlink\" title=\"子元素的属性\"></a>子元素的属性</h4><ul>\n<li><p>order 属性定义项目的排列顺序。数值越小，排列越靠前，默认为0</p>\n<ul>\n<li>order : -1;</li>\n</ul>\n</li>\n<li><p>flex-grow 属性定义项目的放大比例，默认为0，即如果存在剩余空间，也不放大。</p>\n<ul>\n<li>flex-grow: <number>; /<em> default 0 </em>/</number></li>\n<li>貌似只有在direction为row时，才有用。是横向放大</li>\n<li>有点像权重</li>\n</ul>\n</li>\n<li><p>flex-shrink 属性定义了项目的缩小比例，默认为1，即如果空间不足，该项目将缩小。</p>\n<ul>\n<li>如果所有项目的flex-shrink属性都为1，当空间不足时，都将等比例缩小。</li>\n</ul>\n</li>\n<li>flex-basis</li>\n<li><p>flex</p>\n</li>\n<li><p>align-self align-self属性允许单个项目有与其他项目不一样的对齐方式，可覆盖align-items属性。默认值为auto，表示继承父元素的align-items属性，如果没有父元素，则等同于stretch。</p>\n</li>\n</ul>\n","excerpt":"<blockquote>\n<p>参考阮一峰大神的博客:<a href=\"http://www.ruanyifeng.com/blog/2015/07/flex-grammar.html\">http://www.ruanyifeng.com/blog/2015/07/flex-grammar.html</a></p>\n</blockquote>\n<h3 id=\"基本概念\"><a href=\"#基本概念\" class=\"headerlink\" title=\"基本概念\"></a>基本概念</h3><blockquote>\n<p>采用Flex布局的元素，称为Flex容器。它所有的子类元素自动成为容器成员(flex item)。</p>\n</blockquote>\n<p>1、容器默认存在两个轴：水平的主轴（main axis）,垂直的交叉轴（cross axis)<br>2、主轴的开始位置（与边框的交叉点）叫做main start，结束位置叫做main end；（从左到右）<br>3、交叉轴的开始位置叫做cross start，结束位置叫做cross end。（从上到下）</p>","more":"<h3 id=\"容器的属性\"><a href=\"#容器的属性\" class=\"headerlink\" title=\"容器的属性\"></a>容器的属性</h3><ul>\n<li><p>flex-direction 决定主轴的方向</p>\n<ul>\n<li>row （默认值）：主轴为水平方向，起点在左边。</li>\n<li>row-reverse  ：主轴为水平方法，起点在右边。</li>\n<li>column ：主轴为垂直方向，起点在上边。</li>\n<li>column-reverse ：主轴为垂直方向，起点在下边。</li>\n</ul>\n</li>\n<li><p>flex-wrap 决定子元素的排布方式</p>\n<ul>\n<li>nowrap 沿轴线排布，不换行</li>\n<li>wrap 沿轴线排布，换行</li>\n<li>wrap-reverse;换行，最下面是第一行</li>\n</ul>\n</li>\n<li><p>flex-flow 是flex-direction 和 flex-wrap的简写形式，默认为row nowrap</p>\n<ul>\n<li>flex-flow: <flex-direction> || <flex-wrap>;</li>\n</ul>\n</li>\n</ul>\n<ul>\n<li><p>justify-content 在主轴上的对齐方式</p>\n<ul>\n<li>flex-start 主轴开始的方向对齐</li>\n<li>flex-end 主轴结束的的方法对齐</li>\n<li>center 居中</li>\n<li>space-between 两端对齐，子元素之间的距离相等</li>\n<li>space-around 每个项目两侧的间隔相等。所以，项目之间的间隔比项目与边框的间隔大一倍。</li>\n</ul>\n</li>\n<li><p>align-items 在交叉轴的对齐方式</p>\n<ul>\n<li>flex-start </li>\n<li>flex-end </li>\n<li>center </li>\n<li>baseline 项目的第一行文字的基线对齐。</li>\n<li>stretch (默认值）：如果项目未设置高度或设为auto，将占满整个容器的高度。</li>\n</ul>\n</li>\n<li><p>align-content</p>\n</li>\n</ul>\n<hr>\n<h4 id=\"子元素的属性\"><a href=\"#子元素的属性\" class=\"headerlink\" title=\"子元素的属性\"></a>子元素的属性</h4><ul>\n<li><p>order 属性定义项目的排列顺序。数值越小，排列越靠前，默认为0</p>\n<ul>\n<li>order : -1;</li>\n</ul>\n</li>\n<li><p>flex-grow 属性定义项目的放大比例，默认为0，即如果存在剩余空间，也不放大。</p>\n<ul>\n<li>flex-grow: <number>; /<em> default 0 </em>/</li>\n<li>貌似只有在direction为row时，才有用。是横向放大</li>\n<li>有点像权重</li>\n</ul>\n</li>\n<li><p>flex-shrink 属性定义了项目的缩小比例，默认为1，即如果空间不足，该项目将缩小。</p>\n<ul>\n<li>如果所有项目的flex-shrink属性都为1，当空间不足时，都将等比例缩小。</li>\n</ul>\n</li>\n<li>flex-basis</li>\n<li><p>flex</p>\n</li>\n<li><p>align-self align-self属性允许单个项目有与其他项目不一样的对齐方式，可覆盖align-items属性。默认值为auto，表示继承父元素的align-items属性，如果没有父元素，则等同于stretch。</p>\n</li>\n</ul>"},{"title":"8、Text 和 TextInput 、组件属性继承写法","date":"2017-03-29T02:50:16.000Z","_content":"\n## Text\n>一个用于显示文本的React组件，并且它也支持嵌套、样式，以及触摸处理\n 1、嵌套的标题可以继承父元素的属性。也可以层叠掉父元素的属性。\n\n\n<!--more-->\n\n伪代码\n\n```html \n    \n    renderText: function() {\n      return (\n        <Text style={styles.baseText}>\n          <Text style={styles.titleText} onPress={this.onPressTitle}>\n            {this.state.titleText + '\\n\\n'}\n          </Text>\n          <Text numberOfLines={5}>\n            {this.state.bodyText}\n          </Text>\n        </Text>\n      );\n    },\n    ...\n    var styles = StyleSheet.create({\n      baseText: {\n        fontFamily: 'Cochin',\n      },\n      titleText: {\n        fontSize: 20,\n        fontWeight: 'bold',\n      },\n    };\n\n```\n\n---\n\n### 属性\n\n>**numberOfLines={3}**\n    用来当文本过长的时候裁剪文本。包括折叠产生的换行在内，总的行数不会超过这个属性的限制。\n    类似于android的Maxline\n\n\n>onLongPress={里面是调用的函数} \n    长按回调\n    1、里面的函数一定要加this\n    2、绑定函数最好使用箭头函数绑定\n\n```html \n\n    //在类里面的定义函数\n    onPressPhone(){\n      console.log(\"长按电话\");\n    }\n\n      <Text style={styles.TextStyle}\n        onLongPress={()=>this.onPressPhone()}>\n       手机号码\n      </Text>\n\n```\n\n>onPress={里面是调用的函数}\n    文本被点击时触发\n    1、里面的函数一定要加this\n\n---\n\n## 样式（style）\n\n> * 继承View的样式\n  * color \n  * fontFamily\n  * fontSize\n  * fontStyle enum('normal', 'italic')\n  * fontWeight enum('normal','bold')\n  * lineHeight number \n  * textAlign enum('auto', 'left', 'right', 'center', 'justify')\n      - 指定文本的对齐方式。其中'justify'值仅iOS支持，在Android上会变为left\n\n\n### 嵌套文本\n>把相同格式的文本嵌套包裹起来：\n\n```html \n\n    <Text style={{fontWeight: 'bold'}}>\n      I am bold\n      <Text style={{color: 'red'}}>\n        and red\n      </Text>\n    </Text>\n\n```\n\n\n## TextInput\n>TextInput是一个允许用户在应用中通过键盘输入文本的基本组件。本组件的属性提供了多种特性的配置，譬如自动完成、自动大小写、占位文字，以及多种不同的键盘类型（如纯数字键盘）等等。\n\n\n### 属性\n\n> * autoCapitalize 控制TextInput是否要自动将特定字符切换为大写\n>     - characters: 所有的字符。\n>     - words: 每个单词的第一个字符。\n>     - sentences: 每句话的第一个字符（默认）。\n>     - none: 不自动切换任何字符为大写。\n>  \n> * defaultValue 提供一个文本框中的初始值。当用户开始输入的时候，值就可以改变。\n> * placeholder 如果没有任何文字输入，会显示此字符串。\n> * multiline 为true时可以输入多行文字。\n> * maxLength 限制文本框中最多的字符数。使用这个属性而不用JS逻辑去实现，可以避免闪烁的现象。\n> * keyboardType 决定弹出的何种软键盘的\n>     - default\n>     - numeric\n>     - email-address\n> * onChange 当文本框内容变化时调用此回调函数。\n> * onChangeText 当文本框内容变化时调用此回调函数。改变后的文字内容会作为参数传递。\n> * secureTextEntry 加密\n> * underlineColorAndroid 去掉下划线 \n\n\n\n\n## 组件继承写法\n\n> {...this.props} 就可以继承了\n\n```html \n\n    class MyTextInput extends Component {\n      render(){\n        return (\n          <View>\n            <TextInput style={styles.InputStyle}\n                {...this.props}     //用于继承\n                autoCapitalize='characters'\n                underlineColorAndroid='transparent'\n                onChangeText={\n                  (input_Phone) => this.setState({input_Phone})\n              }\n            />\n\n            <Text style={styles.TextPrefixPhone}>+86</Text>\n\n             <View style={styles.verticalLine}/>\n          </View>\n\n        );\n      }\n\n    }\n\n\n     <MyTextInput   //继承上面的属性\n          placeholder=\"请输入账号\"\n         />\n\n\n```","source":"_posts/8、Text-和-TextInput-、组件属性继承写法.md","raw":"---\ntitle: 8、Text 和 TextInput 、组件属性继承写法\ndate: 2017-03-29 10:50:16\ntags: [React-native]\n---\n\n## Text\n>一个用于显示文本的React组件，并且它也支持嵌套、样式，以及触摸处理\n 1、嵌套的标题可以继承父元素的属性。也可以层叠掉父元素的属性。\n\n\n<!--more-->\n\n伪代码\n\n```html \n    \n    renderText: function() {\n      return (\n        <Text style={styles.baseText}>\n          <Text style={styles.titleText} onPress={this.onPressTitle}>\n            {this.state.titleText + '\\n\\n'}\n          </Text>\n          <Text numberOfLines={5}>\n            {this.state.bodyText}\n          </Text>\n        </Text>\n      );\n    },\n    ...\n    var styles = StyleSheet.create({\n      baseText: {\n        fontFamily: 'Cochin',\n      },\n      titleText: {\n        fontSize: 20,\n        fontWeight: 'bold',\n      },\n    };\n\n```\n\n---\n\n### 属性\n\n>**numberOfLines={3}**\n    用来当文本过长的时候裁剪文本。包括折叠产生的换行在内，总的行数不会超过这个属性的限制。\n    类似于android的Maxline\n\n\n>onLongPress={里面是调用的函数} \n    长按回调\n    1、里面的函数一定要加this\n    2、绑定函数最好使用箭头函数绑定\n\n```html \n\n    //在类里面的定义函数\n    onPressPhone(){\n      console.log(\"长按电话\");\n    }\n\n      <Text style={styles.TextStyle}\n        onLongPress={()=>this.onPressPhone()}>\n       手机号码\n      </Text>\n\n```\n\n>onPress={里面是调用的函数}\n    文本被点击时触发\n    1、里面的函数一定要加this\n\n---\n\n## 样式（style）\n\n> * 继承View的样式\n  * color \n  * fontFamily\n  * fontSize\n  * fontStyle enum('normal', 'italic')\n  * fontWeight enum('normal','bold')\n  * lineHeight number \n  * textAlign enum('auto', 'left', 'right', 'center', 'justify')\n      - 指定文本的对齐方式。其中'justify'值仅iOS支持，在Android上会变为left\n\n\n### 嵌套文本\n>把相同格式的文本嵌套包裹起来：\n\n```html \n\n    <Text style={{fontWeight: 'bold'}}>\n      I am bold\n      <Text style={{color: 'red'}}>\n        and red\n      </Text>\n    </Text>\n\n```\n\n\n## TextInput\n>TextInput是一个允许用户在应用中通过键盘输入文本的基本组件。本组件的属性提供了多种特性的配置，譬如自动完成、自动大小写、占位文字，以及多种不同的键盘类型（如纯数字键盘）等等。\n\n\n### 属性\n\n> * autoCapitalize 控制TextInput是否要自动将特定字符切换为大写\n>     - characters: 所有的字符。\n>     - words: 每个单词的第一个字符。\n>     - sentences: 每句话的第一个字符（默认）。\n>     - none: 不自动切换任何字符为大写。\n>  \n> * defaultValue 提供一个文本框中的初始值。当用户开始输入的时候，值就可以改变。\n> * placeholder 如果没有任何文字输入，会显示此字符串。\n> * multiline 为true时可以输入多行文字。\n> * maxLength 限制文本框中最多的字符数。使用这个属性而不用JS逻辑去实现，可以避免闪烁的现象。\n> * keyboardType 决定弹出的何种软键盘的\n>     - default\n>     - numeric\n>     - email-address\n> * onChange 当文本框内容变化时调用此回调函数。\n> * onChangeText 当文本框内容变化时调用此回调函数。改变后的文字内容会作为参数传递。\n> * secureTextEntry 加密\n> * underlineColorAndroid 去掉下划线 \n\n\n\n\n## 组件继承写法\n\n> {...this.props} 就可以继承了\n\n```html \n\n    class MyTextInput extends Component {\n      render(){\n        return (\n          <View>\n            <TextInput style={styles.InputStyle}\n                {...this.props}     //用于继承\n                autoCapitalize='characters'\n                underlineColorAndroid='transparent'\n                onChangeText={\n                  (input_Phone) => this.setState({input_Phone})\n              }\n            />\n\n            <Text style={styles.TextPrefixPhone}>+86</Text>\n\n             <View style={styles.verticalLine}/>\n          </View>\n\n        );\n      }\n\n    }\n\n\n     <MyTextInput   //继承上面的属性\n          placeholder=\"请输入账号\"\n         />\n\n\n```","slug":"8、Text-和-TextInput-、组件属性继承写法","published":1,"updated":"2017-03-29T15:51:22.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj0v5msvf000ax5ypn5n66z6g","content":"<h2 id=\"Text\"><a href=\"#Text\" class=\"headerlink\" title=\"Text\"></a>Text</h2><blockquote>\n<p>一个用于显示文本的React组件，并且它也支持嵌套、样式，以及触摸处理<br> 1、嵌套的标题可以继承父元素的属性。也可以层叠掉父元素的属性。</p>\n</blockquote>\n<a id=\"more\"></a>\n<p>伪代码</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\">renderText: function() &#123;</div><div class=\"line\">  return (</div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">Text</span> <span class=\"attr\">style</span>=<span class=\"string\">&#123;styles.baseText&#125;</span>&gt;</span></div><div class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">Text</span> <span class=\"attr\">style</span>=<span class=\"string\">&#123;styles.titleText&#125;</span> <span class=\"attr\">onPress</span>=<span class=\"string\">&#123;this.onPressTitle&#125;</span>&gt;</span></div><div class=\"line\">        &#123;this.state.titleText + '\\n\\n'&#125;</div><div class=\"line\">      <span class=\"tag\">&lt;/<span class=\"name\">Text</span>&gt;</span></div><div class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">Text</span> <span class=\"attr\">numberOfLines</span>=<span class=\"string\">&#123;5&#125;</span>&gt;</span></div><div class=\"line\">        &#123;this.state.bodyText&#125;</div><div class=\"line\">      <span class=\"tag\">&lt;/<span class=\"name\">Text</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">Text</span>&gt;</span></div><div class=\"line\">  );</div><div class=\"line\">&#125;,</div><div class=\"line\">...</div><div class=\"line\">var styles = StyleSheet.create(&#123;</div><div class=\"line\">  baseText: &#123;</div><div class=\"line\">    fontFamily: 'Cochin',</div><div class=\"line\">  &#125;,</div><div class=\"line\">  titleText: &#123;</div><div class=\"line\">    fontSize: 20,</div><div class=\"line\">    fontWeight: 'bold',</div><div class=\"line\">  &#125;,</div><div class=\"line\">&#125;;</div></pre></td></tr></table></figure>\n<hr>\n<h3 id=\"属性\"><a href=\"#属性\" class=\"headerlink\" title=\"属性\"></a>属性</h3><blockquote>\n<p><strong>numberOfLines={3}</strong><br>    用来当文本过长的时候裁剪文本。包括折叠产生的换行在内，总的行数不会超过这个属性的限制。<br>    类似于android的Maxline</p>\n<p>onLongPress={里面是调用的函数}<br>    长按回调<br>    1、里面的函数一定要加this<br>    2、绑定函数最好使用箭头函数绑定</p>\n</blockquote>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\">//在类里面的定义函数</div><div class=\"line\">onPressPhone()&#123;</div><div class=\"line\">  console.log(\"长按电话\");</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">Text</span> <span class=\"attr\">style</span>=<span class=\"string\">&#123;styles.TextStyle&#125;</span></span></div><div class=\"line\">    <span class=\"attr\">onLongPress</span>=<span class=\"string\">&#123;()</span>=&gt;this.onPressPhone()&#125;&gt;</div><div class=\"line\">   手机号码</div><div class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">Text</span>&gt;</span></div></pre></td></tr></table></figure>\n<blockquote>\n<p>onPress={里面是调用的函数}<br>    文本被点击时触发<br>    1、里面的函数一定要加this</p>\n</blockquote>\n<hr>\n<h2 id=\"样式（style）\"><a href=\"#样式（style）\" class=\"headerlink\" title=\"样式（style）\"></a>样式（style）</h2><blockquote>\n<ul>\n<li>继承View的样式<ul>\n<li>color </li>\n<li>fontFamily</li>\n<li>fontSize</li>\n<li>fontStyle enum(‘normal’, ‘italic’)</li>\n<li>fontWeight enum(‘normal’,’bold’)</li>\n<li>lineHeight number </li>\n<li>textAlign enum(‘auto’, ‘left’, ‘right’, ‘center’, ‘justify’)<ul>\n<li>指定文本的对齐方式。其中’justify’值仅iOS支持，在Android上会变为left</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n</blockquote>\n<h3 id=\"嵌套文本\"><a href=\"#嵌套文本\" class=\"headerlink\" title=\"嵌套文本\"></a>嵌套文本</h3><blockquote>\n<p>把相同格式的文本嵌套包裹起来：</p>\n</blockquote>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">Text</span> <span class=\"attr\">style</span>=<span class=\"string\">&#123;&#123;fontWeight:</span> '<span class=\"attr\">bold</span>'&#125;&#125;&gt;</span></div><div class=\"line\">  I am bold</div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">Text</span> <span class=\"attr\">style</span>=<span class=\"string\">&#123;&#123;color:</span> '<span class=\"attr\">red</span>'&#125;&#125;&gt;</span></div><div class=\"line\">    and red</div><div class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">Text</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">Text</span>&gt;</span></div></pre></td></tr></table></figure>\n<h2 id=\"TextInput\"><a href=\"#TextInput\" class=\"headerlink\" title=\"TextInput\"></a>TextInput</h2><blockquote>\n<p>TextInput是一个允许用户在应用中通过键盘输入文本的基本组件。本组件的属性提供了多种特性的配置，譬如自动完成、自动大小写、占位文字，以及多种不同的键盘类型（如纯数字键盘）等等。</p>\n</blockquote>\n<h3 id=\"属性-1\"><a href=\"#属性-1\" class=\"headerlink\" title=\"属性\"></a>属性</h3><blockquote>\n<ul>\n<li><p>autoCapitalize 控制TextInput是否要自动将特定字符切换为大写</p>\n<ul>\n<li>characters: 所有的字符。</li>\n<li>words: 每个单词的第一个字符。</li>\n<li>sentences: 每句话的第一个字符（默认）。</li>\n<li>none: 不自动切换任何字符为大写。</li>\n</ul>\n</li>\n<li><p>defaultValue 提供一个文本框中的初始值。当用户开始输入的时候，值就可以改变。</p>\n</li>\n<li>placeholder 如果没有任何文字输入，会显示此字符串。</li>\n<li>multiline 为true时可以输入多行文字。</li>\n<li>maxLength 限制文本框中最多的字符数。使用这个属性而不用JS逻辑去实现，可以避免闪烁的现象。</li>\n<li>keyboardType 决定弹出的何种软键盘的<ul>\n<li>default</li>\n<li>numeric</li>\n<li>email-address</li>\n</ul>\n</li>\n<li>onChange 当文本框内容变化时调用此回调函数。</li>\n<li>onChangeText 当文本框内容变化时调用此回调函数。改变后的文字内容会作为参数传递。</li>\n<li>secureTextEntry 加密</li>\n<li>underlineColorAndroid 去掉下划线 </li>\n</ul>\n</blockquote>\n<h2 id=\"组件继承写法\"><a href=\"#组件继承写法\" class=\"headerlink\" title=\"组件继承写法\"></a>组件继承写法</h2><blockquote>\n<p>{…this.props} 就可以继承了</p>\n</blockquote>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\">class MyTextInput extends Component &#123;</div><div class=\"line\">  render()&#123;</div><div class=\"line\">    return (</div><div class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">View</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">TextInput</span> <span class=\"attr\">style</span>=<span class=\"string\">&#123;styles.InputStyle&#125;</span></span></div><div class=\"line\">            &#123;<span class=\"attr\">...this.props</span>&#125;     //用于继承</div><div class=\"line\">            <span class=\"attr\">autoCapitalize</span>=<span class=\"string\">'characters'</span></div><div class=\"line\">            <span class=\"attr\">underlineColorAndroid</span>=<span class=\"string\">'transparent'</span></div><div class=\"line\">            <span class=\"attr\">onChangeText</span>=<span class=\"string\">&#123;</span></div><div class=\"line\">              (<span class=\"attr\">input_Phone</span>) =&gt; this.setState(&#123;input_Phone&#125;)</div><div class=\"line\">          &#125;</div><div class=\"line\">        /&gt;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">Text</span> <span class=\"attr\">style</span>=<span class=\"string\">&#123;styles.TextPrefixPhone&#125;</span>&gt;</span>+86<span class=\"tag\">&lt;/<span class=\"name\">Text</span>&gt;</span></div><div class=\"line\"></div><div class=\"line\">         <span class=\"tag\">&lt;<span class=\"name\">View</span> <span class=\"attr\">style</span>=<span class=\"string\">&#123;styles.verticalLine&#125;/</span>&gt;</span></div><div class=\"line\">      <span class=\"tag\">&lt;/<span class=\"name\">View</span>&gt;</span></div><div class=\"line\"></div><div class=\"line\">    );</div><div class=\"line\">  &#125;</div><div class=\"line\"></div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"> <span class=\"tag\">&lt;<span class=\"name\">MyTextInput</span>   //继承上面的属性</span></div><div class=\"line\">      <span class=\"attr\">placeholder</span>=<span class=\"string\">\"请输入账号\"</span></div><div class=\"line\">     /&gt;</div></pre></td></tr></table></figure>","excerpt":"<h2 id=\"Text\"><a href=\"#Text\" class=\"headerlink\" title=\"Text\"></a>Text</h2><blockquote>\n<p>一个用于显示文本的React组件，并且它也支持嵌套、样式，以及触摸处理<br> 1、嵌套的标题可以继承父元素的属性。也可以层叠掉父元素的属性。</p>\n</blockquote>","more":"<p>伪代码</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\">renderText: function() &#123;</div><div class=\"line\">  return (</div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">Text</span> <span class=\"attr\">style</span>=<span class=\"string\">&#123;styles.baseText&#125;</span>&gt;</span></div><div class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">Text</span> <span class=\"attr\">style</span>=<span class=\"string\">&#123;styles.titleText&#125;</span> <span class=\"attr\">onPress</span>=<span class=\"string\">&#123;this.onPressTitle&#125;</span>&gt;</span></div><div class=\"line\">        &#123;this.state.titleText + '\\n\\n'&#125;</div><div class=\"line\">      <span class=\"tag\">&lt;/<span class=\"name\">Text</span>&gt;</span></div><div class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">Text</span> <span class=\"attr\">numberOfLines</span>=<span class=\"string\">&#123;5&#125;</span>&gt;</span></div><div class=\"line\">        &#123;this.state.bodyText&#125;</div><div class=\"line\">      <span class=\"tag\">&lt;/<span class=\"name\">Text</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">Text</span>&gt;</span></div><div class=\"line\">  );</div><div class=\"line\">&#125;,</div><div class=\"line\">...</div><div class=\"line\">var styles = StyleSheet.create(&#123;</div><div class=\"line\">  baseText: &#123;</div><div class=\"line\">    fontFamily: 'Cochin',</div><div class=\"line\">  &#125;,</div><div class=\"line\">  titleText: &#123;</div><div class=\"line\">    fontSize: 20,</div><div class=\"line\">    fontWeight: 'bold',</div><div class=\"line\">  &#125;,</div><div class=\"line\">&#125;;</div></pre></td></tr></table></figure>\n<hr>\n<h3 id=\"属性\"><a href=\"#属性\" class=\"headerlink\" title=\"属性\"></a>属性</h3><blockquote>\n<p><strong>numberOfLines={3}</strong><br>    用来当文本过长的时候裁剪文本。包括折叠产生的换行在内，总的行数不会超过这个属性的限制。<br>    类似于android的Maxline</p>\n<p>onLongPress={里面是调用的函数}<br>    长按回调<br>    1、里面的函数一定要加this<br>    2、绑定函数最好使用箭头函数绑定</p>\n</blockquote>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\">//在类里面的定义函数</div><div class=\"line\">onPressPhone()&#123;</div><div class=\"line\">  console.log(\"长按电话\");</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">Text</span> <span class=\"attr\">style</span>=<span class=\"string\">&#123;styles.TextStyle&#125;</span></div><div class=\"line\">    <span class=\"attr\">onLongPress</span>=<span class=\"string\">&#123;()</span>=&gt;</span>this.onPressPhone()&#125;&gt;</div><div class=\"line\">   手机号码</div><div class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">Text</span>&gt;</span></div></pre></td></tr></table></figure>\n<blockquote>\n<p>onPress={里面是调用的函数}<br>    文本被点击时触发<br>    1、里面的函数一定要加this</p>\n</blockquote>\n<hr>\n<h2 id=\"样式（style）\"><a href=\"#样式（style）\" class=\"headerlink\" title=\"样式（style）\"></a>样式（style）</h2><blockquote>\n<ul>\n<li>继承View的样式<ul>\n<li>color </li>\n<li>fontFamily</li>\n<li>fontSize</li>\n<li>fontStyle enum(‘normal’, ‘italic’)</li>\n<li>fontWeight enum(‘normal’,’bold’)</li>\n<li>lineHeight number </li>\n<li>textAlign enum(‘auto’, ‘left’, ‘right’, ‘center’, ‘justify’)<ul>\n<li>指定文本的对齐方式。其中’justify’值仅iOS支持，在Android上会变为left</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n</blockquote>\n<h3 id=\"嵌套文本\"><a href=\"#嵌套文本\" class=\"headerlink\" title=\"嵌套文本\"></a>嵌套文本</h3><blockquote>\n<p>把相同格式的文本嵌套包裹起来：</p>\n</blockquote>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">Text</span> <span class=\"attr\">style</span>=<span class=\"string\">&#123;&#123;fontWeight:</span> '<span class=\"attr\">bold</span>'&#125;&#125;&gt;</span></div><div class=\"line\">  I am bold</div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">Text</span> <span class=\"attr\">style</span>=<span class=\"string\">&#123;&#123;color:</span> '<span class=\"attr\">red</span>'&#125;&#125;&gt;</span></div><div class=\"line\">    and red</div><div class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">Text</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">Text</span>&gt;</span></div></pre></td></tr></table></figure>\n<h2 id=\"TextInput\"><a href=\"#TextInput\" class=\"headerlink\" title=\"TextInput\"></a>TextInput</h2><blockquote>\n<p>TextInput是一个允许用户在应用中通过键盘输入文本的基本组件。本组件的属性提供了多种特性的配置，譬如自动完成、自动大小写、占位文字，以及多种不同的键盘类型（如纯数字键盘）等等。</p>\n</blockquote>\n<h3 id=\"属性-1\"><a href=\"#属性-1\" class=\"headerlink\" title=\"属性\"></a>属性</h3><blockquote>\n<ul>\n<li><p>autoCapitalize 控制TextInput是否要自动将特定字符切换为大写</p>\n<ul>\n<li>characters: 所有的字符。</li>\n<li>words: 每个单词的第一个字符。</li>\n<li>sentences: 每句话的第一个字符（默认）。</li>\n<li>none: 不自动切换任何字符为大写。</li>\n</ul>\n</li>\n<li><p>defaultValue 提供一个文本框中的初始值。当用户开始输入的时候，值就可以改变。</p>\n</li>\n<li>placeholder 如果没有任何文字输入，会显示此字符串。</li>\n<li>multiline 为true时可以输入多行文字。</li>\n<li>maxLength 限制文本框中最多的字符数。使用这个属性而不用JS逻辑去实现，可以避免闪烁的现象。</li>\n<li>keyboardType 决定弹出的何种软键盘的<ul>\n<li>default</li>\n<li>numeric</li>\n<li>email-address</li>\n</ul>\n</li>\n<li>onChange 当文本框内容变化时调用此回调函数。</li>\n<li>onChangeText 当文本框内容变化时调用此回调函数。改变后的文字内容会作为参数传递。</li>\n<li>secureTextEntry 加密</li>\n<li>underlineColorAndroid 去掉下划线 </li>\n</ul>\n</blockquote>\n<h2 id=\"组件继承写法\"><a href=\"#组件继承写法\" class=\"headerlink\" title=\"组件继承写法\"></a>组件继承写法</h2><blockquote>\n<p>{…this.props} 就可以继承了</p>\n</blockquote>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\">class MyTextInput extends Component &#123;</div><div class=\"line\">  render()&#123;</div><div class=\"line\">    return (</div><div class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">View</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">TextInput</span> <span class=\"attr\">style</span>=<span class=\"string\">&#123;styles.InputStyle&#125;</span></div><div class=\"line\">            &#123;<span class=\"attr\">...this.props</span>&#125;     //用于继承</div><div class=\"line\">            <span class=\"attr\">autoCapitalize</span>=<span class=\"string\">'characters'</span></div><div class=\"line\">            <span class=\"attr\">underlineColorAndroid</span>=<span class=\"string\">'transparent'</span></div><div class=\"line\">            <span class=\"attr\">onChangeText</span>=<span class=\"string\">&#123;</span></div><div class=\"line\">              (<span class=\"attr\">input_Phone</span>) =&gt;</span> this.setState(&#123;input_Phone&#125;)</div><div class=\"line\">          &#125;</div><div class=\"line\">        /&gt;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">Text</span> <span class=\"attr\">style</span>=<span class=\"string\">&#123;styles.TextPrefixPhone&#125;</span>&gt;</span>+86<span class=\"tag\">&lt;/<span class=\"name\">Text</span>&gt;</span></div><div class=\"line\"></div><div class=\"line\">         <span class=\"tag\">&lt;<span class=\"name\">View</span> <span class=\"attr\">style</span>=<span class=\"string\">&#123;styles.verticalLine&#125;/</span>&gt;</span></div><div class=\"line\">      <span class=\"tag\">&lt;/<span class=\"name\">View</span>&gt;</span></div><div class=\"line\"></div><div class=\"line\">    );</div><div class=\"line\">  &#125;</div><div class=\"line\"></div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"> <span class=\"tag\">&lt;<span class=\"name\">MyTextInput</span>   //继承上面的属性</div><div class=\"line\">      <span class=\"attr\">placeholder</span>=<span class=\"string\">\"请输入账号\"</span></div><div class=\"line\">     /&gt;</span></div></pre></td></tr></table></figure>"},{"title":"9、image","date":"2017-03-29T02:51:30.000Z","_content":"\n>一个用于显示多种不同类型图片的React组件，包括网络图片、静态资源、临时的本地图片、以及本地磁盘上的图片（如相册）等。详细用法参阅图片文档。\n\n\n<!--more-->\n\n目前暂时只能使用网络图片加载\n\n```html \n    \n      <Image\n        style={styles.logo}\n        source={{uri: 'http://facebook.github.io/react/img/logo_og.png'}}\n      />\n\n      //成为背景图片\n\n        <Image      //成为背景图\n           style={{\n            flex:1,\n           }}\n           source={{uri:\"http://ofjn4kn3q.bkt.clouddn.com/bg.png\"}}\n          >\n\n          、、、内部其他代码\n           \n      </Image>\n\n```\n\n## 属性\n\n三个回调方法：\n\n* onLoad        //图片加载成功时加载\n* onLoadStart   //加载开始时回调\n* onLoadEnd     //加载结束后回调，不管成功与否\n\n适配组件和图片\n* resizeMode \n    - cover 在保持图片宽高比的前提下缩放图片，直到宽度和高度都大于等于容器视图的尺寸\n    - contain 在保持图片宽高比的前提下缩放图片，直到宽度和高度都小于等于容器视图的尺寸\n    - stretch 拉伸图片且不维持宽高比，直到宽高都刚好填满容器\n    - repeat 重复平铺图片直到填满容器。图片会维持原始尺寸。仅iOS可用\n    - center  居中不拉伸\n","source":"_posts/9、image.md","raw":"---\ntitle: 9、image\ndate: 2017-03-29 10:51:30\ntags: [React-native]\n---\n\n>一个用于显示多种不同类型图片的React组件，包括网络图片、静态资源、临时的本地图片、以及本地磁盘上的图片（如相册）等。详细用法参阅图片文档。\n\n\n<!--more-->\n\n目前暂时只能使用网络图片加载\n\n```html \n    \n      <Image\n        style={styles.logo}\n        source={{uri: 'http://facebook.github.io/react/img/logo_og.png'}}\n      />\n\n      //成为背景图片\n\n        <Image      //成为背景图\n           style={{\n            flex:1,\n           }}\n           source={{uri:\"http://ofjn4kn3q.bkt.clouddn.com/bg.png\"}}\n          >\n\n          、、、内部其他代码\n           \n      </Image>\n\n```\n\n## 属性\n\n三个回调方法：\n\n* onLoad        //图片加载成功时加载\n* onLoadStart   //加载开始时回调\n* onLoadEnd     //加载结束后回调，不管成功与否\n\n适配组件和图片\n* resizeMode \n    - cover 在保持图片宽高比的前提下缩放图片，直到宽度和高度都大于等于容器视图的尺寸\n    - contain 在保持图片宽高比的前提下缩放图片，直到宽度和高度都小于等于容器视图的尺寸\n    - stretch 拉伸图片且不维持宽高比，直到宽高都刚好填满容器\n    - repeat 重复平铺图片直到填满容器。图片会维持原始尺寸。仅iOS可用\n    - center  居中不拉伸\n","slug":"9、image","published":1,"updated":"2017-03-29T15:51:22.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj0v5msvh000dx5ypx3g8zenl","content":"<blockquote>\n<p>一个用于显示多种不同类型图片的React组件，包括网络图片、静态资源、临时的本地图片、以及本地磁盘上的图片（如相册）等。详细用法参阅图片文档。</p>\n</blockquote>\n<a id=\"more\"></a>\n<p>目前暂时只能使用网络图片加载</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div></pre></td><td class=\"code\"><pre><div class=\"line\">    </div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">Image</span></span></div><div class=\"line\">  <span class=\"attr\">style</span>=<span class=\"string\">&#123;styles.logo&#125;</span></div><div class=\"line\">  <span class=\"attr\">source</span>=<span class=\"string\">&#123;&#123;uri:</span> '<span class=\"attr\">http:</span>//<span class=\"attr\">facebook.github.io</span>/<span class=\"attr\">react</span>/<span class=\"attr\">img</span>/<span class=\"attr\">logo_og.png</span>'&#125;&#125;</div><div class=\"line\">/&gt;</div><div class=\"line\"></div><div class=\"line\">//成为背景图片</div><div class=\"line\"></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">Image</span>      //成为背景图</span></div><div class=\"line\">     <span class=\"attr\">style</span>=<span class=\"string\">&#123;&#123;</span></div><div class=\"line\">      <span class=\"attr\">flex:1</span>,</div><div class=\"line\">     &#125;&#125;</div><div class=\"line\">     <span class=\"attr\">source</span>=<span class=\"string\">&#123;&#123;uri:</span>\"<span class=\"attr\">http:</span>//<span class=\"attr\">ofjn4kn3q.bkt.clouddn.com</span>/<span class=\"attr\">bg.png</span>\"&#125;&#125;</div><div class=\"line\">    &gt;</div><div class=\"line\"></div><div class=\"line\">    、、、内部其他代码</div><div class=\"line\">     </div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">Image</span>&gt;</span></div></pre></td></tr></table></figure>\n<h2 id=\"属性\"><a href=\"#属性\" class=\"headerlink\" title=\"属性\"></a>属性</h2><p>三个回调方法：</p>\n<ul>\n<li>onLoad        //图片加载成功时加载</li>\n<li>onLoadStart   //加载开始时回调</li>\n<li>onLoadEnd     //加载结束后回调，不管成功与否</li>\n</ul>\n<p>适配组件和图片</p>\n<ul>\n<li>resizeMode <ul>\n<li>cover 在保持图片宽高比的前提下缩放图片，直到宽度和高度都大于等于容器视图的尺寸</li>\n<li>contain 在保持图片宽高比的前提下缩放图片，直到宽度和高度都小于等于容器视图的尺寸</li>\n<li>stretch 拉伸图片且不维持宽高比，直到宽高都刚好填满容器</li>\n<li>repeat 重复平铺图片直到填满容器。图片会维持原始尺寸。仅iOS可用</li>\n<li>center  居中不拉伸</li>\n</ul>\n</li>\n</ul>\n","excerpt":"<blockquote>\n<p>一个用于显示多种不同类型图片的React组件，包括网络图片、静态资源、临时的本地图片、以及本地磁盘上的图片（如相册）等。详细用法参阅图片文档。</p>\n</blockquote>","more":"<p>目前暂时只能使用网络图片加载</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div></pre></td><td class=\"code\"><pre><div class=\"line\">    </div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">Image</span></div><div class=\"line\">  <span class=\"attr\">style</span>=<span class=\"string\">&#123;styles.logo&#125;</span></div><div class=\"line\">  <span class=\"attr\">source</span>=<span class=\"string\">&#123;&#123;uri:</span> '<span class=\"attr\">http:</span>//<span class=\"attr\">facebook.github.io</span>/<span class=\"attr\">react</span>/<span class=\"attr\">img</span>/<span class=\"attr\">logo_og.png</span>'&#125;&#125;</div><div class=\"line\">/&gt;</span></div><div class=\"line\"></div><div class=\"line\">//成为背景图片</div><div class=\"line\"></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">Image</span>      //成为背景图</div><div class=\"line\">     <span class=\"attr\">style</span>=<span class=\"string\">&#123;&#123;</span></div><div class=\"line\">      <span class=\"attr\">flex:1</span>,</div><div class=\"line\">     &#125;&#125;</div><div class=\"line\">     <span class=\"attr\">source</span>=<span class=\"string\">&#123;&#123;uri:</span>\"<span class=\"attr\">http:</span>//<span class=\"attr\">ofjn4kn3q.bkt.clouddn.com</span>/<span class=\"attr\">bg.png</span>\"&#125;&#125;</div><div class=\"line\">    &gt;</span></div><div class=\"line\"></div><div class=\"line\">    、、、内部其他代码</div><div class=\"line\">     </div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">Image</span>&gt;</span></div></pre></td></tr></table></figure>\n<h2 id=\"属性\"><a href=\"#属性\" class=\"headerlink\" title=\"属性\"></a>属性</h2><p>三个回调方法：</p>\n<ul>\n<li>onLoad        //图片加载成功时加载</li>\n<li>onLoadStart   //加载开始时回调</li>\n<li>onLoadEnd     //加载结束后回调，不管成功与否</li>\n</ul>\n<p>适配组件和图片</p>\n<ul>\n<li>resizeMode <ul>\n<li>cover 在保持图片宽高比的前提下缩放图片，直到宽度和高度都大于等于容器视图的尺寸</li>\n<li>contain 在保持图片宽高比的前提下缩放图片，直到宽度和高度都小于等于容器视图的尺寸</li>\n<li>stretch 拉伸图片且不维持宽高比，直到宽高都刚好填满容器</li>\n<li>repeat 重复平铺图片直到填满容器。图片会维持原始尺寸。仅iOS可用</li>\n<li>center  居中不拉伸</li>\n</ul>\n</li>\n</ul>"},{"title":"Android6.0以上获取权限总结","date":"2016-11-08T07:08:55.000Z","_content":"\n## Android6.0中的权限分类：\n\n1、普通权限（一般权限）\n>   这些权限对于用户隐私和设备操作不会造成太多危险，系统会自动授予权限。\n>   （普通权限类型在文章最后）\n>    **  用法：和之前声明权限方法相同，直接在Manifest中声明就好了。** \n\n\n2、运行时权限（危险权限）\n>   对于低版本来说，在Mainfest中声明了运行时权限，系统会自动授予。\n>   *但是在6.0以上版本时，系统会明确的让用户来决定是否授予这些权限。*\n\n\n运行时权限分为9组：（每组只要有一个权限申请成功了，就默认整组权限都可以使用）\n<!-- more -->  \n```java\n        //联系人权限组\n        group:android.permission-group.CONTACTS \n            permission:android.permission.WRITE_CONTACTS\n            permission:android.permission.GET_ACCOUNTS    \n            permission:android.permission.READ_CONTACTS\n        //电话权限组\n        group:android.permission-group.PHONE   \n            permission:android.permission.READ_CALL_LOG\n            permission:android.permission.READ_PHONE_STATE \n            permission:android.permission.CALL_PHONE\n            permission:android.permission.WRITE_CALL_LOG\n            permission:android.permission.USE_SIP\n            permission:android.permission.PROCESS_OUTGOING_CALLS\n            permission:com.android.voicemail.permission.ADD_VOICEMAIL\n        //日历权限组\n        group:android.permission-group.CALENDAR \n            permission:android.permission.READ_CALENDAR\n            permission:android.permission.WRITE_CALENDAR\n        //拍照权限组\n        group:android.permission-group.CAMERA  \n            permission:android.permission.CAMERA\n        //传感器权限组\n        group:android.permission-group.SENSORS  \n            permission:android.permission.BODY_SENSORS\n        //位置权限组\n        group:android.permission-group.LOCATION  \n            permission:android.permission.ACCESS_FINE_LOCATION\n            permission:android.permission.ACCESS_COARSE_LOCATION\n        //储存卡权限组\n        group:android.permission-group.STORAGE  \n            permission:android.permission.READ_EXTERNAL_STORAGE\n            permission:android.permission.WRITE_EXTERNAL_STORAGE\n        //麦克风权限组\n        group:android.permission-group.MICROPHONE \n            permission:android.permission.RECORD_AUDIO\n        //sms卡权限组\n        group:android.permission-group.SMS       \n            permission:android.permission.READ_SMS\n            permission:android.permission.RECEIVE_WAP_PUSH\n            permission:android.permission.RECEIVE_MMS\n            permission:android.permission.RECEIVE_SMS\n            permission:android.permission.SEND_SMS\n            permission:android.permission.READ_CELL_BROADCASTS\n```\n\n\n## Android6.0获取权限方法：\n>在6.0以上的系统中，允许用户关闭危险权限，同时也需要用户允许使用权限。\n我们获取的方式：\n    检查是否授权-->请求授权-->回调查看状态做相应操作\n\n### 判断是否授权：\n```java\n    //核对授权情况：\n    //  1、当系统版本<23时，会有：\n    //      ActivityCompat.checkSelfPermission（）== PERMISSION_GRANTED\n    //  2、当系统版本>=23时，会判断是否授权\n    //  3、当targetSdkVersion < 23。运行在6.0版本上时会出现：\n    //      ActivityCompat.checkSelfPermission（）== PERMISSION_GRANTED\n          \n    ActivityCompat.checkSelfPermission(activity, requestPermission);\n```\n\n```java\n    //参考网上做法：\n    public boolean selfPermissionGranted(String permission) {\n        // For Android < Android M, self permissions are always granted.\n        boolean result = true;\n        if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.M) {\n            if (targetSdkVersion >= Build.VERSION_CODES.M) {\n                // targetSdkVersion >= Android M, we can\n                // use Context#checkSelfPermission\n                result = context.checkSelfPermission(permission)\n                        == PackageManager.PERMISSION_GRANTED;\n            } else {\n                // targetSdkVersion < Android M, we have to use PermissionChecker\n                result = PermissionChecker.checkSelfPermission(context, permission)\n                        == PermissionChecker.PERMISSION_GRANTED;\n            }\n        }\n        return result;\n    }\n```\n\n### 请求权限：\n\n```java\n    //请求权限\n    public static void requestPermission(final Activity activity, final int requestCode, PermissionUtil.PermissionGrant permissionGrant) {\n        if (activity == null) {\n            return;\n        }\n\n        Log.i(TAG, \"requestPermission requestCode:\" + requestCode);\n        if (requestCode < 0 || requestCode >= requestPermissions.length) {\n            Log.w(TAG, \"requestPermission illegal requestCode:\" + requestCode);\n            return;\n        }\n\n        final String requestPermission = requestPermissions[requestCode];\n\n        //判断权限是否授予\n        if(selfPermissionGranted(activity,requestPermission)){\n            Log.d(TAG, \"ActivityCompat.checkSelfPermission ==== PackageManager.PERMISSION_GRANTED\");\n            //已获取授权，直接外部回调，做自己想做的事\n            permissionGrant.onPermissionGranted(requestCode);\n        }else {\n            Log.i(TAG, \"ActivityCompat.checkSelfPermission != PackageManager.PERMISSION_GRANTED\");\n            //未获取授权\n            //判断shouldShowRequestPermissionRationale：\n            if (ActivityCompat.shouldShowRequestPermissionRationale(activity, requestPermission)) {\n                Log.i(TAG, \"requestPermission shouldShowRequestPermissionRationale\");\n                shouldShowRationale(activity, requestCode, requestPermission);\n            } else {\n                Log.d(TAG, \"requestCameraPermission else\");\n                ActivityCompat.requestPermissions(activity, new String[]{requestPermission}, requestCode);\n            }\n        }\n    }\n\n```\n\n**对应逻辑图：**\n<img src=\"http://og5n67ybk.bkt.clouddn.com/android%E6%9D%83%E9%99%90%E7%94%B3%E8%AF%B7%E6%B5%81%E7%A8%8B%E5%9B%BE.jpg\">\n\n**主要坑点：**\n>当用户选择了“不在询问”拒绝之后，再次点击功能就不会出现系统提示框了。这时我们需要自己在onRequestPermissionsResult()中捕获并且提示用户再次打开权限。\n\n### 重写onRequestPermissionsResult方法：\n>通过\nActivityCompat.requestPermissions(activity, new String[]{requestPermission}, requestCode);\n最后会调用onRequestPermissionsResult()方法，其中申请的权限和相应的状态都会返回。\n\n```java\n @Override\n  public void onRequestPermissionsResult(int requestCode, String[] permissions, int[] grantResults) {\n      //permissions是申请的权限\n      //grantResults是对应权限的申请结果（用来二次判断）\n      super.onRequestPermissionsResult(requestCode, permissions, grantResults);\n       PermissionUtil.requestPermissionsResult(this,requestCode,permissions,grantResults, new PermissionUtil.PermissionGrant() {\n            @Override\n            public void onPermissionGranted(int requestCode) {\n                Toast.makeText(TakePhotoActivity.this, \"回调后做相应的动作\", Toast.LENGTH_SHORT).show();\n            }\n        });\n  }\n```\n\n```java\n    //回调后检查权限状态 \n    //  如果权限被用户拒绝了，再次询问用户（openSettingActivity()方法内）\n    //  如果允许了，做自己想做事(permissionGrant.onPermissionGranted(requestCode);\n)\n    public static void requestPermissionsResult(final Activity activity, final int requestCode, @NonNull String[] permissions,@NonNull int[] grantResults, PermissionGrant permissionGrant) {\n\n        if (activity == null) {\n            return;\n        }\n        Log.d(TAG, \"requestPermissionsResult requestCode:\" + requestCode);\n\n        if (requestCode == CODE_MULTI_PERMISSION) {\n            requestMultiResult(activity, permissions, grantResults, permissionGrant);\n            return;\n        }\n\n        if (requestCode < 0 || requestCode >= requestPermissions.length) {\n            Log.w(TAG, \"requestPermissionsResult illegal requestCode:\" + requestCode);\n            Toast.makeText(activity, \"illegal requestCode:\" + requestCode, Toast.LENGTH_SHORT).show();\n            return;\n        }\n\n        Log.i(TAG, \"onRequestPermissionsResult requestCode:\" + requestCode + \",permissions:\" + permissions.toString()\n                + \",grantResults:\" + grantResults.toString() + \",length:\" + grantResults.length);\n\n        if (grantResults.length == 1 && grantResults[0] == PackageManager.PERMISSION_GRANTED) {\n            Log.i(TAG, \"onRequestPermissionsResult PERMISSION_GRANTED\");\n            //TODO success, do something, can use callback\n            permissionGrant.onPermissionGranted(requestCode);\n\n        } else {\n            //TODO hint user this permission function\n            Log.i(TAG, \"onRequestPermissionsResult PERMISSION NOT GRANTED\");\n            //TODO\n            String[] permissionsHint = logs;\n            openSettingActivity(activity,permissionsHint[requestCode]);\n        }\n\n    }\n```\n\n**主要坑点：**\n>这里只讲了在Activity中的使用情况。在fragment中运行时权限要做特殊处理：\n1、在Fragment中申请权限，去掉ActivityCompat.requestPermissions(activity, new String[]{requestPermission}, requestCode)。使用Fragment自带的requestPermissions()方法。*最后都会回调一次在activity中的onRequestPermissionsResult方法*\n2、如果在Fragment中嵌套Fragment，在子Fragment中使用requestPermissions方法，onRequestPermissionsResult也不会回调回来。\n*建议使用：getParentFragment().requestPermissions方法*可以回调到父类的onRequestPermissionsResult中。\n加入下面代码可以传递到子类：\n\n\n```java\n    @Override\n    public void onRequestPermissionsResult(int requestCode, String[] permissions, int[] grantResults) {\n      super.onRequestPermissionsResult(requestCode, permissions, grantResults);\n      List<Fragment> fragments = getChildFragmentManager().getFragments();\n      if (fragments != null) {\n          for (Fragment fragment : fragments) {\n              if (fragment != null) {\n                  fragment.onRequestPermissionsResult(requestCode,permissions,grantResults);\n              }\n          }\n      }\n  }\n```\n\n\n## 最后：\n\n1、上述代码已封装在一个工具类中。[（有兴趣的可以在我的Github上查看）][1]\n2、当前也有比较好的权限框架：[RxPermissions 基于RxJava的运行时权限检测框架][2]\n\n\n\n\n[1]:https://github.com/TomStep/PermissionsUtil\n[2]:https://github.com/tbruyelle/RxPermissions\n\n\n","source":"_posts/Android6.0以上获取权限总结.md","raw":"---\ntitle: Android6.0以上获取权限总结\ndate: 2016-11-08 15:08:55\ntags: Android\n---\n\n## Android6.0中的权限分类：\n\n1、普通权限（一般权限）\n>   这些权限对于用户隐私和设备操作不会造成太多危险，系统会自动授予权限。\n>   （普通权限类型在文章最后）\n>    **  用法：和之前声明权限方法相同，直接在Manifest中声明就好了。** \n\n\n2、运行时权限（危险权限）\n>   对于低版本来说，在Mainfest中声明了运行时权限，系统会自动授予。\n>   *但是在6.0以上版本时，系统会明确的让用户来决定是否授予这些权限。*\n\n\n运行时权限分为9组：（每组只要有一个权限申请成功了，就默认整组权限都可以使用）\n<!-- more -->  \n```java\n        //联系人权限组\n        group:android.permission-group.CONTACTS \n            permission:android.permission.WRITE_CONTACTS\n            permission:android.permission.GET_ACCOUNTS    \n            permission:android.permission.READ_CONTACTS\n        //电话权限组\n        group:android.permission-group.PHONE   \n            permission:android.permission.READ_CALL_LOG\n            permission:android.permission.READ_PHONE_STATE \n            permission:android.permission.CALL_PHONE\n            permission:android.permission.WRITE_CALL_LOG\n            permission:android.permission.USE_SIP\n            permission:android.permission.PROCESS_OUTGOING_CALLS\n            permission:com.android.voicemail.permission.ADD_VOICEMAIL\n        //日历权限组\n        group:android.permission-group.CALENDAR \n            permission:android.permission.READ_CALENDAR\n            permission:android.permission.WRITE_CALENDAR\n        //拍照权限组\n        group:android.permission-group.CAMERA  \n            permission:android.permission.CAMERA\n        //传感器权限组\n        group:android.permission-group.SENSORS  \n            permission:android.permission.BODY_SENSORS\n        //位置权限组\n        group:android.permission-group.LOCATION  \n            permission:android.permission.ACCESS_FINE_LOCATION\n            permission:android.permission.ACCESS_COARSE_LOCATION\n        //储存卡权限组\n        group:android.permission-group.STORAGE  \n            permission:android.permission.READ_EXTERNAL_STORAGE\n            permission:android.permission.WRITE_EXTERNAL_STORAGE\n        //麦克风权限组\n        group:android.permission-group.MICROPHONE \n            permission:android.permission.RECORD_AUDIO\n        //sms卡权限组\n        group:android.permission-group.SMS       \n            permission:android.permission.READ_SMS\n            permission:android.permission.RECEIVE_WAP_PUSH\n            permission:android.permission.RECEIVE_MMS\n            permission:android.permission.RECEIVE_SMS\n            permission:android.permission.SEND_SMS\n            permission:android.permission.READ_CELL_BROADCASTS\n```\n\n\n## Android6.0获取权限方法：\n>在6.0以上的系统中，允许用户关闭危险权限，同时也需要用户允许使用权限。\n我们获取的方式：\n    检查是否授权-->请求授权-->回调查看状态做相应操作\n\n### 判断是否授权：\n```java\n    //核对授权情况：\n    //  1、当系统版本<23时，会有：\n    //      ActivityCompat.checkSelfPermission（）== PERMISSION_GRANTED\n    //  2、当系统版本>=23时，会判断是否授权\n    //  3、当targetSdkVersion < 23。运行在6.0版本上时会出现：\n    //      ActivityCompat.checkSelfPermission（）== PERMISSION_GRANTED\n          \n    ActivityCompat.checkSelfPermission(activity, requestPermission);\n```\n\n```java\n    //参考网上做法：\n    public boolean selfPermissionGranted(String permission) {\n        // For Android < Android M, self permissions are always granted.\n        boolean result = true;\n        if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.M) {\n            if (targetSdkVersion >= Build.VERSION_CODES.M) {\n                // targetSdkVersion >= Android M, we can\n                // use Context#checkSelfPermission\n                result = context.checkSelfPermission(permission)\n                        == PackageManager.PERMISSION_GRANTED;\n            } else {\n                // targetSdkVersion < Android M, we have to use PermissionChecker\n                result = PermissionChecker.checkSelfPermission(context, permission)\n                        == PermissionChecker.PERMISSION_GRANTED;\n            }\n        }\n        return result;\n    }\n```\n\n### 请求权限：\n\n```java\n    //请求权限\n    public static void requestPermission(final Activity activity, final int requestCode, PermissionUtil.PermissionGrant permissionGrant) {\n        if (activity == null) {\n            return;\n        }\n\n        Log.i(TAG, \"requestPermission requestCode:\" + requestCode);\n        if (requestCode < 0 || requestCode >= requestPermissions.length) {\n            Log.w(TAG, \"requestPermission illegal requestCode:\" + requestCode);\n            return;\n        }\n\n        final String requestPermission = requestPermissions[requestCode];\n\n        //判断权限是否授予\n        if(selfPermissionGranted(activity,requestPermission)){\n            Log.d(TAG, \"ActivityCompat.checkSelfPermission ==== PackageManager.PERMISSION_GRANTED\");\n            //已获取授权，直接外部回调，做自己想做的事\n            permissionGrant.onPermissionGranted(requestCode);\n        }else {\n            Log.i(TAG, \"ActivityCompat.checkSelfPermission != PackageManager.PERMISSION_GRANTED\");\n            //未获取授权\n            //判断shouldShowRequestPermissionRationale：\n            if (ActivityCompat.shouldShowRequestPermissionRationale(activity, requestPermission)) {\n                Log.i(TAG, \"requestPermission shouldShowRequestPermissionRationale\");\n                shouldShowRationale(activity, requestCode, requestPermission);\n            } else {\n                Log.d(TAG, \"requestCameraPermission else\");\n                ActivityCompat.requestPermissions(activity, new String[]{requestPermission}, requestCode);\n            }\n        }\n    }\n\n```\n\n**对应逻辑图：**\n<img src=\"http://og5n67ybk.bkt.clouddn.com/android%E6%9D%83%E9%99%90%E7%94%B3%E8%AF%B7%E6%B5%81%E7%A8%8B%E5%9B%BE.jpg\">\n\n**主要坑点：**\n>当用户选择了“不在询问”拒绝之后，再次点击功能就不会出现系统提示框了。这时我们需要自己在onRequestPermissionsResult()中捕获并且提示用户再次打开权限。\n\n### 重写onRequestPermissionsResult方法：\n>通过\nActivityCompat.requestPermissions(activity, new String[]{requestPermission}, requestCode);\n最后会调用onRequestPermissionsResult()方法，其中申请的权限和相应的状态都会返回。\n\n```java\n @Override\n  public void onRequestPermissionsResult(int requestCode, String[] permissions, int[] grantResults) {\n      //permissions是申请的权限\n      //grantResults是对应权限的申请结果（用来二次判断）\n      super.onRequestPermissionsResult(requestCode, permissions, grantResults);\n       PermissionUtil.requestPermissionsResult(this,requestCode,permissions,grantResults, new PermissionUtil.PermissionGrant() {\n            @Override\n            public void onPermissionGranted(int requestCode) {\n                Toast.makeText(TakePhotoActivity.this, \"回调后做相应的动作\", Toast.LENGTH_SHORT).show();\n            }\n        });\n  }\n```\n\n```java\n    //回调后检查权限状态 \n    //  如果权限被用户拒绝了，再次询问用户（openSettingActivity()方法内）\n    //  如果允许了，做自己想做事(permissionGrant.onPermissionGranted(requestCode);\n)\n    public static void requestPermissionsResult(final Activity activity, final int requestCode, @NonNull String[] permissions,@NonNull int[] grantResults, PermissionGrant permissionGrant) {\n\n        if (activity == null) {\n            return;\n        }\n        Log.d(TAG, \"requestPermissionsResult requestCode:\" + requestCode);\n\n        if (requestCode == CODE_MULTI_PERMISSION) {\n            requestMultiResult(activity, permissions, grantResults, permissionGrant);\n            return;\n        }\n\n        if (requestCode < 0 || requestCode >= requestPermissions.length) {\n            Log.w(TAG, \"requestPermissionsResult illegal requestCode:\" + requestCode);\n            Toast.makeText(activity, \"illegal requestCode:\" + requestCode, Toast.LENGTH_SHORT).show();\n            return;\n        }\n\n        Log.i(TAG, \"onRequestPermissionsResult requestCode:\" + requestCode + \",permissions:\" + permissions.toString()\n                + \",grantResults:\" + grantResults.toString() + \",length:\" + grantResults.length);\n\n        if (grantResults.length == 1 && grantResults[0] == PackageManager.PERMISSION_GRANTED) {\n            Log.i(TAG, \"onRequestPermissionsResult PERMISSION_GRANTED\");\n            //TODO success, do something, can use callback\n            permissionGrant.onPermissionGranted(requestCode);\n\n        } else {\n            //TODO hint user this permission function\n            Log.i(TAG, \"onRequestPermissionsResult PERMISSION NOT GRANTED\");\n            //TODO\n            String[] permissionsHint = logs;\n            openSettingActivity(activity,permissionsHint[requestCode]);\n        }\n\n    }\n```\n\n**主要坑点：**\n>这里只讲了在Activity中的使用情况。在fragment中运行时权限要做特殊处理：\n1、在Fragment中申请权限，去掉ActivityCompat.requestPermissions(activity, new String[]{requestPermission}, requestCode)。使用Fragment自带的requestPermissions()方法。*最后都会回调一次在activity中的onRequestPermissionsResult方法*\n2、如果在Fragment中嵌套Fragment，在子Fragment中使用requestPermissions方法，onRequestPermissionsResult也不会回调回来。\n*建议使用：getParentFragment().requestPermissions方法*可以回调到父类的onRequestPermissionsResult中。\n加入下面代码可以传递到子类：\n\n\n```java\n    @Override\n    public void onRequestPermissionsResult(int requestCode, String[] permissions, int[] grantResults) {\n      super.onRequestPermissionsResult(requestCode, permissions, grantResults);\n      List<Fragment> fragments = getChildFragmentManager().getFragments();\n      if (fragments != null) {\n          for (Fragment fragment : fragments) {\n              if (fragment != null) {\n                  fragment.onRequestPermissionsResult(requestCode,permissions,grantResults);\n              }\n          }\n      }\n  }\n```\n\n\n## 最后：\n\n1、上述代码已封装在一个工具类中。[（有兴趣的可以在我的Github上查看）][1]\n2、当前也有比较好的权限框架：[RxPermissions 基于RxJava的运行时权限检测框架][2]\n\n\n\n\n[1]:https://github.com/TomStep/PermissionsUtil\n[2]:https://github.com/tbruyelle/RxPermissions\n\n\n","slug":"Android6.0以上获取权限总结","published":1,"updated":"2017-03-29T15:51:22.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj0v5msvi000fx5ypv6cbk68r","content":"<h2 id=\"Android6-0中的权限分类：\"><a href=\"#Android6-0中的权限分类：\" class=\"headerlink\" title=\"Android6.0中的权限分类：\"></a>Android6.0中的权限分类：</h2><p>1、普通权限（一般权限）</p>\n<blockquote>\n<p>  这些权限对于用户隐私和设备操作不会造成太多危险，系统会自动授予权限。<br>  （普通权限类型在文章最后）<br>   <strong>  用法：和之前声明权限方法相同，直接在Manifest中声明就好了。</strong> </p>\n</blockquote>\n<p>2、运行时权限（危险权限）</p>\n<blockquote>\n<p>  对于低版本来说，在Mainfest中声明了运行时权限，系统会自动授予。<br>  <em>但是在6.0以上版本时，系统会明确的让用户来决定是否授予这些权限。</em></p>\n</blockquote>\n<p>运行时权限分为9组：（每组只要有一个权限申请成功了，就默认整组权限都可以使用）<br><a id=\"more\"></a><br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">//联系人权限组</span></div><div class=\"line\">group:android.permission-group.CONTACTS </div><div class=\"line\">    permission:android.permission.WRITE_CONTACTS</div><div class=\"line\">    permission:android.permission.GET_ACCOUNTS    </div><div class=\"line\">    permission:android.permission.READ_CONTACTS</div><div class=\"line\"><span class=\"comment\">//电话权限组</span></div><div class=\"line\">group:android.permission-group.PHONE   </div><div class=\"line\">    permission:android.permission.READ_CALL_LOG</div><div class=\"line\">    permission:android.permission.READ_PHONE_STATE </div><div class=\"line\">    permission:android.permission.CALL_PHONE</div><div class=\"line\">    permission:android.permission.WRITE_CALL_LOG</div><div class=\"line\">    permission:android.permission.USE_SIP</div><div class=\"line\">    permission:android.permission.PROCESS_OUTGOING_CALLS</div><div class=\"line\">    permission:com.android.voicemail.permission.ADD_VOICEMAIL</div><div class=\"line\"><span class=\"comment\">//日历权限组</span></div><div class=\"line\">group:android.permission-group.CALENDAR </div><div class=\"line\">    permission:android.permission.READ_CALENDAR</div><div class=\"line\">    permission:android.permission.WRITE_CALENDAR</div><div class=\"line\"><span class=\"comment\">//拍照权限组</span></div><div class=\"line\">group:android.permission-group.CAMERA  </div><div class=\"line\">    permission:android.permission.CAMERA</div><div class=\"line\"><span class=\"comment\">//传感器权限组</span></div><div class=\"line\">group:android.permission-group.SENSORS  </div><div class=\"line\">    permission:android.permission.BODY_SENSORS</div><div class=\"line\"><span class=\"comment\">//位置权限组</span></div><div class=\"line\">group:android.permission-group.LOCATION  </div><div class=\"line\">    permission:android.permission.ACCESS_FINE_LOCATION</div><div class=\"line\">    permission:android.permission.ACCESS_COARSE_LOCATION</div><div class=\"line\"><span class=\"comment\">//储存卡权限组</span></div><div class=\"line\">group:android.permission-group.STORAGE  </div><div class=\"line\">    permission:android.permission.READ_EXTERNAL_STORAGE</div><div class=\"line\">    permission:android.permission.WRITE_EXTERNAL_STORAGE</div><div class=\"line\"><span class=\"comment\">//麦克风权限组</span></div><div class=\"line\">group:android.permission-group.MICROPHONE </div><div class=\"line\">    permission:android.permission.RECORD_AUDIO</div><div class=\"line\"><span class=\"comment\">//sms卡权限组</span></div><div class=\"line\">group:android.permission-group.SMS       </div><div class=\"line\">    permission:android.permission.READ_SMS</div><div class=\"line\">    permission:android.permission.RECEIVE_WAP_PUSH</div><div class=\"line\">    permission:android.permission.RECEIVE_MMS</div><div class=\"line\">    permission:android.permission.RECEIVE_SMS</div><div class=\"line\">    permission:android.permission.SEND_SMS</div><div class=\"line\">    permission:android.permission.READ_CELL_BROADCASTS</div></pre></td></tr></table></figure></p>\n<h2 id=\"Android6-0获取权限方法：\"><a href=\"#Android6-0获取权限方法：\" class=\"headerlink\" title=\"Android6.0获取权限方法：\"></a>Android6.0获取权限方法：</h2><blockquote>\n<p>在6.0以上的系统中，允许用户关闭危险权限，同时也需要用户允许使用权限。<br>我们获取的方式：<br>    检查是否授权–&gt;请求授权–&gt;回调查看状态做相应操作</p>\n</blockquote>\n<h3 id=\"判断是否授权：\"><a href=\"#判断是否授权：\" class=\"headerlink\" title=\"判断是否授权：\"></a>判断是否授权：</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">//核对授权情况：</span></div><div class=\"line\"><span class=\"comment\">//  1、当系统版本&lt;23时，会有：</span></div><div class=\"line\"><span class=\"comment\">//      ActivityCompat.checkSelfPermission（）== PERMISSION_GRANTED</span></div><div class=\"line\"><span class=\"comment\">//  2、当系统版本&gt;=23时，会判断是否授权</span></div><div class=\"line\"><span class=\"comment\">//  3、当targetSdkVersion &lt; 23。运行在6.0版本上时会出现：</span></div><div class=\"line\"><span class=\"comment\">//      ActivityCompat.checkSelfPermission（）== PERMISSION_GRANTED</span></div><div class=\"line\">      </div><div class=\"line\">ActivityCompat.checkSelfPermission(activity, requestPermission);</div></pre></td></tr></table></figure>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">//参考网上做法：</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">selfPermissionGranted</span><span class=\"params\">(String permission)</span> </span>&#123;</div><div class=\"line\">    <span class=\"comment\">// For Android &lt; Android M, self permissions are always granted.</span></div><div class=\"line\">    <span class=\"keyword\">boolean</span> result = <span class=\"keyword\">true</span>;</div><div class=\"line\">    <span class=\"keyword\">if</span> (Build.VERSION.SDK_INT &gt;= Build.VERSION_CODES.M) &#123;</div><div class=\"line\">        <span class=\"keyword\">if</span> (targetSdkVersion &gt;= Build.VERSION_CODES.M) &#123;</div><div class=\"line\">            <span class=\"comment\">// targetSdkVersion &gt;= Android M, we can</span></div><div class=\"line\">            <span class=\"comment\">// use Context#checkSelfPermission</span></div><div class=\"line\">            result = context.checkSelfPermission(permission)</div><div class=\"line\">                    == PackageManager.PERMISSION_GRANTED;</div><div class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">            <span class=\"comment\">// targetSdkVersion &lt; Android M, we have to use PermissionChecker</span></div><div class=\"line\">            result = PermissionChecker.checkSelfPermission(context, permission)</div><div class=\"line\">                    == PermissionChecker.PERMISSION_GRANTED;</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">return</span> result;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h3 id=\"请求权限：\"><a href=\"#请求权限：\" class=\"headerlink\" title=\"请求权限：\"></a>请求权限：</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">//请求权限</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">requestPermission</span><span class=\"params\">(<span class=\"keyword\">final</span> Activity activity, <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> requestCode, PermissionUtil.PermissionGrant permissionGrant)</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">if</span> (activity == <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">        <span class=\"keyword\">return</span>;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    Log.i(TAG, <span class=\"string\">\"requestPermission requestCode:\"</span> + requestCode);</div><div class=\"line\">    <span class=\"keyword\">if</span> (requestCode &lt; <span class=\"number\">0</span> || requestCode &gt;= requestPermissions.length) &#123;</div><div class=\"line\">        Log.w(TAG, <span class=\"string\">\"requestPermission illegal requestCode:\"</span> + requestCode);</div><div class=\"line\">        <span class=\"keyword\">return</span>;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">final</span> String requestPermission = requestPermissions[requestCode];</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">//判断权限是否授予</span></div><div class=\"line\">    <span class=\"keyword\">if</span>(selfPermissionGranted(activity,requestPermission))&#123;</div><div class=\"line\">        Log.d(TAG, <span class=\"string\">\"ActivityCompat.checkSelfPermission ==== PackageManager.PERMISSION_GRANTED\"</span>);</div><div class=\"line\">        <span class=\"comment\">//已获取授权，直接外部回调，做自己想做的事</span></div><div class=\"line\">        permissionGrant.onPermissionGranted(requestCode);</div><div class=\"line\">    &#125;<span class=\"keyword\">else</span> &#123;</div><div class=\"line\">        Log.i(TAG, <span class=\"string\">\"ActivityCompat.checkSelfPermission != PackageManager.PERMISSION_GRANTED\"</span>);</div><div class=\"line\">        <span class=\"comment\">//未获取授权</span></div><div class=\"line\">        <span class=\"comment\">//判断shouldShowRequestPermissionRationale：</span></div><div class=\"line\">        <span class=\"keyword\">if</span> (ActivityCompat.shouldShowRequestPermissionRationale(activity, requestPermission)) &#123;</div><div class=\"line\">            Log.i(TAG, <span class=\"string\">\"requestPermission shouldShowRequestPermissionRationale\"</span>);</div><div class=\"line\">            shouldShowRationale(activity, requestCode, requestPermission);</div><div class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">            Log.d(TAG, <span class=\"string\">\"requestCameraPermission else\"</span>);</div><div class=\"line\">            ActivityCompat.requestPermissions(activity, <span class=\"keyword\">new</span> String[]&#123;requestPermission&#125;, requestCode);</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p><strong>对应逻辑图：</strong><br><img src=\"http://og5n67ybk.bkt.clouddn.com/android%E6%9D%83%E9%99%90%E7%94%B3%E8%AF%B7%E6%B5%81%E7%A8%8B%E5%9B%BE.jpg\"></p>\n<p><strong>主要坑点：</strong></p>\n<blockquote>\n<p>当用户选择了“不在询问”拒绝之后，再次点击功能就不会出现系统提示框了。这时我们需要自己在onRequestPermissionsResult()中捕获并且提示用户再次打开权限。</p>\n</blockquote>\n<h3 id=\"重写onRequestPermissionsResult方法：\"><a href=\"#重写onRequestPermissionsResult方法：\" class=\"headerlink\" title=\"重写onRequestPermissionsResult方法：\"></a>重写onRequestPermissionsResult方法：</h3><blockquote>\n<p>通过<br>ActivityCompat.requestPermissions(activity, new String[]{requestPermission}, requestCode);<br>最后会调用onRequestPermissionsResult()方法，其中申请的权限和相应的状态都会返回。</p>\n</blockquote>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">@Override</span></div><div class=\"line\"> <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onRequestPermissionsResult</span><span class=\"params\">(<span class=\"keyword\">int</span> requestCode, String[] permissions, <span class=\"keyword\">int</span>[] grantResults)</span> </span>&#123;</div><div class=\"line\">     <span class=\"comment\">//permissions是申请的权限</span></div><div class=\"line\">     <span class=\"comment\">//grantResults是对应权限的申请结果（用来二次判断）</span></div><div class=\"line\">     <span class=\"keyword\">super</span>.onRequestPermissionsResult(requestCode, permissions, grantResults);</div><div class=\"line\">      PermissionUtil.requestPermissionsResult(<span class=\"keyword\">this</span>,requestCode,permissions,grantResults, <span class=\"keyword\">new</span> PermissionUtil.PermissionGrant() &#123;</div><div class=\"line\">           <span class=\"meta\">@Override</span></div><div class=\"line\">           <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onPermissionGranted</span><span class=\"params\">(<span class=\"keyword\">int</span> requestCode)</span> </span>&#123;</div><div class=\"line\">               Toast.makeText(TakePhotoActivity.<span class=\"keyword\">this</span>, <span class=\"string\">\"回调后做相应的动作\"</span>, Toast.LENGTH_SHORT).show();</div><div class=\"line\">           &#125;</div><div class=\"line\">       &#125;);</div><div class=\"line\"> &#125;</div></pre></td></tr></table></figure>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div></pre></td><td class=\"code\"><pre><div class=\"line\">    <span class=\"comment\">//回调后检查权限状态 </span></div><div class=\"line\">    <span class=\"comment\">//  如果权限被用户拒绝了，再次询问用户（openSettingActivity()方法内）</span></div><div class=\"line\">    <span class=\"comment\">//  如果允许了，做自己想做事(permissionGrant.onPermissionGranted(requestCode);</span></div><div class=\"line\">)</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">requestPermissionsResult</span><span class=\"params\">(<span class=\"keyword\">final</span> Activity activity, <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> requestCode, @NonNull String[] permissions,@NonNull <span class=\"keyword\">int</span>[] grantResults, PermissionGrant permissionGrant)</span> </span>&#123;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"keyword\">if</span> (activity == <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">            <span class=\"keyword\">return</span>;</div><div class=\"line\">        &#125;</div><div class=\"line\">        Log.d(TAG, <span class=\"string\">\"requestPermissionsResult requestCode:\"</span> + requestCode);</div><div class=\"line\"></div><div class=\"line\">        <span class=\"keyword\">if</span> (requestCode == CODE_MULTI_PERMISSION) &#123;</div><div class=\"line\">            requestMultiResult(activity, permissions, grantResults, permissionGrant);</div><div class=\"line\">            <span class=\"keyword\">return</span>;</div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"keyword\">if</span> (requestCode &lt; <span class=\"number\">0</span> || requestCode &gt;= requestPermissions.length) &#123;</div><div class=\"line\">            Log.w(TAG, <span class=\"string\">\"requestPermissionsResult illegal requestCode:\"</span> + requestCode);</div><div class=\"line\">            Toast.makeText(activity, <span class=\"string\">\"illegal requestCode:\"</span> + requestCode, Toast.LENGTH_SHORT).show();</div><div class=\"line\">            <span class=\"keyword\">return</span>;</div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">        Log.i(TAG, <span class=\"string\">\"onRequestPermissionsResult requestCode:\"</span> + requestCode + <span class=\"string\">\",permissions:\"</span> + permissions.toString()</div><div class=\"line\">                + <span class=\"string\">\",grantResults:\"</span> + grantResults.toString() + <span class=\"string\">\",length:\"</span> + grantResults.length);</div><div class=\"line\"></div><div class=\"line\">        <span class=\"keyword\">if</span> (grantResults.length == <span class=\"number\">1</span> &amp;&amp; grantResults[<span class=\"number\">0</span>] == PackageManager.PERMISSION_GRANTED) &#123;</div><div class=\"line\">            Log.i(TAG, <span class=\"string\">\"onRequestPermissionsResult PERMISSION_GRANTED\"</span>);</div><div class=\"line\">            <span class=\"comment\">//TODO success, do something, can use callback</span></div><div class=\"line\">            permissionGrant.onPermissionGranted(requestCode);</div><div class=\"line\"></div><div class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">            <span class=\"comment\">//TODO hint user this permission function</span></div><div class=\"line\">            Log.i(TAG, <span class=\"string\">\"onRequestPermissionsResult PERMISSION NOT GRANTED\"</span>);</div><div class=\"line\">            <span class=\"comment\">//TODO</span></div><div class=\"line\">            String[] permissionsHint = logs;</div><div class=\"line\">            openSettingActivity(activity,permissionsHint[requestCode]);</div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">    &#125;</div></pre></td></tr></table></figure>\n<p><strong>主要坑点：</strong></p>\n<blockquote>\n<p>这里只讲了在Activity中的使用情况。在fragment中运行时权限要做特殊处理：<br>1、在Fragment中申请权限，去掉ActivityCompat.requestPermissions(activity, new String[]{requestPermission}, requestCode)。使用Fragment自带的requestPermissions()方法。<em>最后都会回调一次在activity中的onRequestPermissionsResult方法</em><br>2、如果在Fragment中嵌套Fragment，在子Fragment中使用requestPermissions方法，onRequestPermissionsResult也不会回调回来。<br><em>建议使用：getParentFragment().requestPermissions方法</em>可以回调到父类的onRequestPermissionsResult中。<br>加入下面代码可以传递到子类：</p>\n</blockquote>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\">  <span class=\"meta\">@Override</span></div><div class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onRequestPermissionsResult</span><span class=\"params\">(<span class=\"keyword\">int</span> requestCode, String[] permissions, <span class=\"keyword\">int</span>[] grantResults)</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">super</span>.onRequestPermissionsResult(requestCode, permissions, grantResults);</div><div class=\"line\">    List&lt;Fragment&gt; fragments = getChildFragmentManager().getFragments();</div><div class=\"line\">    <span class=\"keyword\">if</span> (fragments != <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">        <span class=\"keyword\">for</span> (Fragment fragment : fragments) &#123;</div><div class=\"line\">            <span class=\"keyword\">if</span> (fragment != <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">                fragment.onRequestPermissionsResult(requestCode,permissions,grantResults);</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h2 id=\"最后：\"><a href=\"#最后：\" class=\"headerlink\" title=\"最后：\"></a>最后：</h2><p>1、上述代码已封装在一个工具类中。<a href=\"https://github.com/TomStep/PermissionsUtil\" target=\"_blank\" rel=\"external\">（有兴趣的可以在我的Github上查看）</a><br>2、当前也有比较好的权限框架：<a href=\"https://github.com/tbruyelle/RxPermissions\" target=\"_blank\" rel=\"external\">RxPermissions 基于RxJava的运行时权限检测框架</a></p>\n","excerpt":"<h2 id=\"Android6-0中的权限分类：\"><a href=\"#Android6-0中的权限分类：\" class=\"headerlink\" title=\"Android6.0中的权限分类：\"></a>Android6.0中的权限分类：</h2><p>1、普通权限（一般权限）</p>\n<blockquote>\n<p>  这些权限对于用户隐私和设备操作不会造成太多危险，系统会自动授予权限。<br>  （普通权限类型在文章最后）<br>   <strong>  用法：和之前声明权限方法相同，直接在Manifest中声明就好了。</strong> </p>\n</blockquote>\n<p>2、运行时权限（危险权限）</p>\n<blockquote>\n<p>  对于低版本来说，在Mainfest中声明了运行时权限，系统会自动授予。<br>  <em>但是在6.0以上版本时，系统会明确的让用户来决定是否授予这些权限。</em></p>\n</blockquote>\n<p>运行时权限分为9组：（每组只要有一个权限申请成功了，就默认整组权限都可以使用）<br>","more":"<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">//联系人权限组</span></div><div class=\"line\">group:android.permission-group.CONTACTS </div><div class=\"line\">    permission:android.permission.WRITE_CONTACTS</div><div class=\"line\">    permission:android.permission.GET_ACCOUNTS    </div><div class=\"line\">    permission:android.permission.READ_CONTACTS</div><div class=\"line\"><span class=\"comment\">//电话权限组</span></div><div class=\"line\">group:android.permission-group.PHONE   </div><div class=\"line\">    permission:android.permission.READ_CALL_LOG</div><div class=\"line\">    permission:android.permission.READ_PHONE_STATE </div><div class=\"line\">    permission:android.permission.CALL_PHONE</div><div class=\"line\">    permission:android.permission.WRITE_CALL_LOG</div><div class=\"line\">    permission:android.permission.USE_SIP</div><div class=\"line\">    permission:android.permission.PROCESS_OUTGOING_CALLS</div><div class=\"line\">    permission:com.android.voicemail.permission.ADD_VOICEMAIL</div><div class=\"line\"><span class=\"comment\">//日历权限组</span></div><div class=\"line\">group:android.permission-group.CALENDAR </div><div class=\"line\">    permission:android.permission.READ_CALENDAR</div><div class=\"line\">    permission:android.permission.WRITE_CALENDAR</div><div class=\"line\"><span class=\"comment\">//拍照权限组</span></div><div class=\"line\">group:android.permission-group.CAMERA  </div><div class=\"line\">    permission:android.permission.CAMERA</div><div class=\"line\"><span class=\"comment\">//传感器权限组</span></div><div class=\"line\">group:android.permission-group.SENSORS  </div><div class=\"line\">    permission:android.permission.BODY_SENSORS</div><div class=\"line\"><span class=\"comment\">//位置权限组</span></div><div class=\"line\">group:android.permission-group.LOCATION  </div><div class=\"line\">    permission:android.permission.ACCESS_FINE_LOCATION</div><div class=\"line\">    permission:android.permission.ACCESS_COARSE_LOCATION</div><div class=\"line\"><span class=\"comment\">//储存卡权限组</span></div><div class=\"line\">group:android.permission-group.STORAGE  </div><div class=\"line\">    permission:android.permission.READ_EXTERNAL_STORAGE</div><div class=\"line\">    permission:android.permission.WRITE_EXTERNAL_STORAGE</div><div class=\"line\"><span class=\"comment\">//麦克风权限组</span></div><div class=\"line\">group:android.permission-group.MICROPHONE </div><div class=\"line\">    permission:android.permission.RECORD_AUDIO</div><div class=\"line\"><span class=\"comment\">//sms卡权限组</span></div><div class=\"line\">group:android.permission-group.SMS       </div><div class=\"line\">    permission:android.permission.READ_SMS</div><div class=\"line\">    permission:android.permission.RECEIVE_WAP_PUSH</div><div class=\"line\">    permission:android.permission.RECEIVE_MMS</div><div class=\"line\">    permission:android.permission.RECEIVE_SMS</div><div class=\"line\">    permission:android.permission.SEND_SMS</div><div class=\"line\">    permission:android.permission.READ_CELL_BROADCASTS</div></pre></td></tr></table></figure></p>\n<h2 id=\"Android6-0获取权限方法：\"><a href=\"#Android6-0获取权限方法：\" class=\"headerlink\" title=\"Android6.0获取权限方法：\"></a>Android6.0获取权限方法：</h2><blockquote>\n<p>在6.0以上的系统中，允许用户关闭危险权限，同时也需要用户允许使用权限。<br>我们获取的方式：<br>    检查是否授权–&gt;请求授权–&gt;回调查看状态做相应操作</p>\n</blockquote>\n<h3 id=\"判断是否授权：\"><a href=\"#判断是否授权：\" class=\"headerlink\" title=\"判断是否授权：\"></a>判断是否授权：</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">//核对授权情况：</span></div><div class=\"line\"><span class=\"comment\">//  1、当系统版本&lt;23时，会有：</span></div><div class=\"line\"><span class=\"comment\">//      ActivityCompat.checkSelfPermission（）== PERMISSION_GRANTED</span></div><div class=\"line\"><span class=\"comment\">//  2、当系统版本&gt;=23时，会判断是否授权</span></div><div class=\"line\"><span class=\"comment\">//  3、当targetSdkVersion &lt; 23。运行在6.0版本上时会出现：</span></div><div class=\"line\"><span class=\"comment\">//      ActivityCompat.checkSelfPermission（）== PERMISSION_GRANTED</span></div><div class=\"line\">      </div><div class=\"line\">ActivityCompat.checkSelfPermission(activity, requestPermission);</div></pre></td></tr></table></figure>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">//参考网上做法：</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">selfPermissionGranted</span><span class=\"params\">(String permission)</span> </span>&#123;</div><div class=\"line\">    <span class=\"comment\">// For Android &lt; Android M, self permissions are always granted.</span></div><div class=\"line\">    <span class=\"keyword\">boolean</span> result = <span class=\"keyword\">true</span>;</div><div class=\"line\">    <span class=\"keyword\">if</span> (Build.VERSION.SDK_INT &gt;= Build.VERSION_CODES.M) &#123;</div><div class=\"line\">        <span class=\"keyword\">if</span> (targetSdkVersion &gt;= Build.VERSION_CODES.M) &#123;</div><div class=\"line\">            <span class=\"comment\">// targetSdkVersion &gt;= Android M, we can</span></div><div class=\"line\">            <span class=\"comment\">// use Context#checkSelfPermission</span></div><div class=\"line\">            result = context.checkSelfPermission(permission)</div><div class=\"line\">                    == PackageManager.PERMISSION_GRANTED;</div><div class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">            <span class=\"comment\">// targetSdkVersion &lt; Android M, we have to use PermissionChecker</span></div><div class=\"line\">            result = PermissionChecker.checkSelfPermission(context, permission)</div><div class=\"line\">                    == PermissionChecker.PERMISSION_GRANTED;</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">return</span> result;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h3 id=\"请求权限：\"><a href=\"#请求权限：\" class=\"headerlink\" title=\"请求权限：\"></a>请求权限：</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">//请求权限</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">requestPermission</span><span class=\"params\">(<span class=\"keyword\">final</span> Activity activity, <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> requestCode, PermissionUtil.PermissionGrant permissionGrant)</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">if</span> (activity == <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">        <span class=\"keyword\">return</span>;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    Log.i(TAG, <span class=\"string\">\"requestPermission requestCode:\"</span> + requestCode);</div><div class=\"line\">    <span class=\"keyword\">if</span> (requestCode &lt; <span class=\"number\">0</span> || requestCode &gt;= requestPermissions.length) &#123;</div><div class=\"line\">        Log.w(TAG, <span class=\"string\">\"requestPermission illegal requestCode:\"</span> + requestCode);</div><div class=\"line\">        <span class=\"keyword\">return</span>;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">final</span> String requestPermission = requestPermissions[requestCode];</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">//判断权限是否授予</span></div><div class=\"line\">    <span class=\"keyword\">if</span>(selfPermissionGranted(activity,requestPermission))&#123;</div><div class=\"line\">        Log.d(TAG, <span class=\"string\">\"ActivityCompat.checkSelfPermission ==== PackageManager.PERMISSION_GRANTED\"</span>);</div><div class=\"line\">        <span class=\"comment\">//已获取授权，直接外部回调，做自己想做的事</span></div><div class=\"line\">        permissionGrant.onPermissionGranted(requestCode);</div><div class=\"line\">    &#125;<span class=\"keyword\">else</span> &#123;</div><div class=\"line\">        Log.i(TAG, <span class=\"string\">\"ActivityCompat.checkSelfPermission != PackageManager.PERMISSION_GRANTED\"</span>);</div><div class=\"line\">        <span class=\"comment\">//未获取授权</span></div><div class=\"line\">        <span class=\"comment\">//判断shouldShowRequestPermissionRationale：</span></div><div class=\"line\">        <span class=\"keyword\">if</span> (ActivityCompat.shouldShowRequestPermissionRationale(activity, requestPermission)) &#123;</div><div class=\"line\">            Log.i(TAG, <span class=\"string\">\"requestPermission shouldShowRequestPermissionRationale\"</span>);</div><div class=\"line\">            shouldShowRationale(activity, requestCode, requestPermission);</div><div class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">            Log.d(TAG, <span class=\"string\">\"requestCameraPermission else\"</span>);</div><div class=\"line\">            ActivityCompat.requestPermissions(activity, <span class=\"keyword\">new</span> String[]&#123;requestPermission&#125;, requestCode);</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p><strong>对应逻辑图：</strong><br><img src=\"http://og5n67ybk.bkt.clouddn.com/android%E6%9D%83%E9%99%90%E7%94%B3%E8%AF%B7%E6%B5%81%E7%A8%8B%E5%9B%BE.jpg\"></p>\n<p><strong>主要坑点：</strong></p>\n<blockquote>\n<p>当用户选择了“不在询问”拒绝之后，再次点击功能就不会出现系统提示框了。这时我们需要自己在onRequestPermissionsResult()中捕获并且提示用户再次打开权限。</p>\n</blockquote>\n<h3 id=\"重写onRequestPermissionsResult方法：\"><a href=\"#重写onRequestPermissionsResult方法：\" class=\"headerlink\" title=\"重写onRequestPermissionsResult方法：\"></a>重写onRequestPermissionsResult方法：</h3><blockquote>\n<p>通过<br>ActivityCompat.requestPermissions(activity, new String[]{requestPermission}, requestCode);<br>最后会调用onRequestPermissionsResult()方法，其中申请的权限和相应的状态都会返回。</p>\n</blockquote>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">@Override</span></div><div class=\"line\"> <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onRequestPermissionsResult</span><span class=\"params\">(<span class=\"keyword\">int</span> requestCode, String[] permissions, <span class=\"keyword\">int</span>[] grantResults)</span> </span>&#123;</div><div class=\"line\">     <span class=\"comment\">//permissions是申请的权限</span></div><div class=\"line\">     <span class=\"comment\">//grantResults是对应权限的申请结果（用来二次判断）</span></div><div class=\"line\">     <span class=\"keyword\">super</span>.onRequestPermissionsResult(requestCode, permissions, grantResults);</div><div class=\"line\">      PermissionUtil.requestPermissionsResult(<span class=\"keyword\">this</span>,requestCode,permissions,grantResults, <span class=\"keyword\">new</span> PermissionUtil.PermissionGrant() &#123;</div><div class=\"line\">           <span class=\"meta\">@Override</span></div><div class=\"line\">           <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onPermissionGranted</span><span class=\"params\">(<span class=\"keyword\">int</span> requestCode)</span> </span>&#123;</div><div class=\"line\">               Toast.makeText(TakePhotoActivity.<span class=\"keyword\">this</span>, <span class=\"string\">\"回调后做相应的动作\"</span>, Toast.LENGTH_SHORT).show();</div><div class=\"line\">           &#125;</div><div class=\"line\">       &#125;);</div><div class=\"line\"> &#125;</div></pre></td></tr></table></figure>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div></pre></td><td class=\"code\"><pre><div class=\"line\">    <span class=\"comment\">//回调后检查权限状态 </span></div><div class=\"line\">    <span class=\"comment\">//  如果权限被用户拒绝了，再次询问用户（openSettingActivity()方法内）</span></div><div class=\"line\">    <span class=\"comment\">//  如果允许了，做自己想做事(permissionGrant.onPermissionGranted(requestCode);</span></div><div class=\"line\">)</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">requestPermissionsResult</span><span class=\"params\">(<span class=\"keyword\">final</span> Activity activity, <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> requestCode, @NonNull String[] permissions,@NonNull <span class=\"keyword\">int</span>[] grantResults, PermissionGrant permissionGrant)</span> </span>&#123;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"keyword\">if</span> (activity == <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">            <span class=\"keyword\">return</span>;</div><div class=\"line\">        &#125;</div><div class=\"line\">        Log.d(TAG, <span class=\"string\">\"requestPermissionsResult requestCode:\"</span> + requestCode);</div><div class=\"line\"></div><div class=\"line\">        <span class=\"keyword\">if</span> (requestCode == CODE_MULTI_PERMISSION) &#123;</div><div class=\"line\">            requestMultiResult(activity, permissions, grantResults, permissionGrant);</div><div class=\"line\">            <span class=\"keyword\">return</span>;</div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"keyword\">if</span> (requestCode &lt; <span class=\"number\">0</span> || requestCode &gt;= requestPermissions.length) &#123;</div><div class=\"line\">            Log.w(TAG, <span class=\"string\">\"requestPermissionsResult illegal requestCode:\"</span> + requestCode);</div><div class=\"line\">            Toast.makeText(activity, <span class=\"string\">\"illegal requestCode:\"</span> + requestCode, Toast.LENGTH_SHORT).show();</div><div class=\"line\">            <span class=\"keyword\">return</span>;</div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">        Log.i(TAG, <span class=\"string\">\"onRequestPermissionsResult requestCode:\"</span> + requestCode + <span class=\"string\">\",permissions:\"</span> + permissions.toString()</div><div class=\"line\">                + <span class=\"string\">\",grantResults:\"</span> + grantResults.toString() + <span class=\"string\">\",length:\"</span> + grantResults.length);</div><div class=\"line\"></div><div class=\"line\">        <span class=\"keyword\">if</span> (grantResults.length == <span class=\"number\">1</span> &amp;&amp; grantResults[<span class=\"number\">0</span>] == PackageManager.PERMISSION_GRANTED) &#123;</div><div class=\"line\">            Log.i(TAG, <span class=\"string\">\"onRequestPermissionsResult PERMISSION_GRANTED\"</span>);</div><div class=\"line\">            <span class=\"comment\">//TODO success, do something, can use callback</span></div><div class=\"line\">            permissionGrant.onPermissionGranted(requestCode);</div><div class=\"line\"></div><div class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">            <span class=\"comment\">//TODO hint user this permission function</span></div><div class=\"line\">            Log.i(TAG, <span class=\"string\">\"onRequestPermissionsResult PERMISSION NOT GRANTED\"</span>);</div><div class=\"line\">            <span class=\"comment\">//TODO</span></div><div class=\"line\">            String[] permissionsHint = logs;</div><div class=\"line\">            openSettingActivity(activity,permissionsHint[requestCode]);</div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">    &#125;</div></pre></td></tr></table></figure>\n<p><strong>主要坑点：</strong></p>\n<blockquote>\n<p>这里只讲了在Activity中的使用情况。在fragment中运行时权限要做特殊处理：<br>1、在Fragment中申请权限，去掉ActivityCompat.requestPermissions(activity, new String[]{requestPermission}, requestCode)。使用Fragment自带的requestPermissions()方法。<em>最后都会回调一次在activity中的onRequestPermissionsResult方法</em><br>2、如果在Fragment中嵌套Fragment，在子Fragment中使用requestPermissions方法，onRequestPermissionsResult也不会回调回来。<br><em>建议使用：getParentFragment().requestPermissions方法</em>可以回调到父类的onRequestPermissionsResult中。<br>加入下面代码可以传递到子类：</p>\n</blockquote>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\">  <span class=\"meta\">@Override</span></div><div class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onRequestPermissionsResult</span><span class=\"params\">(<span class=\"keyword\">int</span> requestCode, String[] permissions, <span class=\"keyword\">int</span>[] grantResults)</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">super</span>.onRequestPermissionsResult(requestCode, permissions, grantResults);</div><div class=\"line\">    List&lt;Fragment&gt; fragments = getChildFragmentManager().getFragments();</div><div class=\"line\">    <span class=\"keyword\">if</span> (fragments != <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">        <span class=\"keyword\">for</span> (Fragment fragment : fragments) &#123;</div><div class=\"line\">            <span class=\"keyword\">if</span> (fragment != <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">                fragment.onRequestPermissionsResult(requestCode,permissions,grantResults);</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h2 id=\"最后：\"><a href=\"#最后：\" class=\"headerlink\" title=\"最后：\"></a>最后：</h2><p>1、上述代码已封装在一个工具类中。<a href=\"https://github.com/TomStep/PermissionsUtil\">（有兴趣的可以在我的Github上查看）</a><br>2、当前也有比较好的权限框架：<a href=\"https://github.com/tbruyelle/RxPermissions\">RxPermissions 基于RxJava的运行时权限检测框架</a></p>"},{"title":"DataBinding笔记","date":"2017-03-29T02:25:54.000Z","_content":"\n>参考：\n\n  1、https://developer.android.com/topic/libraries/data-binding/index.html?hl=zh-cn#data_binding_layout_files\n\n  2、http://yanghui.name/blog/2016/02/17/data-binding-guide/\n\n这篇笔记主要用于个人梳理用。\n\n### DataBinding的作用：\n\n减少应用中逻辑以及布局所需要的“胶水代码”,适用于MVVM模式。\n\n\n<!-- more -->  \n\n---\n\n### 编译环境：\n\n注意：支持版本在Android Studio 1.3 以及之后\n\n在 build.gradle配置：\n\n```\n\n    android {\n        ....\n        dataBinding {\n            enabled = true\n        }\n    }\n\n```\n\n开启后就可以使用啦～\n\n---\n\n### DataBinding布局：\n\n```\n\n    //main_activity.xml\n    <!-- layout标签包裹 -->\n    <layout xmlns:android=\"http://schemas.android.com/apk/res/android\">\n        <!-- data -->\n        <data>\n            <variable name=\"user\" type=\"com.example.User\"/>\n        </data>\n\n        <!-- view -->\n        <LinearLayout\n           android:orientation=\"vertical\"\n           android:layout_width=\"match_parent\"\n           android:layout_height=\"match_parent\">\n\n           <TextView android:layout_width=\"wrap_content\"\n               android:layout_height=\"wrap_content\"\n               android:text=\"@{user.firstName}\"/>\n\n           <TextView android:layout_width=\"wrap_content\"\n               android:layout_height=\"wrap_content\"\n               android:text=\"@{user.lastName}\"/>\n\n       </LinearLayout>\n\n    </layout>\n\n```\n\n与传统的布局文件不同，DataBinding布局是用**layout标签**来包裹，标签内分为**data**，**view**两块。\n\n#### view部分\n\nview的部分和之前xml原本文件差不多，所以布局方式和以前是一样的。\n\n\n```\n    \n    <TextView android:layout_width=\"wrap_content\"\n            android:layout_height=\"wrap_content\"\n            android:text=\"@{user.lastName}\"/>\n\n```\n\n在布局中有个陌生的表达式：**“@{}”**，这里的意思是TextView 的文本被设置为 user中的 firstName 属性。（记住这种表达方式。）\n\n\n#### data部分\n\ndata的部分是比较陌生的\n\n```\n    \n    <data>\n        <variable name=\"user\" type=\"com.example.User\"/>\n    </data>\n\n```\n\n单看这种写法，很容易可以理解：定义一个变量user，类型是com.example.User。\n\n没错，这样就相当于拿到了一个User对象，然后就可以在布局中使用它的方法和成员变量啦。\n\n看看User类里面是什么样子的：\n\n```\n\n    //(POJO)\n    public class User {\n\n       public final String firstName;\n\n       public final String lastName;\n\n       public User(String firstName, String lastName) {\n           this.firstName = firstName;\n           this.lastName = lastName;\n       }\n    }\n\n```\n\n结合起前面的代码我们就能理解，**android:text=@{user.lastName}**的意思就是把user中的lastName值赋到text（TextView显示的文字）中。\n\n**注意：**\n    从 data binding 的角度看，pojo类和javaBeans类是一样的，所以User类也也可写成：\n\n```\n    \n    //javaBean\n    public class User {\n       private final String firstName;\n\n       private final String lastName;\n\n       public User(String firstName, String lastName) {\n           this.firstName = firstName;\n           this.lastName = lastName;\n       }\n\n       public String getFirstName() {\n           return this.firstName;\n       }\n\n       public String getLastName() {\n           return this.lastName;\n       }\n    }\n\n```\n\n***所以不用担心dataBinding的@{user.lastName}获取不到私有的lastName，它会从getLastName()方法中获取。***\n\n---\n\n\n### 绑定数据和布局\n\n在项目中完上面的代码。默认情况下，会给予布局文件生成一个Binding类，将它转换成帕斯卡命名并在名字后面接上”Binding”。（如果没有，可以按rebuild，重建项目），上面的那个布局文件叫 main_activity.xml，所以会生成一个 MainActivityBinding 类。\n\n在MainActivityBinding中会有一个setUser()方法，用于绑定user对象。\n\n```\n    \n    @Override\n    protected void onCreate(Bundle savedInstanceState) {\n       super.onCreate(savedInstanceState);\n\n       //可以用DataBindingUtil.setContentView()代替原本的setContentView()\n       MainActivityBinding binding = DataBindingUtil.setContentView(this, R.layout.main_activity);\n\n       User user = new User(\"Test\", \"User\");\n\n       //绑定数据\n       binding.setUser(user);  \n    }\n\n```\n\n**注意：**\n\n    1、DataBindingUtil.setContentView()代替原本的setContentView()方法中获取。同时获取binding对象。\n\n    2、记住一定要绑定数据，不然显示不出来。\n\n这时候运行项目就可以看见测试数据显示在界面上了。\n\n#### Binding类\n>我们这里说的Binding类是指MainActivityBinding\n\nBinding类中除了可以绑定数据，可以获取整个布局View，如果控件上设置了Id，还可以直接通过Binding类获取该控件View。\n\n\n\n```\n\n     <TextView \n        android:id=\"+id/text_view\"\n        android:layout_width=\"wrap_content\"\n        android:layout_height=\"wrap_content\"\n        android:text=\"@{user.lastName}\"/>\n\n    ...\n\n    <!-- 在activity中 -->\n    \n    //获取整个布局：\n    View view = binding.getRootView();  //可以用于需要注入布局的地方，如fragment的onCreatView()\n\n    //获取TextView\n    textView = binding.textView;    //取名会去掉下横线，使用驼峰命名\n\n```\n\n这样就不用在出现findviewById()了。\n\n**注意一个坑点，通过上面得到的binding获取控件，会得到一个Null值。我也不知道为啥**\n    \n```\n\n    MainActivityBinding binding = DataBindingUtil.setContentView(this, R.layout.main_activity);\n    \n    textView = binding.textView //textView = null\n\n\n```\n\n我们可以用其他的方式获取binding:\n\n```\n\n    //调用MainActivityBinding静态方法inflate获取\n    MainActivityBinding binding = MainActivityBinding.inflate(getLayoutInflater());\n\n```\n\n如果要在ListView和RecyclerView的adapter中使用databinding的话，可以用下面方法获取：\n\n```\n    \n    ListItemBinding binding = ListItemBinding.inflate(layoutInflater, viewGroup, false);\n    //or\n    ListItemBinding binding = DataBindingUtil.inflate(layoutInflater, R.layout.list_item, viewGroup, false);\n\n```\n\n---\n\n### 绑定事件\n>事件可以直接与函数绑定,事件属性的命名由 listener 的函数命名决定。举个例子，View.OnLongClickListener 中有一个 onLongClick() 函数，所以这个事件的对应属性就是 android:onLongClick。\n\n```\n\n    public class Handlers {\n      public void onClickFriend(View view) { ... }\n      public void onClickEnemy(View view) { ... }\n      public void onClickChanged(View view,String firstName, boolean completed){...}\n    }\n\n```\n\n```\n\n    <layout xmlns:android=\"http://schemas.android.com/apk/res/android\">\n       <data>\n           <variable name=\"handlers\" type=\"com.example.Handlers\"/>\n           <variable name=\"user\" type=\"com.example.User\"/>\n       </data>\n\n       <LinearLayout\n           android:orientation=\"vertical\"\n           android:layout_width=\"match_parent\"\n           android:layout_height=\"match_parent\">\n\n           <TextView android:layout_width=\"wrap_content\"\n               android:layout_height=\"wrap_content\"\n               android:text=\"@{user.firstName}\"\n               android:onClick=\"@{handlers::onClickFriend}\"/>\n\n           <TextView android:layout_width=\"wrap_content\"\n               android:layout_height=\"wrap_content\"\n               android:text=\"@{user.lastName}\"\n               android:onClick=\"@{(view)-> handlers.onClickEnemy}\"/>\n\n           <TextView android:layout_width=\"wrap_content\"\n               android:layout_height=\"wrap_content\"\n               android:text=\"@{user.lastName}\"\n               android:onClick=\"@{(view)-> handlers.onClickChanged(view,user.firstName,true)}\"/>\n       </LinearLayout>\n    </layout>\n\n```\n\n**绑定事件有两种方式：**\n\n如上：\n  \n```\n\n    1、方法引用\n    android:onClick=\"@{handlers::onClickFriend}\"\n    //or\n    android:onClick=\"@{handlers.onClickFriend}\"\n\n    2、监听，这种方式可以用于多个参数的情况\n    android:onClick=\"@{(view)-> handlers.onClickEnemy}\"\n    \n    //多个参数\n    android:onClick=\"@{(view)-> handlers.onClickChanged(view,user.firstName,true)}\"\n\n```\n\n上面绑定事件的方式，有时候会有局限性（可能没完全掌握吧）。有时间会利用自定义setters来做事件的绑定。（下文详细说明）\n\n---\n\n\n### 布局细节\n\n**导入方式**\n\ndata标签内可以有多个 import 标签。你可以在布局文件中像使用 Java 一样导入引用。\n\n比如直接引用公共的常量。或者静态方法\n\n```\n\n    <data>\n        <import type=\"android.view.View\"/>\n        <import type=\"com.example.MyStringUtils\"/>  \n\n        //导入变量的两种方式\n        //利用import\n        <import type=\"com.example.User\"/>\n        <variable name=\"user\"  type=\"User\"/>\n        //or\n        <variable name=\"user\"  type=\"com.example.User\"/>\n\n\n    </data>\n\n    <TextView\n       android:layout_width=\"wrap_content\"\n       android:layout_height=\"wrap_content\"\n       android:visibility=\"@{user.isAdult ? View.VISIBLE : View.GONE}\" //常量\n       android:text=\"@{MyStringUtils.capitalize(user.lastName)}\"       //静态方法\n       /> \n\n\n```\n\n1、使用静态方法或者静态常量时，不需要加variable标签，可以直接调用。\n2、变量的声明需要variable标签声明，声明后会在Binding类中生成get/set方法来调用它。\n3、一些基本类型，如：string，int，等不需要写全包名。\n\n如：\n\n```\n\n    <variable name=\"note\"  type=\"String\"/>\n\n```\n\n**当类名发生冲突时，可以使用 alias：\n**\n```\n  \n    <import type=\"android.view.View\"/>\n    <import type=\"com.example.real.estate.View\"\n            alias=\"Vista\"/>\n\n```\n\n---\n\n**Includes**\n\n在使用应用命名空间的布局中，变量可以传递到任何 include 布局中。include布局内也需要先声明变量。\n\n```\n\n    <layout xmlns:android=\"http://schemas.android.com/apk/res/android\"\n            xmlns:bind=\"http://schemas.android.com/apk/res-auto\">\n       <data>\n           <variable name=\"user\" type=\"com.example.User\"/>\n       </data>\n       <LinearLayout\n           android:orientation=\"vertical\"\n           android:layout_width=\"match_parent\"\n           android:layout_height=\"match_parent\">\n\n           <include layout=\"@layout/name\"\n               bind:user=\"@{user}\"/>\n\n           <include layout=\"@layout/contact\"\n               bind:user=\"@{user}\"/>\n\n       </LinearLayout>\n    </layout>\n\n```\n\n**注意：Data binding 不支持直接包含 merge 节点。\n**\n\n---\n\n\n**数据的双向绑定**\n\n>任何 POJO 都能用在 data binding 中，但是更改 POJO 并不会同步更新 UI。data binding 的强大之处就在于它可以让你的数据拥有更新通知的能力。这里有三种不同的数据变动通知机制，Observable 对象，observable 域，与 observable 容器类。\n当以上的 observable 对象绑定在 UI 上，数据发生变化时，UI 就会同步更新。\n\n```\n\n    private static class User extends BaseObservable {\n       private String firstName;\n       private String lastName;\n\n       @Bindable\n       public String getFirstName() {\n           return this.firstName;\n       }\n\n       @Bindable\n       public String getLastName() {\n           return this.lastName;\n       }\n\n       public void setFirstName(String firstName) {\n           this.firstName = firstName;\n           notifyPropertyChanged(BR.firstName);\n       }\n\n       public void setLastName(String lastName) {\n           this.lastName = lastName;\n           notifyPropertyChanged(BR.lastName);\n       }\n    }\n\n```\n\n只需要继承BaseObservable类，然后在getXX()方法上使用Bindable 注解，并在setXXX()方法里面实现通知notifyPropertyChanged()。就可以实现双向绑定。\n\n只需要修改数据，UI自动更新。\n\n如果数据类不多，如上，也可以用更简单的方式实现双向绑定。\n\n```\n  \n    private static class User {\n     public final ObservableField<String> firstName =\n         new ObservableField<>();\n     public final ObservableField<String> lastName =\n         new ObservableField<>();\n     public final ObservableInt age = new ObservableInt();\n  }\n\n```\n\n直接创建一个ObservableField域，然后只需要使用get set 方法，就可以修改数据和UI。\n\n*注意：*\n  当变量或者 observable 发生变动时，会在下一帧触发 binding。有时候 binding 需要马上执行，这时候可以使用 executePendingBindings())。\n\n```\n  \n    user.firstName.set(\"Google\");\n    int age = user.age.get();\n\n```\n\n---\n\n**Observable 容器类\n**\n\n>Observable 容器类允许使用 key 来获取这类数据。\n\n如：\n\n```\n\n    ObservableArrayMap<String, Object> user = new ObservableArrayMap<>();\n    user.put(\"firstName\", \"Google\");\n    user.put(\"lastName\", \"Inc.\");\n    user.put(\"age\", 17);\n\n    ...\n    <!-- 布局中 -->\n\n    <data>\n        <import type=\"android.databinding.ObservableMap\"/>\n        <variable name=\"user\" type=\"ObservableMap&lt;String, Object>\"/> //注意这个类型的声明。\n    </data>\n    …\n    <TextView\n       android:text='@{user[\"lastName\"]}'\n       android:layout_width=\"wrap_content\"\n       android:layout_height=\"wrap_content\"/>\n    <TextView\n       android:text='@{String.valueOf(1 + (Integer)user[\"age\"])}'\n       android:layout_width=\"wrap_content\"\n       android:layout_height=\"wrap_content\"/>\n\n```\n\n**注：这里的声明。**\n\n当然也可以用List\n\n```\n  \n    ObservableArrayList<Object> user = new ObservableArrayList<>();\n    user.add(\"Google\");\n    user.add(\"Inc.\");\n    user.add(17);\n\n    ...\n    <!-- 布局文件 -->\n\n    <data>\n      <import type=\"android.databinding.ObservableList\"/>\n      <import type=\"com.example.my.app.Fields\"/>\n      <variable name=\"user\" type=\"ObservableList&lt;Object>\"/>\n    </data>\n  \n      <TextView\n         android:text='@{user[Fields.LAST_NAME]}'\n         android:layout_width=\"wrap_content\"\n         android:layout_height=\"wrap_content\"/>\n\n      <TextView\n         android:text='@{String.valueOf(1 + (Integer)user[Fields.AGE])}'\n         android:layout_width=\"wrap_content\"\n         android:layout_height=\"wrap_content\"/>\n\n```\n\n---\n\n**表达式语言**\n\n>从上面代码也可以看到，databinding允许使用一些表达式语言。\n\n* 数学计算： + - ／ * %\n* 字符串连接： +\n* 逻辑符号： && ||\n* 二进制：& | ！\n* 比较：== > < >= <=\n* instanceof\n* 组：()\n* null\n* 数字\n* 类型转换\n* 函数调用\n* 域存取\n* 三元运算符 ？：\n\n```\n\n    android:text=\"@{String.valueOf(index + 1)}\"\n    android:visibility=\"@{age < 13 ? View.GONE : View.VISIBLE}\"\n    android:transitionName='@{\"image_\" + id}'\n\n```\n \n*null合并运算符：*\n  Null合并运算符(??)会在非 null 的时候选择左边的操作，反之选择右边。\n  可以用于避免NullPointerException。\n\n\n```\n\n  android:text=\"@{user.displayName ?? user.lastName}\"\n  \n  //等同于\n  android:text=\"@{user.displayName != null ? user.displayName : user.lastName}\"\n\n```\n\n*通用的容器类：*\n  数组，lists，sparse lists，和 map，可以用 [] 操作符来存取\n\n```\n\n    <data>\n        <import type=\"android.util.SparseArray\"/>\n        <import type=\"java.util.Map\"/>\n        <import type=\"java.util.List\"/>\n        <variable name=\"list\" type=\"List&lt;String>\"/>\n        <variable name=\"sparse\" type=\"SparseArray&lt;String>\"/>\n        <variable name=\"map\" type=\"Map&lt;String, String>\"/>\n        <variable name=\"index\" type=\"int\"/>\n        <variable name=\"key\" type=\"String\"/>\n    </data>\n      …\n      android:text=\"@{list[index]}\"\n      …\n      android:text=\"@{sparse[index]}\"\n      …\n      android:text=\"@{map[key]}\"\n      …\n      android:text='@{map[\"firstName\"]}'  //这里用单引号包裹\n\n```\n\n*注：*\n  1、注意这个里的声明\n  2、当@{}内部需要用字符串时，外面可以用单引号包裹。\n\n---\n\n**引用资源**\n>也可以在表达式中使用普通的语法来引用资源：\n\n```\n\n    android:padding=\"@{large? @dimen/largePadding : @dimen/smallPadding}\"\n\n```\n\n*字符串格式化可以这样实现：*\n\n```\n\n    android:text=\"@{@string/nameFormat(firstName, lastName)}\"\n\n    ...\n    <!-- 资源文件 -->\n\n    <string name=\"nameFormat\">%s, %s</string>\n\n```\n\n\n|Class | Listener Setter Attribute|\n| --------   | ----- |\n|String[] | @array  @stringArray|\n|int[]| @array  @intArray|\n|TypedArray  |@array  @typedArray|\n|Animator | @animator @animator|\n|StateListAnimator | @animator @stateListAnimator|\n|color int| @color  @color|\n|ColorStateList | @color  @colorStateList|\n\n\n----\n\n\n### 高级Binding\n\n#### 属性Setter\n>当绑定数据发生变动时，生成的 binding 类必须根据 binding 表达式调用 View 的 setter 函数。Data binding 框架内置了几种自定义赋值的方法。\n\n**自动Setter**\n>对一个 attribute 来说，data binding 会尝试寻找对应的 setAttribute 函数。属性的命名空间不会对这个过程产生影响，只有属性的命名才是决定因素。\n\n举个例子，针对一个与 TextView 的 android:text 绑定的表达式，data binding会自动寻找 setText(String) 函数。如果表达式返回值为 int 类型， data binding则会寻找 setText(int) 函数。所以需要小心处理函数的返回值类型，必要的时候使用强制类型转换。需要注意的是，data binding 在对应名称的属性不存在的时候也能继续工作。你可以轻而易举地使用 data binding 为任何 setter “创建” 属性。举个例子，support 库中的 DrawerLayout 并没有任何属性，但是有很多 setter，所以你可以使用自动 setter 的特性来调用这些函数。\n\n```\n\n    <android.support.v4.widget.DrawerLayout\n      android:layout_width=\"wrap_content\"\n      android:layout_height=\"wrap_content\"\n      app:scrimColor=\"@{@color/scrim}\"\n      app:drawerListener=\"@{fragment.drawerListener}\"/>\n\n```\n\n**自定义Setter**\n>一些属性需要自定义 setter 逻辑。例如，目前没有与 android:paddingLeft 对应的 setter，只有一个 setPadding(left, top, right, bottom) 函数。结合静态 binding adapter 函数与 BindingAdapter 注解可以让开发者自定义属性 setter。\n\n***这个特别有用！！***\n\n例如，这是一个 paddingLeft 的自定义 setter：\n\n```\n\n    @BindingAdapter(\"android:paddingLeft\")\n    public static void setPaddingLeft(View view, int padding) {\n       view.setPadding(padding,\n                       view.getPaddingTop(),\n                       view.getPaddingRight(),\n                       view.getPaddingBottom());\n    }\n\n```\n\n一个 loader 可以在非主线程加载图片:\n\n```\n\n    @BindingAdapter({\"bind:imageUrl\", \"bind:error\"})\n    public static void loadImage(ImageView view, String url, Drawable error) {\n       Picasso.with(view.getContext()).load(url).error(error).into(view);\n    }\n\n    <!-- 布局文件 -->\n    <ImageView app:imageUrl=“@{venue.imageUrl}”\n      app:error=“@{@drawable/venueError}”/>\n```\n\n也可以用于事件的传递：\n\n```\n\n    @BindingAdapter(\"android:onLayoutChange\")\n    public static void setOnLayoutChangeListener(View view, View.OnLayoutChangeListener oldValue,\n           View.OnLayoutChangeListener newValue) {\n        if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.HONEYCOMB) {\n            if (oldValue != null) {\n                view.removeOnLayoutChangeListener(oldValue);\n            }\n            if (newValue != null) {\n                view.addOnLayoutChangeListener(newValue);\n            }\n        }\n    }\n\n```\n\n\n当 listener 内置多个函数时，必须分割成多个 listener。例如，View.OnAttachStateChangeListener 内置两个函数：onViewAttachedToWindow()) 与 onViewDetachedFromWindow())。在这里必须为两个不同的属性创建不同的接口。\n\n```\n    //创建接口，注解上了HONEYCOMB_MR1以上可用\n    @TargetApi(VERSION_CODES.HONEYCOMB_MR1)\n    public interface OnViewDetachedFromWindow {\n        void onViewDetachedFromWindow(View v);\n    }\n\n    @TargetApi(VERSION_CODES.HONEYCOMB_MR1)\n    public interface OnViewAttachedToWindow {\n        void onViewAttachedToWindow(View v);\n    }\n\n```\n\n设置不同的使用方式\n\n```\n\n    @BindingAdapter(\"android:onViewAttachedToWindow\")\n    public static void setListener(View view, OnViewAttachedToWindow attached) {\n        setListener(view, null, attached);\n    }\n\n    @BindingAdapter(\"android:onViewDetachedFromWindow\")\n    public static void setListener(View view, OnViewDetachedFromWindow detached) {\n        setListener(view, detached, null);\n    }\n\n    @BindingAdapter({\"android:onViewDetachedFromWindow\", \"android:onViewAttachedToWindow\"})\n    public static void setListener(View view, final OnViewDetachedFromWindow detach,\n            final OnViewAttachedToWindow attach) {\n        if (VERSION.SDK_INT >= VERSION_CODES.HONEYCOMB_MR1) {\n            final OnAttachStateChangeListener newListener;\n            if (detach == null && attach == null) {\n                newListener = null;\n            } else {\n                newListener = new OnAttachStateChangeListener() {\n                    @Override\n                    public void onViewAttachedToWindow(View v) {\n                        if (attach != null) {\n                            attach.onViewAttachedToWindow(v);\n                        }\n                    }\n\n                    @Override\n                    public void onViewDetachedFromWindow(View v) {\n                        if (detach != null) {\n                            detach.onViewDetachedFromWindow(v);\n                        }\n                    }\n                };\n            }\n\n            //获取旧的监听器\n            final OnAttachStateChangeListener oldListener = ListenerUtil.trackListener(view,\n                    newListener, R.id.onAttachStateChangeListener);\n\n            //移除旧的监听器\n            if (oldListener != null) {\n                view.removeOnAttachStateChangeListener(oldListener);\n            }\n\n            //重新设置监听器\n            if (newListener != null) {\n                view.addOnAttachStateChangeListener(newListener);\n            }\n        }\n    }\n\n```\n\n**注意：对于listener 内置多个函数时，可以用上面官方给的方案解决。\n**\n\n\n\n\n\n\n\n","source":"_posts/DataBinding笔记.md","raw":"---\ntitle: DataBinding笔记\ndate: 2017-03-29 10:25:54\ntags: [Android]\n---\n\n>参考：\n\n  1、https://developer.android.com/topic/libraries/data-binding/index.html?hl=zh-cn#data_binding_layout_files\n\n  2、http://yanghui.name/blog/2016/02/17/data-binding-guide/\n\n这篇笔记主要用于个人梳理用。\n\n### DataBinding的作用：\n\n减少应用中逻辑以及布局所需要的“胶水代码”,适用于MVVM模式。\n\n\n<!-- more -->  \n\n---\n\n### 编译环境：\n\n注意：支持版本在Android Studio 1.3 以及之后\n\n在 build.gradle配置：\n\n```\n\n    android {\n        ....\n        dataBinding {\n            enabled = true\n        }\n    }\n\n```\n\n开启后就可以使用啦～\n\n---\n\n### DataBinding布局：\n\n```\n\n    //main_activity.xml\n    <!-- layout标签包裹 -->\n    <layout xmlns:android=\"http://schemas.android.com/apk/res/android\">\n        <!-- data -->\n        <data>\n            <variable name=\"user\" type=\"com.example.User\"/>\n        </data>\n\n        <!-- view -->\n        <LinearLayout\n           android:orientation=\"vertical\"\n           android:layout_width=\"match_parent\"\n           android:layout_height=\"match_parent\">\n\n           <TextView android:layout_width=\"wrap_content\"\n               android:layout_height=\"wrap_content\"\n               android:text=\"@{user.firstName}\"/>\n\n           <TextView android:layout_width=\"wrap_content\"\n               android:layout_height=\"wrap_content\"\n               android:text=\"@{user.lastName}\"/>\n\n       </LinearLayout>\n\n    </layout>\n\n```\n\n与传统的布局文件不同，DataBinding布局是用**layout标签**来包裹，标签内分为**data**，**view**两块。\n\n#### view部分\n\nview的部分和之前xml原本文件差不多，所以布局方式和以前是一样的。\n\n\n```\n    \n    <TextView android:layout_width=\"wrap_content\"\n            android:layout_height=\"wrap_content\"\n            android:text=\"@{user.lastName}\"/>\n\n```\n\n在布局中有个陌生的表达式：**“@{}”**，这里的意思是TextView 的文本被设置为 user中的 firstName 属性。（记住这种表达方式。）\n\n\n#### data部分\n\ndata的部分是比较陌生的\n\n```\n    \n    <data>\n        <variable name=\"user\" type=\"com.example.User\"/>\n    </data>\n\n```\n\n单看这种写法，很容易可以理解：定义一个变量user，类型是com.example.User。\n\n没错，这样就相当于拿到了一个User对象，然后就可以在布局中使用它的方法和成员变量啦。\n\n看看User类里面是什么样子的：\n\n```\n\n    //(POJO)\n    public class User {\n\n       public final String firstName;\n\n       public final String lastName;\n\n       public User(String firstName, String lastName) {\n           this.firstName = firstName;\n           this.lastName = lastName;\n       }\n    }\n\n```\n\n结合起前面的代码我们就能理解，**android:text=@{user.lastName}**的意思就是把user中的lastName值赋到text（TextView显示的文字）中。\n\n**注意：**\n    从 data binding 的角度看，pojo类和javaBeans类是一样的，所以User类也也可写成：\n\n```\n    \n    //javaBean\n    public class User {\n       private final String firstName;\n\n       private final String lastName;\n\n       public User(String firstName, String lastName) {\n           this.firstName = firstName;\n           this.lastName = lastName;\n       }\n\n       public String getFirstName() {\n           return this.firstName;\n       }\n\n       public String getLastName() {\n           return this.lastName;\n       }\n    }\n\n```\n\n***所以不用担心dataBinding的@{user.lastName}获取不到私有的lastName，它会从getLastName()方法中获取。***\n\n---\n\n\n### 绑定数据和布局\n\n在项目中完上面的代码。默认情况下，会给予布局文件生成一个Binding类，将它转换成帕斯卡命名并在名字后面接上”Binding”。（如果没有，可以按rebuild，重建项目），上面的那个布局文件叫 main_activity.xml，所以会生成一个 MainActivityBinding 类。\n\n在MainActivityBinding中会有一个setUser()方法，用于绑定user对象。\n\n```\n    \n    @Override\n    protected void onCreate(Bundle savedInstanceState) {\n       super.onCreate(savedInstanceState);\n\n       //可以用DataBindingUtil.setContentView()代替原本的setContentView()\n       MainActivityBinding binding = DataBindingUtil.setContentView(this, R.layout.main_activity);\n\n       User user = new User(\"Test\", \"User\");\n\n       //绑定数据\n       binding.setUser(user);  \n    }\n\n```\n\n**注意：**\n\n    1、DataBindingUtil.setContentView()代替原本的setContentView()方法中获取。同时获取binding对象。\n\n    2、记住一定要绑定数据，不然显示不出来。\n\n这时候运行项目就可以看见测试数据显示在界面上了。\n\n#### Binding类\n>我们这里说的Binding类是指MainActivityBinding\n\nBinding类中除了可以绑定数据，可以获取整个布局View，如果控件上设置了Id，还可以直接通过Binding类获取该控件View。\n\n\n\n```\n\n     <TextView \n        android:id=\"+id/text_view\"\n        android:layout_width=\"wrap_content\"\n        android:layout_height=\"wrap_content\"\n        android:text=\"@{user.lastName}\"/>\n\n    ...\n\n    <!-- 在activity中 -->\n    \n    //获取整个布局：\n    View view = binding.getRootView();  //可以用于需要注入布局的地方，如fragment的onCreatView()\n\n    //获取TextView\n    textView = binding.textView;    //取名会去掉下横线，使用驼峰命名\n\n```\n\n这样就不用在出现findviewById()了。\n\n**注意一个坑点，通过上面得到的binding获取控件，会得到一个Null值。我也不知道为啥**\n    \n```\n\n    MainActivityBinding binding = DataBindingUtil.setContentView(this, R.layout.main_activity);\n    \n    textView = binding.textView //textView = null\n\n\n```\n\n我们可以用其他的方式获取binding:\n\n```\n\n    //调用MainActivityBinding静态方法inflate获取\n    MainActivityBinding binding = MainActivityBinding.inflate(getLayoutInflater());\n\n```\n\n如果要在ListView和RecyclerView的adapter中使用databinding的话，可以用下面方法获取：\n\n```\n    \n    ListItemBinding binding = ListItemBinding.inflate(layoutInflater, viewGroup, false);\n    //or\n    ListItemBinding binding = DataBindingUtil.inflate(layoutInflater, R.layout.list_item, viewGroup, false);\n\n```\n\n---\n\n### 绑定事件\n>事件可以直接与函数绑定,事件属性的命名由 listener 的函数命名决定。举个例子，View.OnLongClickListener 中有一个 onLongClick() 函数，所以这个事件的对应属性就是 android:onLongClick。\n\n```\n\n    public class Handlers {\n      public void onClickFriend(View view) { ... }\n      public void onClickEnemy(View view) { ... }\n      public void onClickChanged(View view,String firstName, boolean completed){...}\n    }\n\n```\n\n```\n\n    <layout xmlns:android=\"http://schemas.android.com/apk/res/android\">\n       <data>\n           <variable name=\"handlers\" type=\"com.example.Handlers\"/>\n           <variable name=\"user\" type=\"com.example.User\"/>\n       </data>\n\n       <LinearLayout\n           android:orientation=\"vertical\"\n           android:layout_width=\"match_parent\"\n           android:layout_height=\"match_parent\">\n\n           <TextView android:layout_width=\"wrap_content\"\n               android:layout_height=\"wrap_content\"\n               android:text=\"@{user.firstName}\"\n               android:onClick=\"@{handlers::onClickFriend}\"/>\n\n           <TextView android:layout_width=\"wrap_content\"\n               android:layout_height=\"wrap_content\"\n               android:text=\"@{user.lastName}\"\n               android:onClick=\"@{(view)-> handlers.onClickEnemy}\"/>\n\n           <TextView android:layout_width=\"wrap_content\"\n               android:layout_height=\"wrap_content\"\n               android:text=\"@{user.lastName}\"\n               android:onClick=\"@{(view)-> handlers.onClickChanged(view,user.firstName,true)}\"/>\n       </LinearLayout>\n    </layout>\n\n```\n\n**绑定事件有两种方式：**\n\n如上：\n  \n```\n\n    1、方法引用\n    android:onClick=\"@{handlers::onClickFriend}\"\n    //or\n    android:onClick=\"@{handlers.onClickFriend}\"\n\n    2、监听，这种方式可以用于多个参数的情况\n    android:onClick=\"@{(view)-> handlers.onClickEnemy}\"\n    \n    //多个参数\n    android:onClick=\"@{(view)-> handlers.onClickChanged(view,user.firstName,true)}\"\n\n```\n\n上面绑定事件的方式，有时候会有局限性（可能没完全掌握吧）。有时间会利用自定义setters来做事件的绑定。（下文详细说明）\n\n---\n\n\n### 布局细节\n\n**导入方式**\n\ndata标签内可以有多个 import 标签。你可以在布局文件中像使用 Java 一样导入引用。\n\n比如直接引用公共的常量。或者静态方法\n\n```\n\n    <data>\n        <import type=\"android.view.View\"/>\n        <import type=\"com.example.MyStringUtils\"/>  \n\n        //导入变量的两种方式\n        //利用import\n        <import type=\"com.example.User\"/>\n        <variable name=\"user\"  type=\"User\"/>\n        //or\n        <variable name=\"user\"  type=\"com.example.User\"/>\n\n\n    </data>\n\n    <TextView\n       android:layout_width=\"wrap_content\"\n       android:layout_height=\"wrap_content\"\n       android:visibility=\"@{user.isAdult ? View.VISIBLE : View.GONE}\" //常量\n       android:text=\"@{MyStringUtils.capitalize(user.lastName)}\"       //静态方法\n       /> \n\n\n```\n\n1、使用静态方法或者静态常量时，不需要加variable标签，可以直接调用。\n2、变量的声明需要variable标签声明，声明后会在Binding类中生成get/set方法来调用它。\n3、一些基本类型，如：string，int，等不需要写全包名。\n\n如：\n\n```\n\n    <variable name=\"note\"  type=\"String\"/>\n\n```\n\n**当类名发生冲突时，可以使用 alias：\n**\n```\n  \n    <import type=\"android.view.View\"/>\n    <import type=\"com.example.real.estate.View\"\n            alias=\"Vista\"/>\n\n```\n\n---\n\n**Includes**\n\n在使用应用命名空间的布局中，变量可以传递到任何 include 布局中。include布局内也需要先声明变量。\n\n```\n\n    <layout xmlns:android=\"http://schemas.android.com/apk/res/android\"\n            xmlns:bind=\"http://schemas.android.com/apk/res-auto\">\n       <data>\n           <variable name=\"user\" type=\"com.example.User\"/>\n       </data>\n       <LinearLayout\n           android:orientation=\"vertical\"\n           android:layout_width=\"match_parent\"\n           android:layout_height=\"match_parent\">\n\n           <include layout=\"@layout/name\"\n               bind:user=\"@{user}\"/>\n\n           <include layout=\"@layout/contact\"\n               bind:user=\"@{user}\"/>\n\n       </LinearLayout>\n    </layout>\n\n```\n\n**注意：Data binding 不支持直接包含 merge 节点。\n**\n\n---\n\n\n**数据的双向绑定**\n\n>任何 POJO 都能用在 data binding 中，但是更改 POJO 并不会同步更新 UI。data binding 的强大之处就在于它可以让你的数据拥有更新通知的能力。这里有三种不同的数据变动通知机制，Observable 对象，observable 域，与 observable 容器类。\n当以上的 observable 对象绑定在 UI 上，数据发生变化时，UI 就会同步更新。\n\n```\n\n    private static class User extends BaseObservable {\n       private String firstName;\n       private String lastName;\n\n       @Bindable\n       public String getFirstName() {\n           return this.firstName;\n       }\n\n       @Bindable\n       public String getLastName() {\n           return this.lastName;\n       }\n\n       public void setFirstName(String firstName) {\n           this.firstName = firstName;\n           notifyPropertyChanged(BR.firstName);\n       }\n\n       public void setLastName(String lastName) {\n           this.lastName = lastName;\n           notifyPropertyChanged(BR.lastName);\n       }\n    }\n\n```\n\n只需要继承BaseObservable类，然后在getXX()方法上使用Bindable 注解，并在setXXX()方法里面实现通知notifyPropertyChanged()。就可以实现双向绑定。\n\n只需要修改数据，UI自动更新。\n\n如果数据类不多，如上，也可以用更简单的方式实现双向绑定。\n\n```\n  \n    private static class User {\n     public final ObservableField<String> firstName =\n         new ObservableField<>();\n     public final ObservableField<String> lastName =\n         new ObservableField<>();\n     public final ObservableInt age = new ObservableInt();\n  }\n\n```\n\n直接创建一个ObservableField域，然后只需要使用get set 方法，就可以修改数据和UI。\n\n*注意：*\n  当变量或者 observable 发生变动时，会在下一帧触发 binding。有时候 binding 需要马上执行，这时候可以使用 executePendingBindings())。\n\n```\n  \n    user.firstName.set(\"Google\");\n    int age = user.age.get();\n\n```\n\n---\n\n**Observable 容器类\n**\n\n>Observable 容器类允许使用 key 来获取这类数据。\n\n如：\n\n```\n\n    ObservableArrayMap<String, Object> user = new ObservableArrayMap<>();\n    user.put(\"firstName\", \"Google\");\n    user.put(\"lastName\", \"Inc.\");\n    user.put(\"age\", 17);\n\n    ...\n    <!-- 布局中 -->\n\n    <data>\n        <import type=\"android.databinding.ObservableMap\"/>\n        <variable name=\"user\" type=\"ObservableMap&lt;String, Object>\"/> //注意这个类型的声明。\n    </data>\n    …\n    <TextView\n       android:text='@{user[\"lastName\"]}'\n       android:layout_width=\"wrap_content\"\n       android:layout_height=\"wrap_content\"/>\n    <TextView\n       android:text='@{String.valueOf(1 + (Integer)user[\"age\"])}'\n       android:layout_width=\"wrap_content\"\n       android:layout_height=\"wrap_content\"/>\n\n```\n\n**注：这里的声明。**\n\n当然也可以用List\n\n```\n  \n    ObservableArrayList<Object> user = new ObservableArrayList<>();\n    user.add(\"Google\");\n    user.add(\"Inc.\");\n    user.add(17);\n\n    ...\n    <!-- 布局文件 -->\n\n    <data>\n      <import type=\"android.databinding.ObservableList\"/>\n      <import type=\"com.example.my.app.Fields\"/>\n      <variable name=\"user\" type=\"ObservableList&lt;Object>\"/>\n    </data>\n  \n      <TextView\n         android:text='@{user[Fields.LAST_NAME]}'\n         android:layout_width=\"wrap_content\"\n         android:layout_height=\"wrap_content\"/>\n\n      <TextView\n         android:text='@{String.valueOf(1 + (Integer)user[Fields.AGE])}'\n         android:layout_width=\"wrap_content\"\n         android:layout_height=\"wrap_content\"/>\n\n```\n\n---\n\n**表达式语言**\n\n>从上面代码也可以看到，databinding允许使用一些表达式语言。\n\n* 数学计算： + - ／ * %\n* 字符串连接： +\n* 逻辑符号： && ||\n* 二进制：& | ！\n* 比较：== > < >= <=\n* instanceof\n* 组：()\n* null\n* 数字\n* 类型转换\n* 函数调用\n* 域存取\n* 三元运算符 ？：\n\n```\n\n    android:text=\"@{String.valueOf(index + 1)}\"\n    android:visibility=\"@{age < 13 ? View.GONE : View.VISIBLE}\"\n    android:transitionName='@{\"image_\" + id}'\n\n```\n \n*null合并运算符：*\n  Null合并运算符(??)会在非 null 的时候选择左边的操作，反之选择右边。\n  可以用于避免NullPointerException。\n\n\n```\n\n  android:text=\"@{user.displayName ?? user.lastName}\"\n  \n  //等同于\n  android:text=\"@{user.displayName != null ? user.displayName : user.lastName}\"\n\n```\n\n*通用的容器类：*\n  数组，lists，sparse lists，和 map，可以用 [] 操作符来存取\n\n```\n\n    <data>\n        <import type=\"android.util.SparseArray\"/>\n        <import type=\"java.util.Map\"/>\n        <import type=\"java.util.List\"/>\n        <variable name=\"list\" type=\"List&lt;String>\"/>\n        <variable name=\"sparse\" type=\"SparseArray&lt;String>\"/>\n        <variable name=\"map\" type=\"Map&lt;String, String>\"/>\n        <variable name=\"index\" type=\"int\"/>\n        <variable name=\"key\" type=\"String\"/>\n    </data>\n      …\n      android:text=\"@{list[index]}\"\n      …\n      android:text=\"@{sparse[index]}\"\n      …\n      android:text=\"@{map[key]}\"\n      …\n      android:text='@{map[\"firstName\"]}'  //这里用单引号包裹\n\n```\n\n*注：*\n  1、注意这个里的声明\n  2、当@{}内部需要用字符串时，外面可以用单引号包裹。\n\n---\n\n**引用资源**\n>也可以在表达式中使用普通的语法来引用资源：\n\n```\n\n    android:padding=\"@{large? @dimen/largePadding : @dimen/smallPadding}\"\n\n```\n\n*字符串格式化可以这样实现：*\n\n```\n\n    android:text=\"@{@string/nameFormat(firstName, lastName)}\"\n\n    ...\n    <!-- 资源文件 -->\n\n    <string name=\"nameFormat\">%s, %s</string>\n\n```\n\n\n|Class | Listener Setter Attribute|\n| --------   | ----- |\n|String[] | @array  @stringArray|\n|int[]| @array  @intArray|\n|TypedArray  |@array  @typedArray|\n|Animator | @animator @animator|\n|StateListAnimator | @animator @stateListAnimator|\n|color int| @color  @color|\n|ColorStateList | @color  @colorStateList|\n\n\n----\n\n\n### 高级Binding\n\n#### 属性Setter\n>当绑定数据发生变动时，生成的 binding 类必须根据 binding 表达式调用 View 的 setter 函数。Data binding 框架内置了几种自定义赋值的方法。\n\n**自动Setter**\n>对一个 attribute 来说，data binding 会尝试寻找对应的 setAttribute 函数。属性的命名空间不会对这个过程产生影响，只有属性的命名才是决定因素。\n\n举个例子，针对一个与 TextView 的 android:text 绑定的表达式，data binding会自动寻找 setText(String) 函数。如果表达式返回值为 int 类型， data binding则会寻找 setText(int) 函数。所以需要小心处理函数的返回值类型，必要的时候使用强制类型转换。需要注意的是，data binding 在对应名称的属性不存在的时候也能继续工作。你可以轻而易举地使用 data binding 为任何 setter “创建” 属性。举个例子，support 库中的 DrawerLayout 并没有任何属性，但是有很多 setter，所以你可以使用自动 setter 的特性来调用这些函数。\n\n```\n\n    <android.support.v4.widget.DrawerLayout\n      android:layout_width=\"wrap_content\"\n      android:layout_height=\"wrap_content\"\n      app:scrimColor=\"@{@color/scrim}\"\n      app:drawerListener=\"@{fragment.drawerListener}\"/>\n\n```\n\n**自定义Setter**\n>一些属性需要自定义 setter 逻辑。例如，目前没有与 android:paddingLeft 对应的 setter，只有一个 setPadding(left, top, right, bottom) 函数。结合静态 binding adapter 函数与 BindingAdapter 注解可以让开发者自定义属性 setter。\n\n***这个特别有用！！***\n\n例如，这是一个 paddingLeft 的自定义 setter：\n\n```\n\n    @BindingAdapter(\"android:paddingLeft\")\n    public static void setPaddingLeft(View view, int padding) {\n       view.setPadding(padding,\n                       view.getPaddingTop(),\n                       view.getPaddingRight(),\n                       view.getPaddingBottom());\n    }\n\n```\n\n一个 loader 可以在非主线程加载图片:\n\n```\n\n    @BindingAdapter({\"bind:imageUrl\", \"bind:error\"})\n    public static void loadImage(ImageView view, String url, Drawable error) {\n       Picasso.with(view.getContext()).load(url).error(error).into(view);\n    }\n\n    <!-- 布局文件 -->\n    <ImageView app:imageUrl=“@{venue.imageUrl}”\n      app:error=“@{@drawable/venueError}”/>\n```\n\n也可以用于事件的传递：\n\n```\n\n    @BindingAdapter(\"android:onLayoutChange\")\n    public static void setOnLayoutChangeListener(View view, View.OnLayoutChangeListener oldValue,\n           View.OnLayoutChangeListener newValue) {\n        if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.HONEYCOMB) {\n            if (oldValue != null) {\n                view.removeOnLayoutChangeListener(oldValue);\n            }\n            if (newValue != null) {\n                view.addOnLayoutChangeListener(newValue);\n            }\n        }\n    }\n\n```\n\n\n当 listener 内置多个函数时，必须分割成多个 listener。例如，View.OnAttachStateChangeListener 内置两个函数：onViewAttachedToWindow()) 与 onViewDetachedFromWindow())。在这里必须为两个不同的属性创建不同的接口。\n\n```\n    //创建接口，注解上了HONEYCOMB_MR1以上可用\n    @TargetApi(VERSION_CODES.HONEYCOMB_MR1)\n    public interface OnViewDetachedFromWindow {\n        void onViewDetachedFromWindow(View v);\n    }\n\n    @TargetApi(VERSION_CODES.HONEYCOMB_MR1)\n    public interface OnViewAttachedToWindow {\n        void onViewAttachedToWindow(View v);\n    }\n\n```\n\n设置不同的使用方式\n\n```\n\n    @BindingAdapter(\"android:onViewAttachedToWindow\")\n    public static void setListener(View view, OnViewAttachedToWindow attached) {\n        setListener(view, null, attached);\n    }\n\n    @BindingAdapter(\"android:onViewDetachedFromWindow\")\n    public static void setListener(View view, OnViewDetachedFromWindow detached) {\n        setListener(view, detached, null);\n    }\n\n    @BindingAdapter({\"android:onViewDetachedFromWindow\", \"android:onViewAttachedToWindow\"})\n    public static void setListener(View view, final OnViewDetachedFromWindow detach,\n            final OnViewAttachedToWindow attach) {\n        if (VERSION.SDK_INT >= VERSION_CODES.HONEYCOMB_MR1) {\n            final OnAttachStateChangeListener newListener;\n            if (detach == null && attach == null) {\n                newListener = null;\n            } else {\n                newListener = new OnAttachStateChangeListener() {\n                    @Override\n                    public void onViewAttachedToWindow(View v) {\n                        if (attach != null) {\n                            attach.onViewAttachedToWindow(v);\n                        }\n                    }\n\n                    @Override\n                    public void onViewDetachedFromWindow(View v) {\n                        if (detach != null) {\n                            detach.onViewDetachedFromWindow(v);\n                        }\n                    }\n                };\n            }\n\n            //获取旧的监听器\n            final OnAttachStateChangeListener oldListener = ListenerUtil.trackListener(view,\n                    newListener, R.id.onAttachStateChangeListener);\n\n            //移除旧的监听器\n            if (oldListener != null) {\n                view.removeOnAttachStateChangeListener(oldListener);\n            }\n\n            //重新设置监听器\n            if (newListener != null) {\n                view.addOnAttachStateChangeListener(newListener);\n            }\n        }\n    }\n\n```\n\n**注意：对于listener 内置多个函数时，可以用上面官方给的方案解决。\n**\n\n\n\n\n\n\n\n","slug":"DataBinding笔记","published":1,"updated":"2017-03-29T15:51:22.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj0v5msvk000hx5ypxipcjd97","content":"<blockquote>\n<p>参考：</p>\n</blockquote>\n<p>  1、<a href=\"https://developer.android.com/topic/libraries/data-binding/index.html?hl=zh-cn#data_binding_layout_files\" target=\"_blank\" rel=\"external\">https://developer.android.com/topic/libraries/data-binding/index.html?hl=zh-cn#data_binding_layout_files</a></p>\n<p>  2、<a href=\"http://yanghui.name/blog/2016/02/17/data-binding-guide/\" target=\"_blank\" rel=\"external\">http://yanghui.name/blog/2016/02/17/data-binding-guide/</a></p>\n<p>这篇笔记主要用于个人梳理用。</p>\n<h3 id=\"DataBinding的作用：\"><a href=\"#DataBinding的作用：\" class=\"headerlink\" title=\"DataBinding的作用：\"></a>DataBinding的作用：</h3><p>减少应用中逻辑以及布局所需要的“胶水代码”,适用于MVVM模式。</p>\n<a id=\"more\"></a>  \n<hr>\n<h3 id=\"编译环境：\"><a href=\"#编译环境：\" class=\"headerlink\" title=\"编译环境：\"></a>编译环境：</h3><p>注意：支持版本在Android Studio 1.3 以及之后</p>\n<p>在 build.gradle配置：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\">android &#123;</div><div class=\"line\">    ....</div><div class=\"line\">    dataBinding &#123;</div><div class=\"line\">        enabled = true</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>开启后就可以使用啦～</p>\n<hr>\n<h3 id=\"DataBinding布局：\"><a href=\"#DataBinding布局：\" class=\"headerlink\" title=\"DataBinding布局：\"></a>DataBinding布局：</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\">//main_activity.xml</div><div class=\"line\">&lt;!-- layout标签包裹 --&gt;</div><div class=\"line\">&lt;layout xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;&gt;</div><div class=\"line\">    &lt;!-- data --&gt;</div><div class=\"line\">    &lt;data&gt;</div><div class=\"line\">        &lt;variable name=&quot;user&quot; type=&quot;com.example.User&quot;/&gt;</div><div class=\"line\">    &lt;/data&gt;</div><div class=\"line\"></div><div class=\"line\">    &lt;!-- view --&gt;</div><div class=\"line\">    &lt;LinearLayout</div><div class=\"line\">       android:orientation=&quot;vertical&quot;</div><div class=\"line\">       android:layout_width=&quot;match_parent&quot;</div><div class=\"line\">       android:layout_height=&quot;match_parent&quot;&gt;</div><div class=\"line\"></div><div class=\"line\">       &lt;TextView android:layout_width=&quot;wrap_content&quot;</div><div class=\"line\">           android:layout_height=&quot;wrap_content&quot;</div><div class=\"line\">           android:text=&quot;@&#123;user.firstName&#125;&quot;/&gt;</div><div class=\"line\"></div><div class=\"line\">       &lt;TextView android:layout_width=&quot;wrap_content&quot;</div><div class=\"line\">           android:layout_height=&quot;wrap_content&quot;</div><div class=\"line\">           android:text=&quot;@&#123;user.lastName&#125;&quot;/&gt;</div><div class=\"line\"></div><div class=\"line\">   &lt;/LinearLayout&gt;</div><div class=\"line\"></div><div class=\"line\">&lt;/layout&gt;</div></pre></td></tr></table></figure>\n<p>与传统的布局文件不同，DataBinding布局是用<strong>layout标签</strong>来包裹，标签内分为<strong>data</strong>，<strong>view</strong>两块。</p>\n<h4 id=\"view部分\"><a href=\"#view部分\" class=\"headerlink\" title=\"view部分\"></a>view部分</h4><p>view的部分和之前xml原本文件差不多，所以布局方式和以前是一样的。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\">&lt;TextView android:layout_width=&quot;wrap_content&quot;</div><div class=\"line\">        android:layout_height=&quot;wrap_content&quot;</div><div class=\"line\">        android:text=&quot;@&#123;user.lastName&#125;&quot;/&gt;</div></pre></td></tr></table></figure>\n<p>在布局中有个陌生的表达式：<strong>“@{}”</strong>，这里的意思是TextView 的文本被设置为 user中的 firstName 属性。（记住这种表达方式。）</p>\n<h4 id=\"data部分\"><a href=\"#data部分\" class=\"headerlink\" title=\"data部分\"></a>data部分</h4><p>data的部分是比较陌生的</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\">&lt;data&gt;</div><div class=\"line\">    &lt;variable name=&quot;user&quot; type=&quot;com.example.User&quot;/&gt;</div><div class=\"line\">&lt;/data&gt;</div></pre></td></tr></table></figure>\n<p>单看这种写法，很容易可以理解：定义一个变量user，类型是com.example.User。</p>\n<p>没错，这样就相当于拿到了一个User对象，然后就可以在布局中使用它的方法和成员变量啦。</p>\n<p>看看User类里面是什么样子的：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\">//(POJO)</div><div class=\"line\">public class User &#123;</div><div class=\"line\"></div><div class=\"line\">   public final String firstName;</div><div class=\"line\"></div><div class=\"line\">   public final String lastName;</div><div class=\"line\"></div><div class=\"line\">   public User(String firstName, String lastName) &#123;</div><div class=\"line\">       this.firstName = firstName;</div><div class=\"line\">       this.lastName = lastName;</div><div class=\"line\">   &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>结合起前面的代码我们就能理解，<strong>android:text=@{user.lastName}</strong>的意思就是把user中的lastName值赋到text（TextView显示的文字）中。</p>\n<p><strong>注意：</strong><br>    从 data binding 的角度看，pojo类和javaBeans类是一样的，所以User类也也可写成：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\">//javaBean</div><div class=\"line\">public class User &#123;</div><div class=\"line\">   private final String firstName;</div><div class=\"line\"></div><div class=\"line\">   private final String lastName;</div><div class=\"line\"></div><div class=\"line\">   public User(String firstName, String lastName) &#123;</div><div class=\"line\">       this.firstName = firstName;</div><div class=\"line\">       this.lastName = lastName;</div><div class=\"line\">   &#125;</div><div class=\"line\"></div><div class=\"line\">   public String getFirstName() &#123;</div><div class=\"line\">       return this.firstName;</div><div class=\"line\">   &#125;</div><div class=\"line\"></div><div class=\"line\">   public String getLastName() &#123;</div><div class=\"line\">       return this.lastName;</div><div class=\"line\">   &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p><strong><em>所以不用担心dataBinding的@{user.lastName}获取不到私有的lastName，它会从getLastName()方法中获取。</em></strong></p>\n<hr>\n<h3 id=\"绑定数据和布局\"><a href=\"#绑定数据和布局\" class=\"headerlink\" title=\"绑定数据和布局\"></a>绑定数据和布局</h3><p>在项目中完上面的代码。默认情况下，会给予布局文件生成一个Binding类，将它转换成帕斯卡命名并在名字后面接上”Binding”。（如果没有，可以按rebuild，重建项目），上面的那个布局文件叫 main_activity.xml，所以会生成一个 MainActivityBinding 类。</p>\n<p>在MainActivityBinding中会有一个setUser()方法，用于绑定user对象。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\">@Override</div><div class=\"line\">protected void onCreate(Bundle savedInstanceState) &#123;</div><div class=\"line\">   super.onCreate(savedInstanceState);</div><div class=\"line\"></div><div class=\"line\">   //可以用DataBindingUtil.setContentView()代替原本的setContentView()</div><div class=\"line\">   MainActivityBinding binding = DataBindingUtil.setContentView(this, R.layout.main_activity);</div><div class=\"line\"></div><div class=\"line\">   User user = new User(&quot;Test&quot;, &quot;User&quot;);</div><div class=\"line\"></div><div class=\"line\">   //绑定数据</div><div class=\"line\">   binding.setUser(user);  </div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p><strong>注意：</strong></p>\n<pre><code>1、DataBindingUtil.setContentView()代替原本的setContentView()方法中获取。同时获取binding对象。\n\n2、记住一定要绑定数据，不然显示不出来。\n</code></pre><p>这时候运行项目就可以看见测试数据显示在界面上了。</p>\n<h4 id=\"Binding类\"><a href=\"#Binding类\" class=\"headerlink\" title=\"Binding类\"></a>Binding类</h4><blockquote>\n<p>我们这里说的Binding类是指MainActivityBinding</p>\n</blockquote>\n<p>Binding类中除了可以绑定数据，可以获取整个布局View，如果控件上设置了Id，还可以直接通过Binding类获取该控件View。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\"> &lt;TextView </div><div class=\"line\">    android:id=&quot;+id/text_view&quot;</div><div class=\"line\">    android:layout_width=&quot;wrap_content&quot;</div><div class=\"line\">    android:layout_height=&quot;wrap_content&quot;</div><div class=\"line\">    android:text=&quot;@&#123;user.lastName&#125;&quot;/&gt;</div><div class=\"line\"></div><div class=\"line\">...</div><div class=\"line\"></div><div class=\"line\">&lt;!-- 在activity中 --&gt;</div><div class=\"line\"></div><div class=\"line\">//获取整个布局：</div><div class=\"line\">View view = binding.getRootView();  //可以用于需要注入布局的地方，如fragment的onCreatView()</div><div class=\"line\"></div><div class=\"line\">//获取TextView</div><div class=\"line\">textView = binding.textView;    //取名会去掉下横线，使用驼峰命名</div></pre></td></tr></table></figure>\n<p>这样就不用在出现findviewById()了。</p>\n<p><strong>注意一个坑点，通过上面得到的binding获取控件，会得到一个Null值。我也不知道为啥</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\">MainActivityBinding binding = DataBindingUtil.setContentView(this, R.layout.main_activity);</div><div class=\"line\"></div><div class=\"line\">textView = binding.textView //textView = null</div></pre></td></tr></table></figure>\n<p>我们可以用其他的方式获取binding:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\">//调用MainActivityBinding静态方法inflate获取</div><div class=\"line\">MainActivityBinding binding = MainActivityBinding.inflate(getLayoutInflater());</div></pre></td></tr></table></figure>\n<p>如果要在ListView和RecyclerView的adapter中使用databinding的话，可以用下面方法获取：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\">ListItemBinding binding = ListItemBinding.inflate(layoutInflater, viewGroup, false);</div><div class=\"line\">//or</div><div class=\"line\">ListItemBinding binding = DataBindingUtil.inflate(layoutInflater, R.layout.list_item, viewGroup, false);</div></pre></td></tr></table></figure>\n<hr>\n<h3 id=\"绑定事件\"><a href=\"#绑定事件\" class=\"headerlink\" title=\"绑定事件\"></a>绑定事件</h3><blockquote>\n<p>事件可以直接与函数绑定,事件属性的命名由 listener 的函数命名决定。举个例子，View.OnLongClickListener 中有一个 onLongClick() 函数，所以这个事件的对应属性就是 android:onLongClick。</p>\n</blockquote>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\">public class Handlers &#123;</div><div class=\"line\">  public void onClickFriend(View view) &#123; ... &#125;</div><div class=\"line\">  public void onClickEnemy(View view) &#123; ... &#125;</div><div class=\"line\">  public void onClickChanged(View view,String firstName, boolean completed)&#123;...&#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\">&lt;layout xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;&gt;</div><div class=\"line\">   &lt;data&gt;</div><div class=\"line\">       &lt;variable name=&quot;handlers&quot; type=&quot;com.example.Handlers&quot;/&gt;</div><div class=\"line\">       &lt;variable name=&quot;user&quot; type=&quot;com.example.User&quot;/&gt;</div><div class=\"line\">   &lt;/data&gt;</div><div class=\"line\"></div><div class=\"line\">   &lt;LinearLayout</div><div class=\"line\">       android:orientation=&quot;vertical&quot;</div><div class=\"line\">       android:layout_width=&quot;match_parent&quot;</div><div class=\"line\">       android:layout_height=&quot;match_parent&quot;&gt;</div><div class=\"line\"></div><div class=\"line\">       &lt;TextView android:layout_width=&quot;wrap_content&quot;</div><div class=\"line\">           android:layout_height=&quot;wrap_content&quot;</div><div class=\"line\">           android:text=&quot;@&#123;user.firstName&#125;&quot;</div><div class=\"line\">           android:onClick=&quot;@&#123;handlers::onClickFriend&#125;&quot;/&gt;</div><div class=\"line\"></div><div class=\"line\">       &lt;TextView android:layout_width=&quot;wrap_content&quot;</div><div class=\"line\">           android:layout_height=&quot;wrap_content&quot;</div><div class=\"line\">           android:text=&quot;@&#123;user.lastName&#125;&quot;</div><div class=\"line\">           android:onClick=&quot;@&#123;(view)-&gt; handlers.onClickEnemy&#125;&quot;/&gt;</div><div class=\"line\"></div><div class=\"line\">       &lt;TextView android:layout_width=&quot;wrap_content&quot;</div><div class=\"line\">           android:layout_height=&quot;wrap_content&quot;</div><div class=\"line\">           android:text=&quot;@&#123;user.lastName&#125;&quot;</div><div class=\"line\">           android:onClick=&quot;@&#123;(view)-&gt; handlers.onClickChanged(view,user.firstName,true)&#125;&quot;/&gt;</div><div class=\"line\">   &lt;/LinearLayout&gt;</div><div class=\"line\">&lt;/layout&gt;</div></pre></td></tr></table></figure>\n<p><strong>绑定事件有两种方式：</strong></p>\n<p>如上：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\">1、方法引用</div><div class=\"line\">android:onClick=&quot;@&#123;handlers::onClickFriend&#125;&quot;</div><div class=\"line\">//or</div><div class=\"line\">android:onClick=&quot;@&#123;handlers.onClickFriend&#125;&quot;</div><div class=\"line\"></div><div class=\"line\">2、监听，这种方式可以用于多个参数的情况</div><div class=\"line\">android:onClick=&quot;@&#123;(view)-&gt; handlers.onClickEnemy&#125;&quot;</div><div class=\"line\"></div><div class=\"line\">//多个参数</div><div class=\"line\">android:onClick=&quot;@&#123;(view)-&gt; handlers.onClickChanged(view,user.firstName,true)&#125;&quot;</div></pre></td></tr></table></figure>\n<p>上面绑定事件的方式，有时候会有局限性（可能没完全掌握吧）。有时间会利用自定义setters来做事件的绑定。（下文详细说明）</p>\n<hr>\n<h3 id=\"布局细节\"><a href=\"#布局细节\" class=\"headerlink\" title=\"布局细节\"></a>布局细节</h3><p><strong>导入方式</strong></p>\n<p>data标签内可以有多个 import 标签。你可以在布局文件中像使用 Java 一样导入引用。</p>\n<p>比如直接引用公共的常量。或者静态方法</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\">&lt;data&gt;</div><div class=\"line\">    &lt;import type=&quot;android.view.View&quot;/&gt;</div><div class=\"line\">    &lt;import type=&quot;com.example.MyStringUtils&quot;/&gt;  </div><div class=\"line\"></div><div class=\"line\">    //导入变量的两种方式</div><div class=\"line\">    //利用import</div><div class=\"line\">    &lt;import type=&quot;com.example.User&quot;/&gt;</div><div class=\"line\">    &lt;variable name=&quot;user&quot;  type=&quot;User&quot;/&gt;</div><div class=\"line\">    //or</div><div class=\"line\">    &lt;variable name=&quot;user&quot;  type=&quot;com.example.User&quot;/&gt;</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">&lt;/data&gt;</div><div class=\"line\"></div><div class=\"line\">&lt;TextView</div><div class=\"line\">   android:layout_width=&quot;wrap_content&quot;</div><div class=\"line\">   android:layout_height=&quot;wrap_content&quot;</div><div class=\"line\">   android:visibility=&quot;@&#123;user.isAdult ? View.VISIBLE : View.GONE&#125;&quot; //常量</div><div class=\"line\">   android:text=&quot;@&#123;MyStringUtils.capitalize(user.lastName)&#125;&quot;       //静态方法</div><div class=\"line\">   /&gt;</div></pre></td></tr></table></figure>\n<p>1、使用静态方法或者静态常量时，不需要加variable标签，可以直接调用。<br>2、变量的声明需要variable标签声明，声明后会在Binding类中生成get/set方法来调用它。<br>3、一些基本类型，如：string，int，等不需要写全包名。</p>\n<p>如：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\">&lt;variable name=&quot;note&quot;  type=&quot;String&quot;/&gt;</div></pre></td></tr></table></figure>\n<p><strong>当类名发生冲突时，可以使用 alias：\n</strong><br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">  </div><div class=\"line\">&lt;import type=&quot;android.view.View&quot;/&gt;</div><div class=\"line\">&lt;import type=&quot;com.example.real.estate.View&quot;</div><div class=\"line\">        alias=&quot;Vista&quot;/&gt;</div></pre></td></tr></table></figure></p>\n<hr>\n<p><strong>Includes</strong></p>\n<p>在使用应用命名空间的布局中，变量可以传递到任何 include 布局中。include布局内也需要先声明变量。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\">&lt;layout xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;</div><div class=\"line\">        xmlns:bind=&quot;http://schemas.android.com/apk/res-auto&quot;&gt;</div><div class=\"line\">   &lt;data&gt;</div><div class=\"line\">       &lt;variable name=&quot;user&quot; type=&quot;com.example.User&quot;/&gt;</div><div class=\"line\">   &lt;/data&gt;</div><div class=\"line\">   &lt;LinearLayout</div><div class=\"line\">       android:orientation=&quot;vertical&quot;</div><div class=\"line\">       android:layout_width=&quot;match_parent&quot;</div><div class=\"line\">       android:layout_height=&quot;match_parent&quot;&gt;</div><div class=\"line\"></div><div class=\"line\">       &lt;include layout=&quot;@layout/name&quot;</div><div class=\"line\">           bind:user=&quot;@&#123;user&#125;&quot;/&gt;</div><div class=\"line\"></div><div class=\"line\">       &lt;include layout=&quot;@layout/contact&quot;</div><div class=\"line\">           bind:user=&quot;@&#123;user&#125;&quot;/&gt;</div><div class=\"line\"></div><div class=\"line\">   &lt;/LinearLayout&gt;</div><div class=\"line\">&lt;/layout&gt;</div></pre></td></tr></table></figure>\n<p><strong>注意：Data binding 不支持直接包含 merge 节点。\n</strong></p>\n<hr>\n<p><strong>数据的双向绑定</strong></p>\n<blockquote>\n<p>任何 POJO 都能用在 data binding 中，但是更改 POJO 并不会同步更新 UI。data binding 的强大之处就在于它可以让你的数据拥有更新通知的能力。这里有三种不同的数据变动通知机制，Observable 对象，observable 域，与 observable 容器类。<br>当以上的 observable 对象绑定在 UI 上，数据发生变化时，UI 就会同步更新。</p>\n</blockquote>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\">private static class User extends BaseObservable &#123;</div><div class=\"line\">   private String firstName;</div><div class=\"line\">   private String lastName;</div><div class=\"line\"></div><div class=\"line\">   @Bindable</div><div class=\"line\">   public String getFirstName() &#123;</div><div class=\"line\">       return this.firstName;</div><div class=\"line\">   &#125;</div><div class=\"line\"></div><div class=\"line\">   @Bindable</div><div class=\"line\">   public String getLastName() &#123;</div><div class=\"line\">       return this.lastName;</div><div class=\"line\">   &#125;</div><div class=\"line\"></div><div class=\"line\">   public void setFirstName(String firstName) &#123;</div><div class=\"line\">       this.firstName = firstName;</div><div class=\"line\">       notifyPropertyChanged(BR.firstName);</div><div class=\"line\">   &#125;</div><div class=\"line\"></div><div class=\"line\">   public void setLastName(String lastName) &#123;</div><div class=\"line\">       this.lastName = lastName;</div><div class=\"line\">       notifyPropertyChanged(BR.lastName);</div><div class=\"line\">   &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>只需要继承BaseObservable类，然后在getXX()方法上使用Bindable 注解，并在setXXX()方法里面实现通知notifyPropertyChanged()。就可以实现双向绑定。</p>\n<p>只需要修改数据，UI自动更新。</p>\n<p>如果数据类不多，如上，也可以用更简单的方式实现双向绑定。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\">  private static class User &#123;</div><div class=\"line\">   public final ObservableField&lt;String&gt; firstName =</div><div class=\"line\">       new ObservableField&lt;&gt;();</div><div class=\"line\">   public final ObservableField&lt;String&gt; lastName =</div><div class=\"line\">       new ObservableField&lt;&gt;();</div><div class=\"line\">   public final ObservableInt age = new ObservableInt();</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>直接创建一个ObservableField域，然后只需要使用get set 方法，就可以修改数据和UI。</p>\n<p><em>注意：</em><br>  当变量或者 observable 发生变动时，会在下一帧触发 binding。有时候 binding 需要马上执行，这时候可以使用 executePendingBindings())。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">  </div><div class=\"line\">user.firstName.set(&quot;Google&quot;);</div><div class=\"line\">int age = user.age.get();</div></pre></td></tr></table></figure>\n<hr>\n<p><strong>Observable 容器类\n</strong></p>\n<blockquote>\n<p>Observable 容器类允许使用 key 来获取这类数据。</p>\n</blockquote>\n<p>如：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\">ObservableArrayMap&lt;String, Object&gt; user = new ObservableArrayMap&lt;&gt;();</div><div class=\"line\">user.put(&quot;firstName&quot;, &quot;Google&quot;);</div><div class=\"line\">user.put(&quot;lastName&quot;, &quot;Inc.&quot;);</div><div class=\"line\">user.put(&quot;age&quot;, 17);</div><div class=\"line\"></div><div class=\"line\">...</div><div class=\"line\">&lt;!-- 布局中 --&gt;</div><div class=\"line\"></div><div class=\"line\">&lt;data&gt;</div><div class=\"line\">    &lt;import type=&quot;android.databinding.ObservableMap&quot;/&gt;</div><div class=\"line\">    &lt;variable name=&quot;user&quot; type=&quot;ObservableMap&amp;lt;String, Object&gt;&quot;/&gt; //注意这个类型的声明。</div><div class=\"line\">&lt;/data&gt;</div><div class=\"line\">…</div><div class=\"line\">&lt;TextView</div><div class=\"line\">   android:text=&apos;@&#123;user[&quot;lastName&quot;]&#125;&apos;</div><div class=\"line\">   android:layout_width=&quot;wrap_content&quot;</div><div class=\"line\">   android:layout_height=&quot;wrap_content&quot;/&gt;</div><div class=\"line\">&lt;TextView</div><div class=\"line\">   android:text=&apos;@&#123;String.valueOf(1 + (Integer)user[&quot;age&quot;])&#125;&apos;</div><div class=\"line\">   android:layout_width=&quot;wrap_content&quot;</div><div class=\"line\">   android:layout_height=&quot;wrap_content&quot;/&gt;</div></pre></td></tr></table></figure>\n<p><strong>注：这里的声明。</strong></p>\n<p>当然也可以用List</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div></pre></td><td class=\"code\"><pre><div class=\"line\">  </div><div class=\"line\">ObservableArrayList&lt;Object&gt; user = new ObservableArrayList&lt;&gt;();</div><div class=\"line\">user.add(&quot;Google&quot;);</div><div class=\"line\">user.add(&quot;Inc.&quot;);</div><div class=\"line\">user.add(17);</div><div class=\"line\"></div><div class=\"line\">...</div><div class=\"line\">&lt;!-- 布局文件 --&gt;</div><div class=\"line\"></div><div class=\"line\">&lt;data&gt;</div><div class=\"line\">  &lt;import type=&quot;android.databinding.ObservableList&quot;/&gt;</div><div class=\"line\">  &lt;import type=&quot;com.example.my.app.Fields&quot;/&gt;</div><div class=\"line\">  &lt;variable name=&quot;user&quot; type=&quot;ObservableList&amp;lt;Object&gt;&quot;/&gt;</div><div class=\"line\">&lt;/data&gt;</div><div class=\"line\">  </div><div class=\"line\">  &lt;TextView</div><div class=\"line\">     android:text=&apos;@&#123;user[Fields.LAST_NAME]&#125;&apos;</div><div class=\"line\">     android:layout_width=&quot;wrap_content&quot;</div><div class=\"line\">     android:layout_height=&quot;wrap_content&quot;/&gt;</div><div class=\"line\"></div><div class=\"line\">  &lt;TextView</div><div class=\"line\">     android:text=&apos;@&#123;String.valueOf(1 + (Integer)user[Fields.AGE])&#125;&apos;</div><div class=\"line\">     android:layout_width=&quot;wrap_content&quot;</div><div class=\"line\">     android:layout_height=&quot;wrap_content&quot;/&gt;</div></pre></td></tr></table></figure>\n<hr>\n<p><strong>表达式语言</strong></p>\n<blockquote>\n<p>从上面代码也可以看到，databinding允许使用一些表达式语言。</p>\n</blockquote>\n<ul>\n<li>数学计算： + - ／ * %</li>\n<li>字符串连接： +</li>\n<li>逻辑符号： &amp;&amp; ||</li>\n<li>二进制：&amp; | ！</li>\n<li>比较：== &gt; &lt; &gt;= &lt;=</li>\n<li>instanceof</li>\n<li>组：()</li>\n<li>null</li>\n<li>数字</li>\n<li>类型转换</li>\n<li>函数调用</li>\n<li>域存取</li>\n<li>三元运算符 ？：</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\">android:text=&quot;@&#123;String.valueOf(index + 1)&#125;&quot;</div><div class=\"line\">android:visibility=&quot;@&#123;age &lt; 13 ? View.GONE : View.VISIBLE&#125;&quot;</div><div class=\"line\">android:transitionName=&apos;@&#123;&quot;image_&quot; + id&#125;&apos;</div></pre></td></tr></table></figure>\n<p><em>null合并运算符：</em><br>  Null合并运算符(??)会在非 null 的时候选择左边的操作，反之选择右边。<br>  可以用于避免NullPointerException。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\">android:text=&quot;@&#123;user.displayName ?? user.lastName&#125;&quot;</div><div class=\"line\"></div><div class=\"line\">//等同于</div><div class=\"line\">android:text=&quot;@&#123;user.displayName != null ? user.displayName : user.lastName&#125;&quot;</div></pre></td></tr></table></figure>\n<p><em>通用的容器类：</em><br>  数组，lists，sparse lists，和 map，可以用 [] 操作符来存取</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\">&lt;data&gt;</div><div class=\"line\">    &lt;import type=&quot;android.util.SparseArray&quot;/&gt;</div><div class=\"line\">    &lt;import type=&quot;java.util.Map&quot;/&gt;</div><div class=\"line\">    &lt;import type=&quot;java.util.List&quot;/&gt;</div><div class=\"line\">    &lt;variable name=&quot;list&quot; type=&quot;List&amp;lt;String&gt;&quot;/&gt;</div><div class=\"line\">    &lt;variable name=&quot;sparse&quot; type=&quot;SparseArray&amp;lt;String&gt;&quot;/&gt;</div><div class=\"line\">    &lt;variable name=&quot;map&quot; type=&quot;Map&amp;lt;String, String&gt;&quot;/&gt;</div><div class=\"line\">    &lt;variable name=&quot;index&quot; type=&quot;int&quot;/&gt;</div><div class=\"line\">    &lt;variable name=&quot;key&quot; type=&quot;String&quot;/&gt;</div><div class=\"line\">&lt;/data&gt;</div><div class=\"line\">  …</div><div class=\"line\">  android:text=&quot;@&#123;list[index]&#125;&quot;</div><div class=\"line\">  …</div><div class=\"line\">  android:text=&quot;@&#123;sparse[index]&#125;&quot;</div><div class=\"line\">  …</div><div class=\"line\">  android:text=&quot;@&#123;map[key]&#125;&quot;</div><div class=\"line\">  …</div><div class=\"line\">  android:text=&apos;@&#123;map[&quot;firstName&quot;]&#125;&apos;  //这里用单引号包裹</div></pre></td></tr></table></figure>\n<p><em>注：</em><br>  1、注意这个里的声明<br>  2、当@{}内部需要用字符串时，外面可以用单引号包裹。</p>\n<hr>\n<p><strong>引用资源</strong></p>\n<blockquote>\n<p>也可以在表达式中使用普通的语法来引用资源：</p>\n</blockquote>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\">android:padding=&quot;@&#123;large? @dimen/largePadding : @dimen/smallPadding&#125;&quot;</div></pre></td></tr></table></figure>\n<p><em>字符串格式化可以这样实现：</em></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\">android:text=&quot;@&#123;@string/nameFormat(firstName, lastName)&#125;&quot;</div><div class=\"line\"></div><div class=\"line\">...</div><div class=\"line\">&lt;!-- 资源文件 --&gt;</div><div class=\"line\"></div><div class=\"line\">&lt;string name=&quot;nameFormat&quot;&gt;%s, %s&lt;/string&gt;</div></pre></td></tr></table></figure>\n<table>\n<thead>\n<tr>\n<th>Class</th>\n<th>Listener Setter Attribute</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>String[]</td>\n<td>@array  @stringArray</td>\n</tr>\n<tr>\n<td>int[]</td>\n<td>@array  @intArray</td>\n</tr>\n<tr>\n<td>TypedArray</td>\n<td>@array  @typedArray</td>\n</tr>\n<tr>\n<td>Animator</td>\n<td>@animator @animator</td>\n</tr>\n<tr>\n<td>StateListAnimator</td>\n<td>@animator @stateListAnimator</td>\n</tr>\n<tr>\n<td>color int</td>\n<td>@color  @color</td>\n</tr>\n<tr>\n<td>ColorStateList</td>\n<td>@color  @colorStateList</td>\n</tr>\n</tbody>\n</table>\n<hr>\n<h3 id=\"高级Binding\"><a href=\"#高级Binding\" class=\"headerlink\" title=\"高级Binding\"></a>高级Binding</h3><h4 id=\"属性Setter\"><a href=\"#属性Setter\" class=\"headerlink\" title=\"属性Setter\"></a>属性Setter</h4><blockquote>\n<p>当绑定数据发生变动时，生成的 binding 类必须根据 binding 表达式调用 View 的 setter 函数。Data binding 框架内置了几种自定义赋值的方法。</p>\n</blockquote>\n<p><strong>自动Setter</strong></p>\n<blockquote>\n<p>对一个 attribute 来说，data binding 会尝试寻找对应的 setAttribute 函数。属性的命名空间不会对这个过程产生影响，只有属性的命名才是决定因素。</p>\n</blockquote>\n<p>举个例子，针对一个与 TextView 的 android:text 绑定的表达式，data binding会自动寻找 setText(String) 函数。如果表达式返回值为 int 类型， data binding则会寻找 setText(int) 函数。所以需要小心处理函数的返回值类型，必要的时候使用强制类型转换。需要注意的是，data binding 在对应名称的属性不存在的时候也能继续工作。你可以轻而易举地使用 data binding 为任何 setter “创建” 属性。举个例子，support 库中的 DrawerLayout 并没有任何属性，但是有很多 setter，所以你可以使用自动 setter 的特性来调用这些函数。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\">&lt;android.support.v4.widget.DrawerLayout</div><div class=\"line\">  android:layout_width=&quot;wrap_content&quot;</div><div class=\"line\">  android:layout_height=&quot;wrap_content&quot;</div><div class=\"line\">  app:scrimColor=&quot;@&#123;@color/scrim&#125;&quot;</div><div class=\"line\">  app:drawerListener=&quot;@&#123;fragment.drawerListener&#125;&quot;/&gt;</div></pre></td></tr></table></figure>\n<p><strong>自定义Setter</strong></p>\n<blockquote>\n<p>一些属性需要自定义 setter 逻辑。例如，目前没有与 android:paddingLeft 对应的 setter，只有一个 setPadding(left, top, right, bottom) 函数。结合静态 binding adapter 函数与 BindingAdapter 注解可以让开发者自定义属性 setter。</p>\n</blockquote>\n<p><strong><em>这个特别有用！！</em></strong></p>\n<p>例如，这是一个 paddingLeft 的自定义 setter：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\">@BindingAdapter(&quot;android:paddingLeft&quot;)</div><div class=\"line\">public static void setPaddingLeft(View view, int padding) &#123;</div><div class=\"line\">   view.setPadding(padding,</div><div class=\"line\">                   view.getPaddingTop(),</div><div class=\"line\">                   view.getPaddingRight(),</div><div class=\"line\">                   view.getPaddingBottom());</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>一个 loader 可以在非主线程加载图片:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\">@BindingAdapter(&#123;&quot;bind:imageUrl&quot;, &quot;bind:error&quot;&#125;)</div><div class=\"line\">public static void loadImage(ImageView view, String url, Drawable error) &#123;</div><div class=\"line\">   Picasso.with(view.getContext()).load(url).error(error).into(view);</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">&lt;!-- 布局文件 --&gt;</div><div class=\"line\">&lt;ImageView app:imageUrl=“@&#123;venue.imageUrl&#125;”</div><div class=\"line\">  app:error=“@&#123;@drawable/venueError&#125;”/&gt;</div></pre></td></tr></table></figure>\n<p>也可以用于事件的传递：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\">@BindingAdapter(&quot;android:onLayoutChange&quot;)</div><div class=\"line\">public static void setOnLayoutChangeListener(View view, View.OnLayoutChangeListener oldValue,</div><div class=\"line\">       View.OnLayoutChangeListener newValue) &#123;</div><div class=\"line\">    if (Build.VERSION.SDK_INT &gt;= Build.VERSION_CODES.HONEYCOMB) &#123;</div><div class=\"line\">        if (oldValue != null) &#123;</div><div class=\"line\">            view.removeOnLayoutChangeListener(oldValue);</div><div class=\"line\">        &#125;</div><div class=\"line\">        if (newValue != null) &#123;</div><div class=\"line\">            view.addOnLayoutChangeListener(newValue);</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>当 listener 内置多个函数时，必须分割成多个 listener。例如，View.OnAttachStateChangeListener 内置两个函数：onViewAttachedToWindow()) 与 onViewDetachedFromWindow())。在这里必须为两个不同的属性创建不同的接口。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\">//创建接口，注解上了HONEYCOMB_MR1以上可用</div><div class=\"line\">@TargetApi(VERSION_CODES.HONEYCOMB_MR1)</div><div class=\"line\">public interface OnViewDetachedFromWindow &#123;</div><div class=\"line\">    void onViewDetachedFromWindow(View v);</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">@TargetApi(VERSION_CODES.HONEYCOMB_MR1)</div><div class=\"line\">public interface OnViewAttachedToWindow &#123;</div><div class=\"line\">    void onViewAttachedToWindow(View v);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>设置不同的使用方式</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\">@BindingAdapter(&quot;android:onViewAttachedToWindow&quot;)</div><div class=\"line\">public static void setListener(View view, OnViewAttachedToWindow attached) &#123;</div><div class=\"line\">    setListener(view, null, attached);</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">@BindingAdapter(&quot;android:onViewDetachedFromWindow&quot;)</div><div class=\"line\">public static void setListener(View view, OnViewDetachedFromWindow detached) &#123;</div><div class=\"line\">    setListener(view, detached, null);</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">@BindingAdapter(&#123;&quot;android:onViewDetachedFromWindow&quot;, &quot;android:onViewAttachedToWindow&quot;&#125;)</div><div class=\"line\">public static void setListener(View view, final OnViewDetachedFromWindow detach,</div><div class=\"line\">        final OnViewAttachedToWindow attach) &#123;</div><div class=\"line\">    if (VERSION.SDK_INT &gt;= VERSION_CODES.HONEYCOMB_MR1) &#123;</div><div class=\"line\">        final OnAttachStateChangeListener newListener;</div><div class=\"line\">        if (detach == null &amp;&amp; attach == null) &#123;</div><div class=\"line\">            newListener = null;</div><div class=\"line\">        &#125; else &#123;</div><div class=\"line\">            newListener = new OnAttachStateChangeListener() &#123;</div><div class=\"line\">                @Override</div><div class=\"line\">                public void onViewAttachedToWindow(View v) &#123;</div><div class=\"line\">                    if (attach != null) &#123;</div><div class=\"line\">                        attach.onViewAttachedToWindow(v);</div><div class=\"line\">                    &#125;</div><div class=\"line\">                &#125;</div><div class=\"line\"></div><div class=\"line\">                @Override</div><div class=\"line\">                public void onViewDetachedFromWindow(View v) &#123;</div><div class=\"line\">                    if (detach != null) &#123;</div><div class=\"line\">                        detach.onViewDetachedFromWindow(v);</div><div class=\"line\">                    &#125;</div><div class=\"line\">                &#125;</div><div class=\"line\">            &#125;;</div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">        //获取旧的监听器</div><div class=\"line\">        final OnAttachStateChangeListener oldListener = ListenerUtil.trackListener(view,</div><div class=\"line\">                newListener, R.id.onAttachStateChangeListener);</div><div class=\"line\"></div><div class=\"line\">        //移除旧的监听器</div><div class=\"line\">        if (oldListener != null) &#123;</div><div class=\"line\">            view.removeOnAttachStateChangeListener(oldListener);</div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">        //重新设置监听器</div><div class=\"line\">        if (newListener != null) &#123;</div><div class=\"line\">            view.addOnAttachStateChangeListener(newListener);</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p><strong>注意：对于listener 内置多个函数时，可以用上面官方给的方案解决。\n</strong></p>\n","excerpt":"<blockquote>\n<p>参考：</p>\n</blockquote>\n<p>  1、<a href=\"https://developer.android.com/topic/libraries/data-binding/index.html?hl=zh-cn#data_binding_layout_files\">https://developer.android.com/topic/libraries/data-binding/index.html?hl=zh-cn#data_binding_layout_files</a></p>\n<p>  2、<a href=\"http://yanghui.name/blog/2016/02/17/data-binding-guide/\">http://yanghui.name/blog/2016/02/17/data-binding-guide/</a></p>\n<p>这篇笔记主要用于个人梳理用。</p>\n<h3 id=\"DataBinding的作用：\"><a href=\"#DataBinding的作用：\" class=\"headerlink\" title=\"DataBinding的作用：\"></a>DataBinding的作用：</h3><p>减少应用中逻辑以及布局所需要的“胶水代码”,适用于MVVM模式。</p>","more":"<hr>\n<h3 id=\"编译环境：\"><a href=\"#编译环境：\" class=\"headerlink\" title=\"编译环境：\"></a>编译环境：</h3><p>注意：支持版本在Android Studio 1.3 以及之后</p>\n<p>在 build.gradle配置：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\">android &#123;</div><div class=\"line\">    ....</div><div class=\"line\">    dataBinding &#123;</div><div class=\"line\">        enabled = true</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>开启后就可以使用啦～</p>\n<hr>\n<h3 id=\"DataBinding布局：\"><a href=\"#DataBinding布局：\" class=\"headerlink\" title=\"DataBinding布局：\"></a>DataBinding布局：</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\">//main_activity.xml</div><div class=\"line\">&lt;!-- layout标签包裹 --&gt;</div><div class=\"line\">&lt;layout xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;&gt;</div><div class=\"line\">    &lt;!-- data --&gt;</div><div class=\"line\">    &lt;data&gt;</div><div class=\"line\">        &lt;variable name=&quot;user&quot; type=&quot;com.example.User&quot;/&gt;</div><div class=\"line\">    &lt;/data&gt;</div><div class=\"line\"></div><div class=\"line\">    &lt;!-- view --&gt;</div><div class=\"line\">    &lt;LinearLayout</div><div class=\"line\">       android:orientation=&quot;vertical&quot;</div><div class=\"line\">       android:layout_width=&quot;match_parent&quot;</div><div class=\"line\">       android:layout_height=&quot;match_parent&quot;&gt;</div><div class=\"line\"></div><div class=\"line\">       &lt;TextView android:layout_width=&quot;wrap_content&quot;</div><div class=\"line\">           android:layout_height=&quot;wrap_content&quot;</div><div class=\"line\">           android:text=&quot;@&#123;user.firstName&#125;&quot;/&gt;</div><div class=\"line\"></div><div class=\"line\">       &lt;TextView android:layout_width=&quot;wrap_content&quot;</div><div class=\"line\">           android:layout_height=&quot;wrap_content&quot;</div><div class=\"line\">           android:text=&quot;@&#123;user.lastName&#125;&quot;/&gt;</div><div class=\"line\"></div><div class=\"line\">   &lt;/LinearLayout&gt;</div><div class=\"line\"></div><div class=\"line\">&lt;/layout&gt;</div></pre></td></tr></table></figure>\n<p>与传统的布局文件不同，DataBinding布局是用<strong>layout标签</strong>来包裹，标签内分为<strong>data</strong>，<strong>view</strong>两块。</p>\n<h4 id=\"view部分\"><a href=\"#view部分\" class=\"headerlink\" title=\"view部分\"></a>view部分</h4><p>view的部分和之前xml原本文件差不多，所以布局方式和以前是一样的。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\">&lt;TextView android:layout_width=&quot;wrap_content&quot;</div><div class=\"line\">        android:layout_height=&quot;wrap_content&quot;</div><div class=\"line\">        android:text=&quot;@&#123;user.lastName&#125;&quot;/&gt;</div></pre></td></tr></table></figure>\n<p>在布局中有个陌生的表达式：<strong>“@{}”</strong>，这里的意思是TextView 的文本被设置为 user中的 firstName 属性。（记住这种表达方式。）</p>\n<h4 id=\"data部分\"><a href=\"#data部分\" class=\"headerlink\" title=\"data部分\"></a>data部分</h4><p>data的部分是比较陌生的</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\">&lt;data&gt;</div><div class=\"line\">    &lt;variable name=&quot;user&quot; type=&quot;com.example.User&quot;/&gt;</div><div class=\"line\">&lt;/data&gt;</div></pre></td></tr></table></figure>\n<p>单看这种写法，很容易可以理解：定义一个变量user，类型是com.example.User。</p>\n<p>没错，这样就相当于拿到了一个User对象，然后就可以在布局中使用它的方法和成员变量啦。</p>\n<p>看看User类里面是什么样子的：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\">//(POJO)</div><div class=\"line\">public class User &#123;</div><div class=\"line\"></div><div class=\"line\">   public final String firstName;</div><div class=\"line\"></div><div class=\"line\">   public final String lastName;</div><div class=\"line\"></div><div class=\"line\">   public User(String firstName, String lastName) &#123;</div><div class=\"line\">       this.firstName = firstName;</div><div class=\"line\">       this.lastName = lastName;</div><div class=\"line\">   &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>结合起前面的代码我们就能理解，<strong>android:text=@{user.lastName}</strong>的意思就是把user中的lastName值赋到text（TextView显示的文字）中。</p>\n<p><strong>注意：</strong><br>    从 data binding 的角度看，pojo类和javaBeans类是一样的，所以User类也也可写成：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\">//javaBean</div><div class=\"line\">public class User &#123;</div><div class=\"line\">   private final String firstName;</div><div class=\"line\"></div><div class=\"line\">   private final String lastName;</div><div class=\"line\"></div><div class=\"line\">   public User(String firstName, String lastName) &#123;</div><div class=\"line\">       this.firstName = firstName;</div><div class=\"line\">       this.lastName = lastName;</div><div class=\"line\">   &#125;</div><div class=\"line\"></div><div class=\"line\">   public String getFirstName() &#123;</div><div class=\"line\">       return this.firstName;</div><div class=\"line\">   &#125;</div><div class=\"line\"></div><div class=\"line\">   public String getLastName() &#123;</div><div class=\"line\">       return this.lastName;</div><div class=\"line\">   &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p><strong><em>所以不用担心dataBinding的@{user.lastName}获取不到私有的lastName，它会从getLastName()方法中获取。</em></strong></p>\n<hr>\n<h3 id=\"绑定数据和布局\"><a href=\"#绑定数据和布局\" class=\"headerlink\" title=\"绑定数据和布局\"></a>绑定数据和布局</h3><p>在项目中完上面的代码。默认情况下，会给予布局文件生成一个Binding类，将它转换成帕斯卡命名并在名字后面接上”Binding”。（如果没有，可以按rebuild，重建项目），上面的那个布局文件叫 main_activity.xml，所以会生成一个 MainActivityBinding 类。</p>\n<p>在MainActivityBinding中会有一个setUser()方法，用于绑定user对象。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\">@Override</div><div class=\"line\">protected void onCreate(Bundle savedInstanceState) &#123;</div><div class=\"line\">   super.onCreate(savedInstanceState);</div><div class=\"line\"></div><div class=\"line\">   //可以用DataBindingUtil.setContentView()代替原本的setContentView()</div><div class=\"line\">   MainActivityBinding binding = DataBindingUtil.setContentView(this, R.layout.main_activity);</div><div class=\"line\"></div><div class=\"line\">   User user = new User(&quot;Test&quot;, &quot;User&quot;);</div><div class=\"line\"></div><div class=\"line\">   //绑定数据</div><div class=\"line\">   binding.setUser(user);  </div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p><strong>注意：</strong></p>\n<pre><code>1、DataBindingUtil.setContentView()代替原本的setContentView()方法中获取。同时获取binding对象。\n\n2、记住一定要绑定数据，不然显示不出来。\n</code></pre><p>这时候运行项目就可以看见测试数据显示在界面上了。</p>\n<h4 id=\"Binding类\"><a href=\"#Binding类\" class=\"headerlink\" title=\"Binding类\"></a>Binding类</h4><blockquote>\n<p>我们这里说的Binding类是指MainActivityBinding</p>\n</blockquote>\n<p>Binding类中除了可以绑定数据，可以获取整个布局View，如果控件上设置了Id，还可以直接通过Binding类获取该控件View。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\"> &lt;TextView </div><div class=\"line\">    android:id=&quot;+id/text_view&quot;</div><div class=\"line\">    android:layout_width=&quot;wrap_content&quot;</div><div class=\"line\">    android:layout_height=&quot;wrap_content&quot;</div><div class=\"line\">    android:text=&quot;@&#123;user.lastName&#125;&quot;/&gt;</div><div class=\"line\"></div><div class=\"line\">...</div><div class=\"line\"></div><div class=\"line\">&lt;!-- 在activity中 --&gt;</div><div class=\"line\"></div><div class=\"line\">//获取整个布局：</div><div class=\"line\">View view = binding.getRootView();  //可以用于需要注入布局的地方，如fragment的onCreatView()</div><div class=\"line\"></div><div class=\"line\">//获取TextView</div><div class=\"line\">textView = binding.textView;    //取名会去掉下横线，使用驼峰命名</div></pre></td></tr></table></figure>\n<p>这样就不用在出现findviewById()了。</p>\n<p><strong>注意一个坑点，通过上面得到的binding获取控件，会得到一个Null值。我也不知道为啥</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\">MainActivityBinding binding = DataBindingUtil.setContentView(this, R.layout.main_activity);</div><div class=\"line\"></div><div class=\"line\">textView = binding.textView //textView = null</div></pre></td></tr></table></figure>\n<p>我们可以用其他的方式获取binding:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\">//调用MainActivityBinding静态方法inflate获取</div><div class=\"line\">MainActivityBinding binding = MainActivityBinding.inflate(getLayoutInflater());</div></pre></td></tr></table></figure>\n<p>如果要在ListView和RecyclerView的adapter中使用databinding的话，可以用下面方法获取：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\">ListItemBinding binding = ListItemBinding.inflate(layoutInflater, viewGroup, false);</div><div class=\"line\">//or</div><div class=\"line\">ListItemBinding binding = DataBindingUtil.inflate(layoutInflater, R.layout.list_item, viewGroup, false);</div></pre></td></tr></table></figure>\n<hr>\n<h3 id=\"绑定事件\"><a href=\"#绑定事件\" class=\"headerlink\" title=\"绑定事件\"></a>绑定事件</h3><blockquote>\n<p>事件可以直接与函数绑定,事件属性的命名由 listener 的函数命名决定。举个例子，View.OnLongClickListener 中有一个 onLongClick() 函数，所以这个事件的对应属性就是 android:onLongClick。</p>\n</blockquote>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\">public class Handlers &#123;</div><div class=\"line\">  public void onClickFriend(View view) &#123; ... &#125;</div><div class=\"line\">  public void onClickEnemy(View view) &#123; ... &#125;</div><div class=\"line\">  public void onClickChanged(View view,String firstName, boolean completed)&#123;...&#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\">&lt;layout xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;&gt;</div><div class=\"line\">   &lt;data&gt;</div><div class=\"line\">       &lt;variable name=&quot;handlers&quot; type=&quot;com.example.Handlers&quot;/&gt;</div><div class=\"line\">       &lt;variable name=&quot;user&quot; type=&quot;com.example.User&quot;/&gt;</div><div class=\"line\">   &lt;/data&gt;</div><div class=\"line\"></div><div class=\"line\">   &lt;LinearLayout</div><div class=\"line\">       android:orientation=&quot;vertical&quot;</div><div class=\"line\">       android:layout_width=&quot;match_parent&quot;</div><div class=\"line\">       android:layout_height=&quot;match_parent&quot;&gt;</div><div class=\"line\"></div><div class=\"line\">       &lt;TextView android:layout_width=&quot;wrap_content&quot;</div><div class=\"line\">           android:layout_height=&quot;wrap_content&quot;</div><div class=\"line\">           android:text=&quot;@&#123;user.firstName&#125;&quot;</div><div class=\"line\">           android:onClick=&quot;@&#123;handlers::onClickFriend&#125;&quot;/&gt;</div><div class=\"line\"></div><div class=\"line\">       &lt;TextView android:layout_width=&quot;wrap_content&quot;</div><div class=\"line\">           android:layout_height=&quot;wrap_content&quot;</div><div class=\"line\">           android:text=&quot;@&#123;user.lastName&#125;&quot;</div><div class=\"line\">           android:onClick=&quot;@&#123;(view)-&gt; handlers.onClickEnemy&#125;&quot;/&gt;</div><div class=\"line\"></div><div class=\"line\">       &lt;TextView android:layout_width=&quot;wrap_content&quot;</div><div class=\"line\">           android:layout_height=&quot;wrap_content&quot;</div><div class=\"line\">           android:text=&quot;@&#123;user.lastName&#125;&quot;</div><div class=\"line\">           android:onClick=&quot;@&#123;(view)-&gt; handlers.onClickChanged(view,user.firstName,true)&#125;&quot;/&gt;</div><div class=\"line\">   &lt;/LinearLayout&gt;</div><div class=\"line\">&lt;/layout&gt;</div></pre></td></tr></table></figure>\n<p><strong>绑定事件有两种方式：</strong></p>\n<p>如上：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\">1、方法引用</div><div class=\"line\">android:onClick=&quot;@&#123;handlers::onClickFriend&#125;&quot;</div><div class=\"line\">//or</div><div class=\"line\">android:onClick=&quot;@&#123;handlers.onClickFriend&#125;&quot;</div><div class=\"line\"></div><div class=\"line\">2、监听，这种方式可以用于多个参数的情况</div><div class=\"line\">android:onClick=&quot;@&#123;(view)-&gt; handlers.onClickEnemy&#125;&quot;</div><div class=\"line\"></div><div class=\"line\">//多个参数</div><div class=\"line\">android:onClick=&quot;@&#123;(view)-&gt; handlers.onClickChanged(view,user.firstName,true)&#125;&quot;</div></pre></td></tr></table></figure>\n<p>上面绑定事件的方式，有时候会有局限性（可能没完全掌握吧）。有时间会利用自定义setters来做事件的绑定。（下文详细说明）</p>\n<hr>\n<h3 id=\"布局细节\"><a href=\"#布局细节\" class=\"headerlink\" title=\"布局细节\"></a>布局细节</h3><p><strong>导入方式</strong></p>\n<p>data标签内可以有多个 import 标签。你可以在布局文件中像使用 Java 一样导入引用。</p>\n<p>比如直接引用公共的常量。或者静态方法</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\">&lt;data&gt;</div><div class=\"line\">    &lt;import type=&quot;android.view.View&quot;/&gt;</div><div class=\"line\">    &lt;import type=&quot;com.example.MyStringUtils&quot;/&gt;  </div><div class=\"line\"></div><div class=\"line\">    //导入变量的两种方式</div><div class=\"line\">    //利用import</div><div class=\"line\">    &lt;import type=&quot;com.example.User&quot;/&gt;</div><div class=\"line\">    &lt;variable name=&quot;user&quot;  type=&quot;User&quot;/&gt;</div><div class=\"line\">    //or</div><div class=\"line\">    &lt;variable name=&quot;user&quot;  type=&quot;com.example.User&quot;/&gt;</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">&lt;/data&gt;</div><div class=\"line\"></div><div class=\"line\">&lt;TextView</div><div class=\"line\">   android:layout_width=&quot;wrap_content&quot;</div><div class=\"line\">   android:layout_height=&quot;wrap_content&quot;</div><div class=\"line\">   android:visibility=&quot;@&#123;user.isAdult ? View.VISIBLE : View.GONE&#125;&quot; //常量</div><div class=\"line\">   android:text=&quot;@&#123;MyStringUtils.capitalize(user.lastName)&#125;&quot;       //静态方法</div><div class=\"line\">   /&gt;</div></pre></td></tr></table></figure>\n<p>1、使用静态方法或者静态常量时，不需要加variable标签，可以直接调用。<br>2、变量的声明需要variable标签声明，声明后会在Binding类中生成get/set方法来调用它。<br>3、一些基本类型，如：string，int，等不需要写全包名。</p>\n<p>如：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\">&lt;variable name=&quot;note&quot;  type=&quot;String&quot;/&gt;</div></pre></td></tr></table></figure>\n<p><strong>当类名发生冲突时，可以使用 alias：\n</strong><br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">  </div><div class=\"line\">&lt;import type=&quot;android.view.View&quot;/&gt;</div><div class=\"line\">&lt;import type=&quot;com.example.real.estate.View&quot;</div><div class=\"line\">        alias=&quot;Vista&quot;/&gt;</div></pre></td></tr></table></figure></p>\n<hr>\n<p><strong>Includes</strong></p>\n<p>在使用应用命名空间的布局中，变量可以传递到任何 include 布局中。include布局内也需要先声明变量。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\">&lt;layout xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;</div><div class=\"line\">        xmlns:bind=&quot;http://schemas.android.com/apk/res-auto&quot;&gt;</div><div class=\"line\">   &lt;data&gt;</div><div class=\"line\">       &lt;variable name=&quot;user&quot; type=&quot;com.example.User&quot;/&gt;</div><div class=\"line\">   &lt;/data&gt;</div><div class=\"line\">   &lt;LinearLayout</div><div class=\"line\">       android:orientation=&quot;vertical&quot;</div><div class=\"line\">       android:layout_width=&quot;match_parent&quot;</div><div class=\"line\">       android:layout_height=&quot;match_parent&quot;&gt;</div><div class=\"line\"></div><div class=\"line\">       &lt;include layout=&quot;@layout/name&quot;</div><div class=\"line\">           bind:user=&quot;@&#123;user&#125;&quot;/&gt;</div><div class=\"line\"></div><div class=\"line\">       &lt;include layout=&quot;@layout/contact&quot;</div><div class=\"line\">           bind:user=&quot;@&#123;user&#125;&quot;/&gt;</div><div class=\"line\"></div><div class=\"line\">   &lt;/LinearLayout&gt;</div><div class=\"line\">&lt;/layout&gt;</div></pre></td></tr></table></figure>\n<p><strong>注意：Data binding 不支持直接包含 merge 节点。\n</strong></p>\n<hr>\n<p><strong>数据的双向绑定</strong></p>\n<blockquote>\n<p>任何 POJO 都能用在 data binding 中，但是更改 POJO 并不会同步更新 UI。data binding 的强大之处就在于它可以让你的数据拥有更新通知的能力。这里有三种不同的数据变动通知机制，Observable 对象，observable 域，与 observable 容器类。<br>当以上的 observable 对象绑定在 UI 上，数据发生变化时，UI 就会同步更新。</p>\n</blockquote>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\">private static class User extends BaseObservable &#123;</div><div class=\"line\">   private String firstName;</div><div class=\"line\">   private String lastName;</div><div class=\"line\"></div><div class=\"line\">   @Bindable</div><div class=\"line\">   public String getFirstName() &#123;</div><div class=\"line\">       return this.firstName;</div><div class=\"line\">   &#125;</div><div class=\"line\"></div><div class=\"line\">   @Bindable</div><div class=\"line\">   public String getLastName() &#123;</div><div class=\"line\">       return this.lastName;</div><div class=\"line\">   &#125;</div><div class=\"line\"></div><div class=\"line\">   public void setFirstName(String firstName) &#123;</div><div class=\"line\">       this.firstName = firstName;</div><div class=\"line\">       notifyPropertyChanged(BR.firstName);</div><div class=\"line\">   &#125;</div><div class=\"line\"></div><div class=\"line\">   public void setLastName(String lastName) &#123;</div><div class=\"line\">       this.lastName = lastName;</div><div class=\"line\">       notifyPropertyChanged(BR.lastName);</div><div class=\"line\">   &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>只需要继承BaseObservable类，然后在getXX()方法上使用Bindable 注解，并在setXXX()方法里面实现通知notifyPropertyChanged()。就可以实现双向绑定。</p>\n<p>只需要修改数据，UI自动更新。</p>\n<p>如果数据类不多，如上，也可以用更简单的方式实现双向绑定。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\">  private static class User &#123;</div><div class=\"line\">   public final ObservableField&lt;String&gt; firstName =</div><div class=\"line\">       new ObservableField&lt;&gt;();</div><div class=\"line\">   public final ObservableField&lt;String&gt; lastName =</div><div class=\"line\">       new ObservableField&lt;&gt;();</div><div class=\"line\">   public final ObservableInt age = new ObservableInt();</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>直接创建一个ObservableField域，然后只需要使用get set 方法，就可以修改数据和UI。</p>\n<p><em>注意：</em><br>  当变量或者 observable 发生变动时，会在下一帧触发 binding。有时候 binding 需要马上执行，这时候可以使用 executePendingBindings())。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">  </div><div class=\"line\">user.firstName.set(&quot;Google&quot;);</div><div class=\"line\">int age = user.age.get();</div></pre></td></tr></table></figure>\n<hr>\n<p><strong>Observable 容器类\n</strong></p>\n<blockquote>\n<p>Observable 容器类允许使用 key 来获取这类数据。</p>\n</blockquote>\n<p>如：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\">ObservableArrayMap&lt;String, Object&gt; user = new ObservableArrayMap&lt;&gt;();</div><div class=\"line\">user.put(&quot;firstName&quot;, &quot;Google&quot;);</div><div class=\"line\">user.put(&quot;lastName&quot;, &quot;Inc.&quot;);</div><div class=\"line\">user.put(&quot;age&quot;, 17);</div><div class=\"line\"></div><div class=\"line\">...</div><div class=\"line\">&lt;!-- 布局中 --&gt;</div><div class=\"line\"></div><div class=\"line\">&lt;data&gt;</div><div class=\"line\">    &lt;import type=&quot;android.databinding.ObservableMap&quot;/&gt;</div><div class=\"line\">    &lt;variable name=&quot;user&quot; type=&quot;ObservableMap&amp;lt;String, Object&gt;&quot;/&gt; //注意这个类型的声明。</div><div class=\"line\">&lt;/data&gt;</div><div class=\"line\">…</div><div class=\"line\">&lt;TextView</div><div class=\"line\">   android:text=&apos;@&#123;user[&quot;lastName&quot;]&#125;&apos;</div><div class=\"line\">   android:layout_width=&quot;wrap_content&quot;</div><div class=\"line\">   android:layout_height=&quot;wrap_content&quot;/&gt;</div><div class=\"line\">&lt;TextView</div><div class=\"line\">   android:text=&apos;@&#123;String.valueOf(1 + (Integer)user[&quot;age&quot;])&#125;&apos;</div><div class=\"line\">   android:layout_width=&quot;wrap_content&quot;</div><div class=\"line\">   android:layout_height=&quot;wrap_content&quot;/&gt;</div></pre></td></tr></table></figure>\n<p><strong>注：这里的声明。</strong></p>\n<p>当然也可以用List</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div></pre></td><td class=\"code\"><pre><div class=\"line\">  </div><div class=\"line\">ObservableArrayList&lt;Object&gt; user = new ObservableArrayList&lt;&gt;();</div><div class=\"line\">user.add(&quot;Google&quot;);</div><div class=\"line\">user.add(&quot;Inc.&quot;);</div><div class=\"line\">user.add(17);</div><div class=\"line\"></div><div class=\"line\">...</div><div class=\"line\">&lt;!-- 布局文件 --&gt;</div><div class=\"line\"></div><div class=\"line\">&lt;data&gt;</div><div class=\"line\">  &lt;import type=&quot;android.databinding.ObservableList&quot;/&gt;</div><div class=\"line\">  &lt;import type=&quot;com.example.my.app.Fields&quot;/&gt;</div><div class=\"line\">  &lt;variable name=&quot;user&quot; type=&quot;ObservableList&amp;lt;Object&gt;&quot;/&gt;</div><div class=\"line\">&lt;/data&gt;</div><div class=\"line\">  </div><div class=\"line\">  &lt;TextView</div><div class=\"line\">     android:text=&apos;@&#123;user[Fields.LAST_NAME]&#125;&apos;</div><div class=\"line\">     android:layout_width=&quot;wrap_content&quot;</div><div class=\"line\">     android:layout_height=&quot;wrap_content&quot;/&gt;</div><div class=\"line\"></div><div class=\"line\">  &lt;TextView</div><div class=\"line\">     android:text=&apos;@&#123;String.valueOf(1 + (Integer)user[Fields.AGE])&#125;&apos;</div><div class=\"line\">     android:layout_width=&quot;wrap_content&quot;</div><div class=\"line\">     android:layout_height=&quot;wrap_content&quot;/&gt;</div></pre></td></tr></table></figure>\n<hr>\n<p><strong>表达式语言</strong></p>\n<blockquote>\n<p>从上面代码也可以看到，databinding允许使用一些表达式语言。</p>\n</blockquote>\n<ul>\n<li>数学计算： + - ／ * %</li>\n<li>字符串连接： +</li>\n<li>逻辑符号： &amp;&amp; ||</li>\n<li>二进制：&amp; | ！</li>\n<li>比较：== &gt; &lt; &gt;= &lt;=</li>\n<li>instanceof</li>\n<li>组：()</li>\n<li>null</li>\n<li>数字</li>\n<li>类型转换</li>\n<li>函数调用</li>\n<li>域存取</li>\n<li>三元运算符 ？：</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\">android:text=&quot;@&#123;String.valueOf(index + 1)&#125;&quot;</div><div class=\"line\">android:visibility=&quot;@&#123;age &lt; 13 ? View.GONE : View.VISIBLE&#125;&quot;</div><div class=\"line\">android:transitionName=&apos;@&#123;&quot;image_&quot; + id&#125;&apos;</div></pre></td></tr></table></figure>\n<p><em>null合并运算符：</em><br>  Null合并运算符(??)会在非 null 的时候选择左边的操作，反之选择右边。<br>  可以用于避免NullPointerException。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\">android:text=&quot;@&#123;user.displayName ?? user.lastName&#125;&quot;</div><div class=\"line\"></div><div class=\"line\">//等同于</div><div class=\"line\">android:text=&quot;@&#123;user.displayName != null ? user.displayName : user.lastName&#125;&quot;</div></pre></td></tr></table></figure>\n<p><em>通用的容器类：</em><br>  数组，lists，sparse lists，和 map，可以用 [] 操作符来存取</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\">&lt;data&gt;</div><div class=\"line\">    &lt;import type=&quot;android.util.SparseArray&quot;/&gt;</div><div class=\"line\">    &lt;import type=&quot;java.util.Map&quot;/&gt;</div><div class=\"line\">    &lt;import type=&quot;java.util.List&quot;/&gt;</div><div class=\"line\">    &lt;variable name=&quot;list&quot; type=&quot;List&amp;lt;String&gt;&quot;/&gt;</div><div class=\"line\">    &lt;variable name=&quot;sparse&quot; type=&quot;SparseArray&amp;lt;String&gt;&quot;/&gt;</div><div class=\"line\">    &lt;variable name=&quot;map&quot; type=&quot;Map&amp;lt;String, String&gt;&quot;/&gt;</div><div class=\"line\">    &lt;variable name=&quot;index&quot; type=&quot;int&quot;/&gt;</div><div class=\"line\">    &lt;variable name=&quot;key&quot; type=&quot;String&quot;/&gt;</div><div class=\"line\">&lt;/data&gt;</div><div class=\"line\">  …</div><div class=\"line\">  android:text=&quot;@&#123;list[index]&#125;&quot;</div><div class=\"line\">  …</div><div class=\"line\">  android:text=&quot;@&#123;sparse[index]&#125;&quot;</div><div class=\"line\">  …</div><div class=\"line\">  android:text=&quot;@&#123;map[key]&#125;&quot;</div><div class=\"line\">  …</div><div class=\"line\">  android:text=&apos;@&#123;map[&quot;firstName&quot;]&#125;&apos;  //这里用单引号包裹</div></pre></td></tr></table></figure>\n<p><em>注：</em><br>  1、注意这个里的声明<br>  2、当@{}内部需要用字符串时，外面可以用单引号包裹。</p>\n<hr>\n<p><strong>引用资源</strong></p>\n<blockquote>\n<p>也可以在表达式中使用普通的语法来引用资源：</p>\n</blockquote>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\">android:padding=&quot;@&#123;large? @dimen/largePadding : @dimen/smallPadding&#125;&quot;</div></pre></td></tr></table></figure>\n<p><em>字符串格式化可以这样实现：</em></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\">android:text=&quot;@&#123;@string/nameFormat(firstName, lastName)&#125;&quot;</div><div class=\"line\"></div><div class=\"line\">...</div><div class=\"line\">&lt;!-- 资源文件 --&gt;</div><div class=\"line\"></div><div class=\"line\">&lt;string name=&quot;nameFormat&quot;&gt;%s, %s&lt;/string&gt;</div></pre></td></tr></table></figure>\n<table>\n<thead>\n<tr>\n<th>Class</th>\n<th>Listener Setter Attribute</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>String[]</td>\n<td>@array  @stringArray</td>\n</tr>\n<tr>\n<td>int[]</td>\n<td>@array  @intArray</td>\n</tr>\n<tr>\n<td>TypedArray</td>\n<td>@array  @typedArray</td>\n</tr>\n<tr>\n<td>Animator</td>\n<td>@animator @animator</td>\n</tr>\n<tr>\n<td>StateListAnimator</td>\n<td>@animator @stateListAnimator</td>\n</tr>\n<tr>\n<td>color int</td>\n<td>@color  @color</td>\n</tr>\n<tr>\n<td>ColorStateList</td>\n<td>@color  @colorStateList</td>\n</tr>\n</tbody>\n</table>\n<hr>\n<h3 id=\"高级Binding\"><a href=\"#高级Binding\" class=\"headerlink\" title=\"高级Binding\"></a>高级Binding</h3><h4 id=\"属性Setter\"><a href=\"#属性Setter\" class=\"headerlink\" title=\"属性Setter\"></a>属性Setter</h4><blockquote>\n<p>当绑定数据发生变动时，生成的 binding 类必须根据 binding 表达式调用 View 的 setter 函数。Data binding 框架内置了几种自定义赋值的方法。</p>\n</blockquote>\n<p><strong>自动Setter</strong></p>\n<blockquote>\n<p>对一个 attribute 来说，data binding 会尝试寻找对应的 setAttribute 函数。属性的命名空间不会对这个过程产生影响，只有属性的命名才是决定因素。</p>\n</blockquote>\n<p>举个例子，针对一个与 TextView 的 android:text 绑定的表达式，data binding会自动寻找 setText(String) 函数。如果表达式返回值为 int 类型， data binding则会寻找 setText(int) 函数。所以需要小心处理函数的返回值类型，必要的时候使用强制类型转换。需要注意的是，data binding 在对应名称的属性不存在的时候也能继续工作。你可以轻而易举地使用 data binding 为任何 setter “创建” 属性。举个例子，support 库中的 DrawerLayout 并没有任何属性，但是有很多 setter，所以你可以使用自动 setter 的特性来调用这些函数。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\">&lt;android.support.v4.widget.DrawerLayout</div><div class=\"line\">  android:layout_width=&quot;wrap_content&quot;</div><div class=\"line\">  android:layout_height=&quot;wrap_content&quot;</div><div class=\"line\">  app:scrimColor=&quot;@&#123;@color/scrim&#125;&quot;</div><div class=\"line\">  app:drawerListener=&quot;@&#123;fragment.drawerListener&#125;&quot;/&gt;</div></pre></td></tr></table></figure>\n<p><strong>自定义Setter</strong></p>\n<blockquote>\n<p>一些属性需要自定义 setter 逻辑。例如，目前没有与 android:paddingLeft 对应的 setter，只有一个 setPadding(left, top, right, bottom) 函数。结合静态 binding adapter 函数与 BindingAdapter 注解可以让开发者自定义属性 setter。</p>\n</blockquote>\n<p><strong><em>这个特别有用！！</em></strong></p>\n<p>例如，这是一个 paddingLeft 的自定义 setter：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\">@BindingAdapter(&quot;android:paddingLeft&quot;)</div><div class=\"line\">public static void setPaddingLeft(View view, int padding) &#123;</div><div class=\"line\">   view.setPadding(padding,</div><div class=\"line\">                   view.getPaddingTop(),</div><div class=\"line\">                   view.getPaddingRight(),</div><div class=\"line\">                   view.getPaddingBottom());</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>一个 loader 可以在非主线程加载图片:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\">@BindingAdapter(&#123;&quot;bind:imageUrl&quot;, &quot;bind:error&quot;&#125;)</div><div class=\"line\">public static void loadImage(ImageView view, String url, Drawable error) &#123;</div><div class=\"line\">   Picasso.with(view.getContext()).load(url).error(error).into(view);</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">&lt;!-- 布局文件 --&gt;</div><div class=\"line\">&lt;ImageView app:imageUrl=“@&#123;venue.imageUrl&#125;”</div><div class=\"line\">  app:error=“@&#123;@drawable/venueError&#125;”/&gt;</div></pre></td></tr></table></figure>\n<p>也可以用于事件的传递：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\">@BindingAdapter(&quot;android:onLayoutChange&quot;)</div><div class=\"line\">public static void setOnLayoutChangeListener(View view, View.OnLayoutChangeListener oldValue,</div><div class=\"line\">       View.OnLayoutChangeListener newValue) &#123;</div><div class=\"line\">    if (Build.VERSION.SDK_INT &gt;= Build.VERSION_CODES.HONEYCOMB) &#123;</div><div class=\"line\">        if (oldValue != null) &#123;</div><div class=\"line\">            view.removeOnLayoutChangeListener(oldValue);</div><div class=\"line\">        &#125;</div><div class=\"line\">        if (newValue != null) &#123;</div><div class=\"line\">            view.addOnLayoutChangeListener(newValue);</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>当 listener 内置多个函数时，必须分割成多个 listener。例如，View.OnAttachStateChangeListener 内置两个函数：onViewAttachedToWindow()) 与 onViewDetachedFromWindow())。在这里必须为两个不同的属性创建不同的接口。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\">//创建接口，注解上了HONEYCOMB_MR1以上可用</div><div class=\"line\">@TargetApi(VERSION_CODES.HONEYCOMB_MR1)</div><div class=\"line\">public interface OnViewDetachedFromWindow &#123;</div><div class=\"line\">    void onViewDetachedFromWindow(View v);</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">@TargetApi(VERSION_CODES.HONEYCOMB_MR1)</div><div class=\"line\">public interface OnViewAttachedToWindow &#123;</div><div class=\"line\">    void onViewAttachedToWindow(View v);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>设置不同的使用方式</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\">@BindingAdapter(&quot;android:onViewAttachedToWindow&quot;)</div><div class=\"line\">public static void setListener(View view, OnViewAttachedToWindow attached) &#123;</div><div class=\"line\">    setListener(view, null, attached);</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">@BindingAdapter(&quot;android:onViewDetachedFromWindow&quot;)</div><div class=\"line\">public static void setListener(View view, OnViewDetachedFromWindow detached) &#123;</div><div class=\"line\">    setListener(view, detached, null);</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">@BindingAdapter(&#123;&quot;android:onViewDetachedFromWindow&quot;, &quot;android:onViewAttachedToWindow&quot;&#125;)</div><div class=\"line\">public static void setListener(View view, final OnViewDetachedFromWindow detach,</div><div class=\"line\">        final OnViewAttachedToWindow attach) &#123;</div><div class=\"line\">    if (VERSION.SDK_INT &gt;= VERSION_CODES.HONEYCOMB_MR1) &#123;</div><div class=\"line\">        final OnAttachStateChangeListener newListener;</div><div class=\"line\">        if (detach == null &amp;&amp; attach == null) &#123;</div><div class=\"line\">            newListener = null;</div><div class=\"line\">        &#125; else &#123;</div><div class=\"line\">            newListener = new OnAttachStateChangeListener() &#123;</div><div class=\"line\">                @Override</div><div class=\"line\">                public void onViewAttachedToWindow(View v) &#123;</div><div class=\"line\">                    if (attach != null) &#123;</div><div class=\"line\">                        attach.onViewAttachedToWindow(v);</div><div class=\"line\">                    &#125;</div><div class=\"line\">                &#125;</div><div class=\"line\"></div><div class=\"line\">                @Override</div><div class=\"line\">                public void onViewDetachedFromWindow(View v) &#123;</div><div class=\"line\">                    if (detach != null) &#123;</div><div class=\"line\">                        detach.onViewDetachedFromWindow(v);</div><div class=\"line\">                    &#125;</div><div class=\"line\">                &#125;</div><div class=\"line\">            &#125;;</div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">        //获取旧的监听器</div><div class=\"line\">        final OnAttachStateChangeListener oldListener = ListenerUtil.trackListener(view,</div><div class=\"line\">                newListener, R.id.onAttachStateChangeListener);</div><div class=\"line\"></div><div class=\"line\">        //移除旧的监听器</div><div class=\"line\">        if (oldListener != null) &#123;</div><div class=\"line\">            view.removeOnAttachStateChangeListener(oldListener);</div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">        //重新设置监听器</div><div class=\"line\">        if (newListener != null) &#123;</div><div class=\"line\">            view.addOnAttachStateChangeListener(newListener);</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p><strong>注意：对于listener 内置多个函数时，可以用上面官方给的方案解决。\n</strong></p>"},{"title":"Gson解析泛型问题(更加灵活的处理方法)","date":"2016-11-30T09:33:19.000Z","_content":"\n### 出现的问题\n\n后台服务器传回的json一般都是这样的类型：\n\n```java\n{\n    \"status\": 0, \n    \"msg\" : null, \n    \"data\": {  \n        \"price\": 4,  \n        \"name\": \"脉动\",  \n        \"type\": \"饮料\",  \n        \"amount\": 50,  \n        \"summary\": \"随时随地，脉动回来\",  \n        \"picture\": \"http://www.jpjy365.com/images/201402/source_img/29726_G_1393285888119.jpg\",  \n        \"hot\": true,  \n        \"sales\": 100  \n    },  \n    \"err\": null  \n}\n```\n\n<!-- more -->\n\n外面都会包裹一层json,如msg这样的字段一般都不变，也很少用到,而只有里面的data数据会经常变化。我们一般都会这么做：\n\n```java\npublic class BaseModle<T> {\n\n    public boolean status;\n\n    public String msg;\n\n    public T data;\n\n    public String err;\n}\n```\n\n```java\npublic class DrinkModle {\n    public int price;\n    public String name;\n    public String type;\n    public int amount;\n    public String summary;\n    public String picture;\n    public boolean hot;\n    public int sales;\n}\n```\n\n如此，在用Gson解析的时候很多人就会出现问题。\n\n---\n\n### 解决方案：\n>利用反射获取泛型，\n\n**直接上代码：**\n\n```java\n    //获取class类型\n    private Class getTypeClassOfObject(Object obj) {\n         return (Class) ((ParameterizedType) obj.getClass().getGenericSuperclass()).getActualTypeArguments()[0];\n    }\n\n    private class Element<T> implements ParameterizedType {\n\n    private Class<T> cl;\n\n    public Element(Class<T> cl) {\n        this.cl = cl;\n    }\n\n    public Type[] getActualTypeArguments() {\n        return new Type[] {cl};\n    }\n\n    //返回BaseModle类型\n    public Type getRawType() {\n        return BaseModle.class;\n    }\n\n    public Type getOwnerType() {\n        return null;\n    }\n}\n```\n\n\n这里模拟网络请求，获取json格式的字符串。\n\n```java\npublic class Requset<T> {\npublic <T> void getObject(String url, HashMap<String, String> paramsMap) {\n    RequestParams params = convertParams(paramsMap);\n    client.get(url, params, new TextHttpResponseHandler() {\n        @Override\n        public void onSuccess(int statusCode, Header[] headers, String responseBody) {\n                //通过上述方法获取class,\n                Class cl = getTypeClassOfObject(this);\n                //Gson解析\n                BaseModle<T> object  = new Gson().fromJson(content, new Element<T>(cl));\n\n                getGsonData(object.data);\n        }\n\n        @Override\n        public void onFailure(int statusCode, Header[] headers, String responseBody, Throwable error) {\n            error.printStackTrace();\n            callback.onFailure();\n        }\n    });\n}\n\nprivate RequestParams convertParams(HashMap<String, String> paramsMap) {\n    RequestParams params = new RequestParams();\n    if (paramsMap != null) {\n        for (String key : paramsMap.keySet()) {\n            params.put(key, paramsMap.get(key));\n        }\n    }\n    return params;\n}\n\npublic abstract  void getGsonData(T data);\n}\n```\n\n\n使用：\n\n```java\napi.getObject(URL, paramsMap){\n    @Override\n    public void getGsonData(DrinkModle data){\n\n        Log.d(\"TAG\",data.toString);\n    };\n};\n```\n\n----\n\n\n","source":"_posts/Gson解析泛型问题.md","raw":"---\ntitle: Gson解析泛型问题(更加灵活的处理方法)\ndate: 2016-11-30 17:33:19\ntags: [Android]\n---\n\n### 出现的问题\n\n后台服务器传回的json一般都是这样的类型：\n\n```java\n{\n    \"status\": 0, \n    \"msg\" : null, \n    \"data\": {  \n        \"price\": 4,  \n        \"name\": \"脉动\",  \n        \"type\": \"饮料\",  \n        \"amount\": 50,  \n        \"summary\": \"随时随地，脉动回来\",  \n        \"picture\": \"http://www.jpjy365.com/images/201402/source_img/29726_G_1393285888119.jpg\",  \n        \"hot\": true,  \n        \"sales\": 100  \n    },  \n    \"err\": null  \n}\n```\n\n<!-- more -->\n\n外面都会包裹一层json,如msg这样的字段一般都不变，也很少用到,而只有里面的data数据会经常变化。我们一般都会这么做：\n\n```java\npublic class BaseModle<T> {\n\n    public boolean status;\n\n    public String msg;\n\n    public T data;\n\n    public String err;\n}\n```\n\n```java\npublic class DrinkModle {\n    public int price;\n    public String name;\n    public String type;\n    public int amount;\n    public String summary;\n    public String picture;\n    public boolean hot;\n    public int sales;\n}\n```\n\n如此，在用Gson解析的时候很多人就会出现问题。\n\n---\n\n### 解决方案：\n>利用反射获取泛型，\n\n**直接上代码：**\n\n```java\n    //获取class类型\n    private Class getTypeClassOfObject(Object obj) {\n         return (Class) ((ParameterizedType) obj.getClass().getGenericSuperclass()).getActualTypeArguments()[0];\n    }\n\n    private class Element<T> implements ParameterizedType {\n\n    private Class<T> cl;\n\n    public Element(Class<T> cl) {\n        this.cl = cl;\n    }\n\n    public Type[] getActualTypeArguments() {\n        return new Type[] {cl};\n    }\n\n    //返回BaseModle类型\n    public Type getRawType() {\n        return BaseModle.class;\n    }\n\n    public Type getOwnerType() {\n        return null;\n    }\n}\n```\n\n\n这里模拟网络请求，获取json格式的字符串。\n\n```java\npublic class Requset<T> {\npublic <T> void getObject(String url, HashMap<String, String> paramsMap) {\n    RequestParams params = convertParams(paramsMap);\n    client.get(url, params, new TextHttpResponseHandler() {\n        @Override\n        public void onSuccess(int statusCode, Header[] headers, String responseBody) {\n                //通过上述方法获取class,\n                Class cl = getTypeClassOfObject(this);\n                //Gson解析\n                BaseModle<T> object  = new Gson().fromJson(content, new Element<T>(cl));\n\n                getGsonData(object.data);\n        }\n\n        @Override\n        public void onFailure(int statusCode, Header[] headers, String responseBody, Throwable error) {\n            error.printStackTrace();\n            callback.onFailure();\n        }\n    });\n}\n\nprivate RequestParams convertParams(HashMap<String, String> paramsMap) {\n    RequestParams params = new RequestParams();\n    if (paramsMap != null) {\n        for (String key : paramsMap.keySet()) {\n            params.put(key, paramsMap.get(key));\n        }\n    }\n    return params;\n}\n\npublic abstract  void getGsonData(T data);\n}\n```\n\n\n使用：\n\n```java\napi.getObject(URL, paramsMap){\n    @Override\n    public void getGsonData(DrinkModle data){\n\n        Log.d(\"TAG\",data.toString);\n    };\n};\n```\n\n----\n\n\n","slug":"Gson解析泛型问题","published":1,"updated":"2017-03-29T15:51:22.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj0v5msvn000kx5yp59beddfy","content":"<h3 id=\"出现的问题\"><a href=\"#出现的问题\" class=\"headerlink\" title=\"出现的问题\"></a>出现的问题</h3><p>后台服务器传回的json一般都是这样的类型：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div></pre></td><td class=\"code\"><pre><div class=\"line\">&#123;</div><div class=\"line\">    <span class=\"string\">\"status\"</span>: <span class=\"number\">0</span>, </div><div class=\"line\">    <span class=\"string\">\"msg\"</span> : <span class=\"keyword\">null</span>, </div><div class=\"line\">    <span class=\"string\">\"data\"</span>: &#123;  </div><div class=\"line\">        <span class=\"string\">\"price\"</span>: <span class=\"number\">4</span>,  </div><div class=\"line\">        <span class=\"string\">\"name\"</span>: <span class=\"string\">\"脉动\"</span>,  </div><div class=\"line\">        <span class=\"string\">\"type\"</span>: <span class=\"string\">\"饮料\"</span>,  </div><div class=\"line\">        <span class=\"string\">\"amount\"</span>: <span class=\"number\">50</span>,  </div><div class=\"line\">        <span class=\"string\">\"summary\"</span>: <span class=\"string\">\"随时随地，脉动回来\"</span>,  </div><div class=\"line\">        <span class=\"string\">\"picture\"</span>: <span class=\"string\">\"http://www.jpjy365.com/images/201402/source_img/29726_G_1393285888119.jpg\"</span>,  </div><div class=\"line\">        <span class=\"string\">\"hot\"</span>: <span class=\"keyword\">true</span>,  </div><div class=\"line\">        <span class=\"string\">\"sales\"</span>: <span class=\"number\">100</span>  </div><div class=\"line\">    &#125;,  </div><div class=\"line\">    <span class=\"string\">\"err\"</span>: <span class=\"keyword\">null</span>  </div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<a id=\"more\"></a>\n<p>外面都会包裹一层json,如msg这样的字段一般都不变，也很少用到,而只有里面的data数据会经常变化。我们一般都会这么做：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">BaseModle</span>&lt;<span class=\"title\">T</span>&gt; </span>&#123;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> status;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">public</span> String msg;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">public</span> T data;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">public</span> String err;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">DrinkModle</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">int</span> price;</div><div class=\"line\">    <span class=\"keyword\">public</span> String name;</div><div class=\"line\">    <span class=\"keyword\">public</span> String type;</div><div class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">int</span> amount;</div><div class=\"line\">    <span class=\"keyword\">public</span> String summary;</div><div class=\"line\">    <span class=\"keyword\">public</span> String picture;</div><div class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> hot;</div><div class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">int</span> sales;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>如此，在用Gson解析的时候很多人就会出现问题。</p>\n<hr>\n<h3 id=\"解决方案：\"><a href=\"#解决方案：\" class=\"headerlink\" title=\"解决方案：\"></a>解决方案：</h3><blockquote>\n<p>利用反射获取泛型，</p>\n</blockquote>\n<p><strong>直接上代码：</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div></pre></td><td class=\"code\"><pre><div class=\"line\">    <span class=\"comment\">//获取class类型</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> Class <span class=\"title\">getTypeClassOfObject</span><span class=\"params\">(Object obj)</span> </span>&#123;</div><div class=\"line\">         <span class=\"keyword\">return</span> (Class) ((ParameterizedType) obj.getClass().getGenericSuperclass()).getActualTypeArguments()[<span class=\"number\">0</span>];</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">private</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Element</span>&lt;<span class=\"title\">T</span>&gt; <span class=\"keyword\">implements</span> <span class=\"title\">ParameterizedType</span> </span>&#123;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">private</span> Class&lt;T&gt; cl;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">Element</span><span class=\"params\">(Class&lt;T&gt; cl)</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">this</span>.cl = cl;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">public</span> Type[] getActualTypeArguments() &#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> Type[] &#123;cl&#125;;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">//返回BaseModle类型</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> Type <span class=\"title\">getRawType</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> BaseModle.class;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> Type <span class=\"title\">getOwnerType</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">null</span>;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>这里模拟网络请求，获取json格式的字符串。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Requset</span>&lt;<span class=\"title\">T</span>&gt; </span>&#123;</div><div class=\"line\"><span class=\"keyword\">public</span> &lt;T&gt; <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">getObject</span><span class=\"params\">(String url, HashMap&lt;String, String&gt; paramsMap)</span> </span>&#123;</div><div class=\"line\">    RequestParams params = convertParams(paramsMap);</div><div class=\"line\">    client.get(url, params, <span class=\"keyword\">new</span> TextHttpResponseHandler() &#123;</div><div class=\"line\">        <span class=\"meta\">@Override</span></div><div class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onSuccess</span><span class=\"params\">(<span class=\"keyword\">int</span> statusCode, Header[] headers, String responseBody)</span> </span>&#123;</div><div class=\"line\">                <span class=\"comment\">//通过上述方法获取class,</span></div><div class=\"line\">                Class cl = getTypeClassOfObject(<span class=\"keyword\">this</span>);</div><div class=\"line\">                <span class=\"comment\">//Gson解析</span></div><div class=\"line\">                BaseModle&lt;T&gt; object  = <span class=\"keyword\">new</span> Gson().fromJson(content, <span class=\"keyword\">new</span> Element&lt;T&gt;(cl));</div><div class=\"line\"></div><div class=\"line\">                getGsonData(object.data);</div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"meta\">@Override</span></div><div class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onFailure</span><span class=\"params\">(<span class=\"keyword\">int</span> statusCode, Header[] headers, String responseBody, Throwable error)</span> </span>&#123;</div><div class=\"line\">            error.printStackTrace();</div><div class=\"line\">            callback.onFailure();</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;);</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> RequestParams <span class=\"title\">convertParams</span><span class=\"params\">(HashMap&lt;String, String&gt; paramsMap)</span> </span>&#123;</div><div class=\"line\">    RequestParams params = <span class=\"keyword\">new</span> RequestParams();</div><div class=\"line\">    <span class=\"keyword\">if</span> (paramsMap != <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">        <span class=\"keyword\">for</span> (String key : paramsMap.keySet()) &#123;</div><div class=\"line\">            params.put(key, paramsMap.get(key));</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">return</span> params;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">abstract</span>  <span class=\"keyword\">void</span> <span class=\"title\">getGsonData</span><span class=\"params\">(T data)</span></span>;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>使用：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">api.getObject(URL, paramsMap)&#123;</div><div class=\"line\">    <span class=\"meta\">@Override</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">getGsonData</span><span class=\"params\">(DrinkModle data)</span></span>&#123;</div><div class=\"line\"></div><div class=\"line\">        Log.d(<span class=\"string\">\"TAG\"</span>,data.toString);</div><div class=\"line\">    &#125;;</div><div class=\"line\">&#125;;</div></pre></td></tr></table></figure>\n<hr>\n","excerpt":"<h3 id=\"出现的问题\"><a href=\"#出现的问题\" class=\"headerlink\" title=\"出现的问题\"></a>出现的问题</h3><p>后台服务器传回的json一般都是这样的类型：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div></pre></td><td class=\"code\"><pre><div class=\"line\">&#123;</div><div class=\"line\">    <span class=\"string\">\"status\"</span>: <span class=\"number\">0</span>, </div><div class=\"line\">    <span class=\"string\">\"msg\"</span> : <span class=\"keyword\">null</span>, </div><div class=\"line\">    <span class=\"string\">\"data\"</span>: &#123;  </div><div class=\"line\">        <span class=\"string\">\"price\"</span>: <span class=\"number\">4</span>,  </div><div class=\"line\">        <span class=\"string\">\"name\"</span>: <span class=\"string\">\"脉动\"</span>,  </div><div class=\"line\">        <span class=\"string\">\"type\"</span>: <span class=\"string\">\"饮料\"</span>,  </div><div class=\"line\">        <span class=\"string\">\"amount\"</span>: <span class=\"number\">50</span>,  </div><div class=\"line\">        <span class=\"string\">\"summary\"</span>: <span class=\"string\">\"随时随地，脉动回来\"</span>,  </div><div class=\"line\">        <span class=\"string\">\"picture\"</span>: <span class=\"string\">\"http://www.jpjy365.com/images/201402/source_img/29726_G_1393285888119.jpg\"</span>,  </div><div class=\"line\">        <span class=\"string\">\"hot\"</span>: <span class=\"keyword\">true</span>,  </div><div class=\"line\">        <span class=\"string\">\"sales\"</span>: <span class=\"number\">100</span>  </div><div class=\"line\">    &#125;,  </div><div class=\"line\">    <span class=\"string\">\"err\"</span>: <span class=\"keyword\">null</span>  </div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>","more":"<p>外面都会包裹一层json,如msg这样的字段一般都不变，也很少用到,而只有里面的data数据会经常变化。我们一般都会这么做：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">BaseModle</span>&lt;<span class=\"title\">T</span>&gt; </span>&#123;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> status;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">public</span> String msg;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">public</span> T data;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">public</span> String err;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">DrinkModle</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">int</span> price;</div><div class=\"line\">    <span class=\"keyword\">public</span> String name;</div><div class=\"line\">    <span class=\"keyword\">public</span> String type;</div><div class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">int</span> amount;</div><div class=\"line\">    <span class=\"keyword\">public</span> String summary;</div><div class=\"line\">    <span class=\"keyword\">public</span> String picture;</div><div class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> hot;</div><div class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">int</span> sales;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>如此，在用Gson解析的时候很多人就会出现问题。</p>\n<hr>\n<h3 id=\"解决方案：\"><a href=\"#解决方案：\" class=\"headerlink\" title=\"解决方案：\"></a>解决方案：</h3><blockquote>\n<p>利用反射获取泛型，</p>\n</blockquote>\n<p><strong>直接上代码：</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div></pre></td><td class=\"code\"><pre><div class=\"line\">    <span class=\"comment\">//获取class类型</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> Class <span class=\"title\">getTypeClassOfObject</span><span class=\"params\">(Object obj)</span> </span>&#123;</div><div class=\"line\">         <span class=\"keyword\">return</span> (Class) ((ParameterizedType) obj.getClass().getGenericSuperclass()).getActualTypeArguments()[<span class=\"number\">0</span>];</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">private</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Element</span>&lt;<span class=\"title\">T</span>&gt; <span class=\"keyword\">implements</span> <span class=\"title\">ParameterizedType</span> </span>&#123;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">private</span> Class&lt;T&gt; cl;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">Element</span><span class=\"params\">(Class&lt;T&gt; cl)</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">this</span>.cl = cl;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">public</span> Type[] getActualTypeArguments() &#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> Type[] &#123;cl&#125;;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">//返回BaseModle类型</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> Type <span class=\"title\">getRawType</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> BaseModle.class;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> Type <span class=\"title\">getOwnerType</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">null</span>;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>这里模拟网络请求，获取json格式的字符串。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Requset</span>&lt;<span class=\"title\">T</span>&gt; </span>&#123;</div><div class=\"line\"><span class=\"keyword\">public</span> &lt;T&gt; <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">getObject</span><span class=\"params\">(String url, HashMap&lt;String, String&gt; paramsMap)</span> </span>&#123;</div><div class=\"line\">    RequestParams params = convertParams(paramsMap);</div><div class=\"line\">    client.get(url, params, <span class=\"keyword\">new</span> TextHttpResponseHandler() &#123;</div><div class=\"line\">        <span class=\"meta\">@Override</span></div><div class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onSuccess</span><span class=\"params\">(<span class=\"keyword\">int</span> statusCode, Header[] headers, String responseBody)</span> </span>&#123;</div><div class=\"line\">                <span class=\"comment\">//通过上述方法获取class,</span></div><div class=\"line\">                Class cl = getTypeClassOfObject(<span class=\"keyword\">this</span>);</div><div class=\"line\">                <span class=\"comment\">//Gson解析</span></div><div class=\"line\">                BaseModle&lt;T&gt; object  = <span class=\"keyword\">new</span> Gson().fromJson(content, <span class=\"keyword\">new</span> Element&lt;T&gt;(cl));</div><div class=\"line\"></div><div class=\"line\">                getGsonData(object.data);</div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"meta\">@Override</span></div><div class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onFailure</span><span class=\"params\">(<span class=\"keyword\">int</span> statusCode, Header[] headers, String responseBody, Throwable error)</span> </span>&#123;</div><div class=\"line\">            error.printStackTrace();</div><div class=\"line\">            callback.onFailure();</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;);</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> RequestParams <span class=\"title\">convertParams</span><span class=\"params\">(HashMap&lt;String, String&gt; paramsMap)</span> </span>&#123;</div><div class=\"line\">    RequestParams params = <span class=\"keyword\">new</span> RequestParams();</div><div class=\"line\">    <span class=\"keyword\">if</span> (paramsMap != <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">        <span class=\"keyword\">for</span> (String key : paramsMap.keySet()) &#123;</div><div class=\"line\">            params.put(key, paramsMap.get(key));</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">return</span> params;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">abstract</span>  <span class=\"keyword\">void</span> <span class=\"title\">getGsonData</span><span class=\"params\">(T data)</span></span>;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>使用：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">api.getObject(URL, paramsMap)&#123;</div><div class=\"line\">    <span class=\"meta\">@Override</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">getGsonData</span><span class=\"params\">(DrinkModle data)</span></span>&#123;</div><div class=\"line\"></div><div class=\"line\">        Log.d(<span class=\"string\">\"TAG\"</span>,data.toString);</div><div class=\"line\">    &#125;;</div><div class=\"line\">&#125;;</div></pre></td></tr></table></figure>\n<hr>"},{"title":"Material Design UI组件学习笔记（2）之Behavior ","date":"2016-12-08T02:50:32.000Z","_content":"\n###CoordinatorLayout与Behavior的使用：\n\n首先定义一个可以捕捉滑动的view\n\n**MoveView**\n\n```java\n    public class MoveView extends TextView {\n    public MoveView(Context context) {\n        super(context);\n    }\n\n    public MoveView(Context context, AttributeSet attrs) {\n        super(context, attrs);\n    }\n\n    public MoveView(Context context, AttributeSet attrs, int defStyleAttr) {\n        super(context, attrs, defStyleAttr);\n    }\n\n    private int lastX;\n    private int lastY;\n//    private int mWidth;\n//    private int mHeight;\n\n\n    @Override\n    public boolean onTouchEvent(MotionEvent event) {\n        int startX = (int) event.getRawX();\n        int startY = (int) event.getRawY();\n\n        switch (event.getAction()) {\n            case MotionEvent.ACTION_DOWN:\n                break;\n\n            case MotionEvent.ACTION_MOVE:\n                if(getLayoutParams() instanceof CoordinatorLayout.MarginLayoutParams) {\n                    CoordinatorLayout.MarginLayoutParams layoutParams = (CoordinatorLayout.MarginLayoutParams) getLayoutParams();\n\n                    int left = layoutParams.leftMargin + startX - lastX;\n                    int top = layoutParams.topMargin + startY - lastY;\n\n                    layoutParams.leftMargin = left;\n                    layoutParams.topMargin = top;\n                    setLayoutParams(layoutParams);\n\n                    //请求\n                    requestLayout();\n                }\n                break;\n\n            case MotionEvent.ACTION_UP:\n                break;\n        }\n        lastX = startX;\n        lastY = startY;\n        return true;\n    }\n}\n```\n\n**放置布局：**\n\n```html\n    <android.support.design.widget.CoordinatorLayout xmlns:android=\"http://schemas.android.com/apk/res/android\"\n        xmlns:tools=\"http://schemas.android.com/tools\"\n        xmlns:app=\"http://schemas.android.com/apk/res-auto\"\n        android:id=\"@+id/activity_main\"\n        android:layout_width=\"match_parent\"\n        android:layout_height=\"match_parent\"\n        tools:context=\"com.test.coordinatorlayouttest.MainActivity\">\n\n        <Button\n            android:layout_width=\"40dp\"\n            android:layout_height=\"80dp\"\n            android:text=\"button\"\n            app:layout_behavior=\"@string/DodoBehavior\"/>\n\n        <com.test.coordinatorlayouttest.childview.MoveView\n            android:layout_width=\"wrap_content\"\n            android:layout_height=\"wrap_content\"\n            android:text=\"Hello World!\"\n            android:background=\"@color/colorPrimary\"\n            android:padding=\"20dp\"/>\n    </android.support.design.widget.CoordinatorLayout>\n\n```\n\n在Button上添加layout_behaviors属性。\n在strings文件中：<string name=\"DodoBehavior\">com.test.coordinatorlayouttest.behavior.DodoBehavior</string>\n\n这样就把Button添加了Behavior行为。\n\n**Behavior**\n\n```java\npublic class DodoBehavior extends CoordinatorLayout.Behavior<Button> {\n\n    private final Context context;\n    private final int width;\n    private final int height;\n\n\n    public DodoBehavior(Context context, AttributeSet attrs) {\n        super(context, attrs);\n        this.context = context;\n        DisplayMetrics display =   context.getResources().getDisplayMetrics();\n        width = display.widthPixels;\n        height = display.heightPixels;\n    }\n\n    @Override\n    public boolean layoutDependsOn(CoordinatorLayout parent, Button child, View dependency) {\n        //建立依赖关系\n        //如果dependency 是 DodoMoveView类型， 就依赖\n        //当然，也可以通过自定义View传入id 比对，或者别的方式，来设置是否跟着触发\n        return dependency instanceof MoveView;\n    }\n\n    @Override\n    public boolean onDependentViewChanged(CoordinatorLayout parent, Button child, View dependency) {\n        //这里可以设置对应view的大小和位置\n        //自己返回true， 则改变， 返回false， 自己不改变 位置和大小\n\n        //根据dependency的位置，设置Button的位置\n        int top = dependency.getTop();\n        int left = dependency.getLeft();\n\n        int x = width - left - child.getWidth();\n        int y = height - top - child.getHeight();\n\n        setPosition(child, x, y);\n        return true;\n    }\n\n    private void setPosition(View v, int x, int y) {\n        CoordinatorLayout.MarginLayoutParams layoutParams = (CoordinatorLayout.MarginLayoutParams) v.getLayoutParams();\n        layoutParams.leftMargin = x;\n        layoutParams.topMargin = y;\n        layoutParams.width = y/2;\n        v.setLayoutParams(layoutParams);\n    }\n}\n```\n\n\n- layoutDependsOn方法，用于建立依赖关系，返回ture表示建立依赖关系。dependency instanceof MoveView;表示，如果是MoveView类型就建立依赖关系。也可以获取view的id来建立依赖关系。\n- onDependentViewChanged方法，用于改变对应view的大小和位置，返回true表示改变。\n\n### 实战\n\n\n\n\n\n\n","source":"_posts/Material-Design-UI组件学习笔记（2）之Behavior.md","raw":"---\ntitle: 'Material Design UI组件学习笔记（2）之Behavior '\ndate: 2016-12-08 10:50:32\ntags: [Android,Material Design]\n---\n\n###CoordinatorLayout与Behavior的使用：\n\n首先定义一个可以捕捉滑动的view\n\n**MoveView**\n\n```java\n    public class MoveView extends TextView {\n    public MoveView(Context context) {\n        super(context);\n    }\n\n    public MoveView(Context context, AttributeSet attrs) {\n        super(context, attrs);\n    }\n\n    public MoveView(Context context, AttributeSet attrs, int defStyleAttr) {\n        super(context, attrs, defStyleAttr);\n    }\n\n    private int lastX;\n    private int lastY;\n//    private int mWidth;\n//    private int mHeight;\n\n\n    @Override\n    public boolean onTouchEvent(MotionEvent event) {\n        int startX = (int) event.getRawX();\n        int startY = (int) event.getRawY();\n\n        switch (event.getAction()) {\n            case MotionEvent.ACTION_DOWN:\n                break;\n\n            case MotionEvent.ACTION_MOVE:\n                if(getLayoutParams() instanceof CoordinatorLayout.MarginLayoutParams) {\n                    CoordinatorLayout.MarginLayoutParams layoutParams = (CoordinatorLayout.MarginLayoutParams) getLayoutParams();\n\n                    int left = layoutParams.leftMargin + startX - lastX;\n                    int top = layoutParams.topMargin + startY - lastY;\n\n                    layoutParams.leftMargin = left;\n                    layoutParams.topMargin = top;\n                    setLayoutParams(layoutParams);\n\n                    //请求\n                    requestLayout();\n                }\n                break;\n\n            case MotionEvent.ACTION_UP:\n                break;\n        }\n        lastX = startX;\n        lastY = startY;\n        return true;\n    }\n}\n```\n\n**放置布局：**\n\n```html\n    <android.support.design.widget.CoordinatorLayout xmlns:android=\"http://schemas.android.com/apk/res/android\"\n        xmlns:tools=\"http://schemas.android.com/tools\"\n        xmlns:app=\"http://schemas.android.com/apk/res-auto\"\n        android:id=\"@+id/activity_main\"\n        android:layout_width=\"match_parent\"\n        android:layout_height=\"match_parent\"\n        tools:context=\"com.test.coordinatorlayouttest.MainActivity\">\n\n        <Button\n            android:layout_width=\"40dp\"\n            android:layout_height=\"80dp\"\n            android:text=\"button\"\n            app:layout_behavior=\"@string/DodoBehavior\"/>\n\n        <com.test.coordinatorlayouttest.childview.MoveView\n            android:layout_width=\"wrap_content\"\n            android:layout_height=\"wrap_content\"\n            android:text=\"Hello World!\"\n            android:background=\"@color/colorPrimary\"\n            android:padding=\"20dp\"/>\n    </android.support.design.widget.CoordinatorLayout>\n\n```\n\n在Button上添加layout_behaviors属性。\n在strings文件中：<string name=\"DodoBehavior\">com.test.coordinatorlayouttest.behavior.DodoBehavior</string>\n\n这样就把Button添加了Behavior行为。\n\n**Behavior**\n\n```java\npublic class DodoBehavior extends CoordinatorLayout.Behavior<Button> {\n\n    private final Context context;\n    private final int width;\n    private final int height;\n\n\n    public DodoBehavior(Context context, AttributeSet attrs) {\n        super(context, attrs);\n        this.context = context;\n        DisplayMetrics display =   context.getResources().getDisplayMetrics();\n        width = display.widthPixels;\n        height = display.heightPixels;\n    }\n\n    @Override\n    public boolean layoutDependsOn(CoordinatorLayout parent, Button child, View dependency) {\n        //建立依赖关系\n        //如果dependency 是 DodoMoveView类型， 就依赖\n        //当然，也可以通过自定义View传入id 比对，或者别的方式，来设置是否跟着触发\n        return dependency instanceof MoveView;\n    }\n\n    @Override\n    public boolean onDependentViewChanged(CoordinatorLayout parent, Button child, View dependency) {\n        //这里可以设置对应view的大小和位置\n        //自己返回true， 则改变， 返回false， 自己不改变 位置和大小\n\n        //根据dependency的位置，设置Button的位置\n        int top = dependency.getTop();\n        int left = dependency.getLeft();\n\n        int x = width - left - child.getWidth();\n        int y = height - top - child.getHeight();\n\n        setPosition(child, x, y);\n        return true;\n    }\n\n    private void setPosition(View v, int x, int y) {\n        CoordinatorLayout.MarginLayoutParams layoutParams = (CoordinatorLayout.MarginLayoutParams) v.getLayoutParams();\n        layoutParams.leftMargin = x;\n        layoutParams.topMargin = y;\n        layoutParams.width = y/2;\n        v.setLayoutParams(layoutParams);\n    }\n}\n```\n\n\n- layoutDependsOn方法，用于建立依赖关系，返回ture表示建立依赖关系。dependency instanceof MoveView;表示，如果是MoveView类型就建立依赖关系。也可以获取view的id来建立依赖关系。\n- onDependentViewChanged方法，用于改变对应view的大小和位置，返回true表示改变。\n\n### 实战\n\n\n\n\n\n\n","slug":"Material-Design-UI组件学习笔记（2）之Behavior","published":1,"updated":"2017-03-29T15:51:22.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj0v5msvp000mx5ypi0ovkwob","content":"<p>###CoordinatorLayout与Behavior的使用：</p>\n<p>首先定义一个可以捕捉滑动的view</p>\n<p><strong>MoveView</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div></pre></td><td class=\"code\"><pre><div class=\"line\">    <span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MoveView</span> <span class=\"keyword\">extends</span> <span class=\"title\">TextView</span> </span>&#123;</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">MoveView</span><span class=\"params\">(Context context)</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">super</span>(context);</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">MoveView</span><span class=\"params\">(Context context, AttributeSet attrs)</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">super</span>(context, attrs);</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">MoveView</span><span class=\"params\">(Context context, AttributeSet attrs, <span class=\"keyword\">int</span> defStyleAttr)</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">super</span>(context, attrs, defStyleAttr);</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">int</span> lastX;</div><div class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">int</span> lastY;</div><div class=\"line\"><span class=\"comment\">//    private int mWidth;</span></div><div class=\"line\"><span class=\"comment\">//    private int mHeight;</span></div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">    <span class=\"meta\">@Override</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">onTouchEvent</span><span class=\"params\">(MotionEvent event)</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">int</span> startX = (<span class=\"keyword\">int</span>) event.getRawX();</div><div class=\"line\">        <span class=\"keyword\">int</span> startY = (<span class=\"keyword\">int</span>) event.getRawY();</div><div class=\"line\"></div><div class=\"line\">        <span class=\"keyword\">switch</span> (event.getAction()) &#123;</div><div class=\"line\">            <span class=\"keyword\">case</span> MotionEvent.ACTION_DOWN:</div><div class=\"line\">                <span class=\"keyword\">break</span>;</div><div class=\"line\"></div><div class=\"line\">            <span class=\"keyword\">case</span> MotionEvent.ACTION_MOVE:</div><div class=\"line\">                <span class=\"keyword\">if</span>(getLayoutParams() <span class=\"keyword\">instanceof</span> CoordinatorLayout.MarginLayoutParams) &#123;</div><div class=\"line\">                    CoordinatorLayout.MarginLayoutParams layoutParams = (CoordinatorLayout.MarginLayoutParams) getLayoutParams();</div><div class=\"line\"></div><div class=\"line\">                    <span class=\"keyword\">int</span> left = layoutParams.leftMargin + startX - lastX;</div><div class=\"line\">                    <span class=\"keyword\">int</span> top = layoutParams.topMargin + startY - lastY;</div><div class=\"line\"></div><div class=\"line\">                    layoutParams.leftMargin = left;</div><div class=\"line\">                    layoutParams.topMargin = top;</div><div class=\"line\">                    setLayoutParams(layoutParams);</div><div class=\"line\"></div><div class=\"line\">                    <span class=\"comment\">//请求</span></div><div class=\"line\">                    requestLayout();</div><div class=\"line\">                &#125;</div><div class=\"line\">                <span class=\"keyword\">break</span>;</div><div class=\"line\"></div><div class=\"line\">            <span class=\"keyword\">case</span> MotionEvent.ACTION_UP:</div><div class=\"line\">                <span class=\"keyword\">break</span>;</div><div class=\"line\">        &#125;</div><div class=\"line\">        lastX = startX;</div><div class=\"line\">        lastY = startY;</div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">true</span>;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p><strong>放置布局：</strong></p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">android.support.design.widget.CoordinatorLayout</span> <span class=\"attr\">xmlns:android</span>=<span class=\"string\">\"http://schemas.android.com/apk/res/android\"</span></span></div><div class=\"line\">    <span class=\"attr\">xmlns:tools</span>=<span class=\"string\">\"http://schemas.android.com/tools\"</span></div><div class=\"line\">    <span class=\"attr\">xmlns:app</span>=<span class=\"string\">\"http://schemas.android.com/apk/res-auto\"</span></div><div class=\"line\">    <span class=\"attr\">android:id</span>=<span class=\"string\">\"@+id/activity_main\"</span></div><div class=\"line\">    <span class=\"attr\">android:layout_width</span>=<span class=\"string\">\"match_parent\"</span></div><div class=\"line\">    <span class=\"attr\">android:layout_height</span>=<span class=\"string\">\"match_parent\"</span></div><div class=\"line\">    <span class=\"attr\">tools:context</span>=<span class=\"string\">\"com.test.coordinatorlayouttest.MainActivity\"</span>&gt;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">Button</span></span></div><div class=\"line\">        <span class=\"attr\">android:layout_width</span>=<span class=\"string\">\"40dp\"</span></div><div class=\"line\">        <span class=\"attr\">android:layout_height</span>=<span class=\"string\">\"80dp\"</span></div><div class=\"line\">        <span class=\"attr\">android:text</span>=<span class=\"string\">\"button\"</span></div><div class=\"line\">        <span class=\"attr\">app:layout_behavior</span>=<span class=\"string\">\"@string/DodoBehavior\"</span>/&gt;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">com.test.coordinatorlayouttest.childview.MoveView</span></span></div><div class=\"line\">        <span class=\"attr\">android:layout_width</span>=<span class=\"string\">\"wrap_content\"</span></div><div class=\"line\">        <span class=\"attr\">android:layout_height</span>=<span class=\"string\">\"wrap_content\"</span></div><div class=\"line\">        <span class=\"attr\">android:text</span>=<span class=\"string\">\"Hello World!\"</span></div><div class=\"line\">        <span class=\"attr\">android:background</span>=<span class=\"string\">\"@color/colorPrimary\"</span></div><div class=\"line\">        <span class=\"attr\">android:padding</span>=<span class=\"string\">\"20dp\"</span>/&gt;</div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">android.support.design.widget.CoordinatorLayout</span>&gt;</span></div></pre></td></tr></table></figure>\n<p>在Button上添加layout_behaviors属性。<br>在strings文件中：<string name=\"DodoBehavior\">com.test.coordinatorlayouttest.behavior.DodoBehavior</string></p>\n<p>这样就把Button添加了Behavior行为。</p>\n<p><strong>Behavior</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">DodoBehavior</span> <span class=\"keyword\">extends</span> <span class=\"title\">CoordinatorLayout</span>.<span class=\"title\">Behavior</span>&lt;<span class=\"title\">Button</span>&gt; </span>&#123;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">final</span> Context context;</div><div class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> width;</div><div class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> height;</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">DodoBehavior</span><span class=\"params\">(Context context, AttributeSet attrs)</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">super</span>(context, attrs);</div><div class=\"line\">        <span class=\"keyword\">this</span>.context = context;</div><div class=\"line\">        DisplayMetrics display =   context.getResources().getDisplayMetrics();</div><div class=\"line\">        width = display.widthPixels;</div><div class=\"line\">        height = display.heightPixels;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"meta\">@Override</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">layoutDependsOn</span><span class=\"params\">(CoordinatorLayout parent, Button child, View dependency)</span> </span>&#123;</div><div class=\"line\">        <span class=\"comment\">//建立依赖关系</span></div><div class=\"line\">        <span class=\"comment\">//如果dependency 是 DodoMoveView类型， 就依赖</span></div><div class=\"line\">        <span class=\"comment\">//当然，也可以通过自定义View传入id 比对，或者别的方式，来设置是否跟着触发</span></div><div class=\"line\">        <span class=\"keyword\">return</span> dependency <span class=\"keyword\">instanceof</span> MoveView;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"meta\">@Override</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">onDependentViewChanged</span><span class=\"params\">(CoordinatorLayout parent, Button child, View dependency)</span> </span>&#123;</div><div class=\"line\">        <span class=\"comment\">//这里可以设置对应view的大小和位置</span></div><div class=\"line\">        <span class=\"comment\">//自己返回true， 则改变， 返回false， 自己不改变 位置和大小</span></div><div class=\"line\"></div><div class=\"line\">        <span class=\"comment\">//根据dependency的位置，设置Button的位置</span></div><div class=\"line\">        <span class=\"keyword\">int</span> top = dependency.getTop();</div><div class=\"line\">        <span class=\"keyword\">int</span> left = dependency.getLeft();</div><div class=\"line\"></div><div class=\"line\">        <span class=\"keyword\">int</span> x = width - left - child.getWidth();</div><div class=\"line\">        <span class=\"keyword\">int</span> y = height - top - child.getHeight();</div><div class=\"line\"></div><div class=\"line\">        setPosition(child, x, y);</div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">true</span>;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">setPosition</span><span class=\"params\">(View v, <span class=\"keyword\">int</span> x, <span class=\"keyword\">int</span> y)</span> </span>&#123;</div><div class=\"line\">        CoordinatorLayout.MarginLayoutParams layoutParams = (CoordinatorLayout.MarginLayoutParams) v.getLayoutParams();</div><div class=\"line\">        layoutParams.leftMargin = x;</div><div class=\"line\">        layoutParams.topMargin = y;</div><div class=\"line\">        layoutParams.width = y/<span class=\"number\">2</span>;</div><div class=\"line\">        v.setLayoutParams(layoutParams);</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<ul>\n<li>layoutDependsOn方法，用于建立依赖关系，返回ture表示建立依赖关系。dependency instanceof MoveView;表示，如果是MoveView类型就建立依赖关系。也可以获取view的id来建立依赖关系。</li>\n<li>onDependentViewChanged方法，用于改变对应view的大小和位置，返回true表示改变。</li>\n</ul>\n<h3 id=\"实战\"><a href=\"#实战\" class=\"headerlink\" title=\"实战\"></a>实战</h3>","excerpt":"","more":"<p>###CoordinatorLayout与Behavior的使用：</p>\n<p>首先定义一个可以捕捉滑动的view</p>\n<p><strong>MoveView</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div></pre></td><td class=\"code\"><pre><div class=\"line\">    <span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MoveView</span> <span class=\"keyword\">extends</span> <span class=\"title\">TextView</span> </span>&#123;</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">MoveView</span><span class=\"params\">(Context context)</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">super</span>(context);</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">MoveView</span><span class=\"params\">(Context context, AttributeSet attrs)</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">super</span>(context, attrs);</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">MoveView</span><span class=\"params\">(Context context, AttributeSet attrs, <span class=\"keyword\">int</span> defStyleAttr)</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">super</span>(context, attrs, defStyleAttr);</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">int</span> lastX;</div><div class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">int</span> lastY;</div><div class=\"line\"><span class=\"comment\">//    private int mWidth;</span></div><div class=\"line\"><span class=\"comment\">//    private int mHeight;</span></div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">    <span class=\"meta\">@Override</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">onTouchEvent</span><span class=\"params\">(MotionEvent event)</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">int</span> startX = (<span class=\"keyword\">int</span>) event.getRawX();</div><div class=\"line\">        <span class=\"keyword\">int</span> startY = (<span class=\"keyword\">int</span>) event.getRawY();</div><div class=\"line\"></div><div class=\"line\">        <span class=\"keyword\">switch</span> (event.getAction()) &#123;</div><div class=\"line\">            <span class=\"keyword\">case</span> MotionEvent.ACTION_DOWN:</div><div class=\"line\">                <span class=\"keyword\">break</span>;</div><div class=\"line\"></div><div class=\"line\">            <span class=\"keyword\">case</span> MotionEvent.ACTION_MOVE:</div><div class=\"line\">                <span class=\"keyword\">if</span>(getLayoutParams() <span class=\"keyword\">instanceof</span> CoordinatorLayout.MarginLayoutParams) &#123;</div><div class=\"line\">                    CoordinatorLayout.MarginLayoutParams layoutParams = (CoordinatorLayout.MarginLayoutParams) getLayoutParams();</div><div class=\"line\"></div><div class=\"line\">                    <span class=\"keyword\">int</span> left = layoutParams.leftMargin + startX - lastX;</div><div class=\"line\">                    <span class=\"keyword\">int</span> top = layoutParams.topMargin + startY - lastY;</div><div class=\"line\"></div><div class=\"line\">                    layoutParams.leftMargin = left;</div><div class=\"line\">                    layoutParams.topMargin = top;</div><div class=\"line\">                    setLayoutParams(layoutParams);</div><div class=\"line\"></div><div class=\"line\">                    <span class=\"comment\">//请求</span></div><div class=\"line\">                    requestLayout();</div><div class=\"line\">                &#125;</div><div class=\"line\">                <span class=\"keyword\">break</span>;</div><div class=\"line\"></div><div class=\"line\">            <span class=\"keyword\">case</span> MotionEvent.ACTION_UP:</div><div class=\"line\">                <span class=\"keyword\">break</span>;</div><div class=\"line\">        &#125;</div><div class=\"line\">        lastX = startX;</div><div class=\"line\">        lastY = startY;</div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">true</span>;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p><strong>放置布局：</strong></p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">android.support.design.widget.CoordinatorLayout</span> <span class=\"attr\">xmlns:android</span>=<span class=\"string\">\"http://schemas.android.com/apk/res/android\"</span></div><div class=\"line\">    <span class=\"attr\">xmlns:tools</span>=<span class=\"string\">\"http://schemas.android.com/tools\"</span></div><div class=\"line\">    <span class=\"attr\">xmlns:app</span>=<span class=\"string\">\"http://schemas.android.com/apk/res-auto\"</span></div><div class=\"line\">    <span class=\"attr\">android:id</span>=<span class=\"string\">\"@+id/activity_main\"</span></div><div class=\"line\">    <span class=\"attr\">android:layout_width</span>=<span class=\"string\">\"match_parent\"</span></div><div class=\"line\">    <span class=\"attr\">android:layout_height</span>=<span class=\"string\">\"match_parent\"</span></div><div class=\"line\">    <span class=\"attr\">tools:context</span>=<span class=\"string\">\"com.test.coordinatorlayouttest.MainActivity\"</span>&gt;</span></div><div class=\"line\"></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">Button</span></div><div class=\"line\">        <span class=\"attr\">android:layout_width</span>=<span class=\"string\">\"40dp\"</span></div><div class=\"line\">        <span class=\"attr\">android:layout_height</span>=<span class=\"string\">\"80dp\"</span></div><div class=\"line\">        <span class=\"attr\">android:text</span>=<span class=\"string\">\"button\"</span></div><div class=\"line\">        <span class=\"attr\">app:layout_behavior</span>=<span class=\"string\">\"@string/DodoBehavior\"</span>/&gt;</span></div><div class=\"line\"></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">com.test.coordinatorlayouttest.childview.MoveView</span></div><div class=\"line\">        <span class=\"attr\">android:layout_width</span>=<span class=\"string\">\"wrap_content\"</span></div><div class=\"line\">        <span class=\"attr\">android:layout_height</span>=<span class=\"string\">\"wrap_content\"</span></div><div class=\"line\">        <span class=\"attr\">android:text</span>=<span class=\"string\">\"Hello World!\"</span></div><div class=\"line\">        <span class=\"attr\">android:background</span>=<span class=\"string\">\"@color/colorPrimary\"</span></div><div class=\"line\">        <span class=\"attr\">android:padding</span>=<span class=\"string\">\"20dp\"</span>/&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">android.support.design.widget.CoordinatorLayout</span>&gt;</span></div></pre></td></tr></table></figure>\n<p>在Button上添加layout_behaviors属性。<br>在strings文件中：<string name=\"DodoBehavior\">com.test.coordinatorlayouttest.behavior.DodoBehavior</string></p>\n<p>这样就把Button添加了Behavior行为。</p>\n<p><strong>Behavior</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">DodoBehavior</span> <span class=\"keyword\">extends</span> <span class=\"title\">CoordinatorLayout</span>.<span class=\"title\">Behavior</span>&lt;<span class=\"title\">Button</span>&gt; </span>&#123;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">final</span> Context context;</div><div class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> width;</div><div class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> height;</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">DodoBehavior</span><span class=\"params\">(Context context, AttributeSet attrs)</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">super</span>(context, attrs);</div><div class=\"line\">        <span class=\"keyword\">this</span>.context = context;</div><div class=\"line\">        DisplayMetrics display =   context.getResources().getDisplayMetrics();</div><div class=\"line\">        width = display.widthPixels;</div><div class=\"line\">        height = display.heightPixels;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"meta\">@Override</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">layoutDependsOn</span><span class=\"params\">(CoordinatorLayout parent, Button child, View dependency)</span> </span>&#123;</div><div class=\"line\">        <span class=\"comment\">//建立依赖关系</span></div><div class=\"line\">        <span class=\"comment\">//如果dependency 是 DodoMoveView类型， 就依赖</span></div><div class=\"line\">        <span class=\"comment\">//当然，也可以通过自定义View传入id 比对，或者别的方式，来设置是否跟着触发</span></div><div class=\"line\">        <span class=\"keyword\">return</span> dependency <span class=\"keyword\">instanceof</span> MoveView;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"meta\">@Override</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">onDependentViewChanged</span><span class=\"params\">(CoordinatorLayout parent, Button child, View dependency)</span> </span>&#123;</div><div class=\"line\">        <span class=\"comment\">//这里可以设置对应view的大小和位置</span></div><div class=\"line\">        <span class=\"comment\">//自己返回true， 则改变， 返回false， 自己不改变 位置和大小</span></div><div class=\"line\"></div><div class=\"line\">        <span class=\"comment\">//根据dependency的位置，设置Button的位置</span></div><div class=\"line\">        <span class=\"keyword\">int</span> top = dependency.getTop();</div><div class=\"line\">        <span class=\"keyword\">int</span> left = dependency.getLeft();</div><div class=\"line\"></div><div class=\"line\">        <span class=\"keyword\">int</span> x = width - left - child.getWidth();</div><div class=\"line\">        <span class=\"keyword\">int</span> y = height - top - child.getHeight();</div><div class=\"line\"></div><div class=\"line\">        setPosition(child, x, y);</div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">true</span>;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">setPosition</span><span class=\"params\">(View v, <span class=\"keyword\">int</span> x, <span class=\"keyword\">int</span> y)</span> </span>&#123;</div><div class=\"line\">        CoordinatorLayout.MarginLayoutParams layoutParams = (CoordinatorLayout.MarginLayoutParams) v.getLayoutParams();</div><div class=\"line\">        layoutParams.leftMargin = x;</div><div class=\"line\">        layoutParams.topMargin = y;</div><div class=\"line\">        layoutParams.width = y/<span class=\"number\">2</span>;</div><div class=\"line\">        v.setLayoutParams(layoutParams);</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<ul>\n<li>layoutDependsOn方法，用于建立依赖关系，返回ture表示建立依赖关系。dependency instanceof MoveView;表示，如果是MoveView类型就建立依赖关系。也可以获取view的id来建立依赖关系。</li>\n<li>onDependentViewChanged方法，用于改变对应view的大小和位置，返回true表示改变。</li>\n</ul>\n<h3 id=\"实战\"><a href=\"#实战\" class=\"headerlink\" title=\"实战\"></a>实战</h3>"},{"title":"Material Design UI组件学习笔记（1） ","date":"2016-11-10T03:43:02.000Z","_content":"## Material Design UI组件\n\n在Google I/O 2015大会上，谷歌发布了一个新的support library,里面包含了一些遵循Material Design's spec的UI组件。这些组件配合起来使用可以产生很好的效果。虽然Material Design风格没有在国内流行起来，但是这些组件还是很有学习的必要的。\n\n<!-- more --> \n\n## 组件的使用\n1、首先添加两个包：\n>\n    compile 'com.android.support:appcompat-v7:24.2.1'\n    compile 'com.android.support:design:24.2.1'\n\n2、控件使用说明：\n<a href=\"#Snackbar\">1、Snackbar和 FloatingActionButton的使用</a>\n<a href=\"#Coordinator\">2、CoordinatorLayout的使用</a>\n\n---------\n\n<a id=\"Snackbar\"></a>\n### Snackbar和 FloatingActionButton的使用\n * Snackbar有点类似于以前的Toast,但是它更加灵活一些，可以添加自定义可选操作等。\n * FloatingActionButton顾名思义，它是一个可浮动的button,配合CoordinatorLayout可以实现一些交互效果\n\n### Snackbar\n```java\n//snackbar的用法（和Toast类似，多添加了setAction()方法）\nSnackbar.make(mListView,strs[position], Snackbar.LENGTH_SHORT)\n        .setAction(\"action\", new View.OnClickListener() {\n            @Override\n            public void onClick(View v) {\n                Toast.makeText(mContext, \"点击了Snackbar\", Toast.LENGTH_SHORT).show();\n            }\n        })\n        .show();\n```\n\n### FloatingActionButton的简单使用：\n>可以参考鸿大神的博客：[FloatingActionButton 完全解析][1]\n\n### FloatingActionButton配合CoordinatorLayout使用：\n\n1、配置xml文件\n```html\n    <!-- xml文件 -->\n    <android.support.design.widget.CoordinatorLayout\n        xmlns:android=\"http://schemas.android.com/apk/res/android\"\n        android:layout_width=\"match_parent\"\n        android:layout_height=\"match_parent\">\n\n        <android.support.design.widget.FloatingActionButton\n            android:id=\"@+id/fab\"\n            android:layout_width=\"wrap_content\"\n            android:layout_height=\"wrap_content\"\n            android:layout_gravity=\"end|bottom\"\n            android:layout_margin=\"40dp\"\n            android:background=\"@drawable/fab\"\n            android:src=\"@drawable/btn_sousuo\" />\n\n    </android.support.design.widget.CoordinatorLayout>\n\n```\n\n2、设置activity代码\n```java\n//activity\npublic class FlyingButtonActivity extends BaseActivity{\n\n    private FloatingActionButton mFloating;\n\n    @Override\n    protected void onCreate(@Nullable Bundle savedInstanceState) {\n        super.onCreate(savedInstanceState);\n        \n        setContentView(R.layout.activity_flying_button);\n\n        mFloating = (FloatingActionButton) findViewById(R.id.fab);\n        mFloating.setOnClickListener(new View.OnClickListener() {\n            @Override\n            public void onClick(View v) {\n               Snackbar.make(mFloating,\"点击浮动图标\",Snackbar.LENGTH_SHORT)\n                       .setAction(\"action\", new View.OnClickListener() {\n                           @Override\n                           public void onClick(View v) {\n                               Toast.makeText(FlyingButtonActivity.this, \"点击了Action\", Toast.LENGTH_SHORT).show();\n                           }\n                       }).show();\n            }\n        });\n    }\n\n}\n```\n\n**3、显示效果：**\n>    floatingButton在snackbar出现时，往上移动。\n\n**4、为什么会出现这样的效果？**\n>   1、首先要了解CoordinatorLayout的作用。它是用来协调子类控件的行为。\n    2、FloatingActionButton默认实现了一个FloatingActionButton.Behavior。它可以直接在CoordinatorLayout使用。\n\n\n<a name=\"Coordinator\"></a>\n### CoordinatorLayout的使用：\n>顾名思义，这个控件的目的就是协调它里面View的行为。\n它需要于子类配合使用。这里我们看 CoordinatorLayout + AppBarLayout + NestedScrollView配合使用的效果。（一般CoordinatorLayout的直接子类都是这个两个）  \n\n**1、首先重点介绍AppBarLayout：**\n> AppBarLayout具有Linearlayout垂直布局的特性。\n\n```html\n     <android.support.design.widget.CoordinatorLayout\n         xmlns:android=\"http://schemas.android.com/apk/res/android\"\n         xmlns:app=\"http://schemas.android.com/apk/res-auto\"\n         android:layout_width=\"match_parent\"\n         android:layout_height=\"match_parent\">\n    \n     <!-- AppBarLayout -->\n     <!--1、AppBarLayout最好是CoordinatorLayout的直接子view -->\n     <android.support.design.widget.AppBarLayout\n             android:layout_height=\"wrap_content\"\n             android:layout_width=\"match_parent\">\n        <!--2 、AppBarLayout的子view：需要设置app:layout_scrollFlags-->\n         <android.support.v7.widget.Toolbar\n                 ...\n                 app:layout_scrollFlags=\"scroll|enterAlways\"/>\n\n         <android.support.design.widget.TabLayout\n                 ...\n                 app:layout_scrollFlags=\"scroll|enterAlways\"/>\n\n     </android.support.design.widget.AppBarLayout>\n\n     <!-- NestedScrollView -->\n     <!-- 3、指定behavior属性为AppBarLayout.ScrollingViewBehavior -->\n     <android.support.v4.widget.NestedScrollView\n             android:layout_width=\"match_parent\"\n             android:layout_height=\"match_parent\"\n             app:layout_behavior=\"@string/appbar_scrolling_view_behavior\">\n\n     </android.support.v4.widget.NestedScrollView>\n\n </android.support.design.widget.CoordinatorLayout>\n\n```\n\n* 1、AppBarLayout和NestedScrollView作为CoordinatorLayout直接继承子类。\n* 2、AppBarLayout的子类需要设置layout_scrollFlags这个属性：\n    - scroll 子类伴随着滚动事件而滚出或滚进屏幕\n        + 注意点1:如果使用了其他值，必定要使用这个值才能起作用\n        + 注意点2:如果在这个子类前面的任何其他子类没有设置这个值，那么这个子类的设置将失去作用。\n    - enterAlways 快速返回\n        + 注意点1:向上滑动时，总是最后一个滚出屏幕的。\n        + 注意点2:只要向下滑动（不管在哪个位置），都会跟着出来。\n    - enterAlwaysCollapsed enterAlways的附加值 比scroll先向下滚动一个附加值，之后等scroll滚动完成后，在向下滚。\n        + 配合android:minHeight属性一起使用。\n    - exitUntilCollapsed 于enterAlwaysCollapsed相同原理，但是它是针对向上滚动的情况。\n    - snap 吸附效果，它不会出现停留在中间的情况。要不就完全隐藏，要不就完全出现。\n* 3、需要给一个有滑动机制的控件添加app:layout_behavior=\"@string/appbar_scrolling_view_behavior\"属性。这里我们使用的是NestedScrollView（它的作用也很强大，后面分析）\n\n* 4、demo演示效果：\n```html\n<!-- xml文件 -->\n<android.support.design.widget.CoordinatorLayout xmlns:android=\"http://schemas.android.com/apk/res/android\"\n    xmlns:app=\"http://schemas.android.com/apk/res-auto\"\n    android:id=\"@+id/main_content\"\n    android:layout_width=\"match_parent\"\n    android:layout_height=\"match_parent\">\n\n    <!--1、AppBarLayout最好是CoordinatorLayout的直接子view -->\n    <android.support.design.widget.AppBarLayout\n        android:id=\"@+id/appbar\"\n        android:layout_width=\"match_parent\"\n        android:layout_height=\"wrap_content\"\n        android:theme=\"@style/ThemeOverlay.AppCompat.Dark.ActionBar\">\n        <!--2 、AppBarLayout的子view：需要设置app:layout_scrollFlags-->\n        <android.support.v7.widget.Toolbar\n            android:id=\"@+id/toolbar\"\n            android:layout_width=\"match_parent\"\n            android:layout_height=\"?attr/actionBarSize\"\n            android:background=\"?attr/colorPrimary\"\n            android:title=\"Title\"\n            app:popupTheme=\"@style/ThemeOverlay.AppCompat.Light\"\n            app:layout_scrollFlags=\"scroll\" />\n\n        <ImageView\n            android:id=\"@+id/mIv\"\n            app:layout_scrollFlags=\"scroll|snap\"\n            android:layout_width=\"match_parent\"\n            android:layout_height=\"100dp\"\n            android:scaleType=\"centerCrop\"\n            android:background=\"@android:color/holo_blue_bright\" />\n\n    </android.support.design.widget.AppBarLayout>\n\n    <!-- 3、指定behavior属性为AppBarLayout.ScrollingViewBehavior -->\n    <android.support.v4.widget.NestedScrollView\n        android:layout_width=\"match_parent\"\n        android:layout_height=\"match_parent\"\n        app:layout_behavior=\"@string/appbar_scrolling_view_behavior\">\n        <LinearLayout\n            android:layout_width=\"match_parent\"\n            android:layout_height=\"match_parent\"\n            android:orientation=\"vertical\">\n            <TextView\n                android:layout_width=\"match_parent\"\n                android:layout_height=\"180dp\"\n                android:layout_margin=\"10dp\"\n                android:background=\"#6660c6df\"\n                android:gravity=\"center\"\n                android:text=\"折\"\n                android:textSize=\"26dp\"\n                android:transitionName=\"zi\" />\n            <TextView\n                android:layout_width=\"match_parent\"\n                android:layout_height=\"180dp\"\n                android:layout_margin=\"10dp\"\n                android:background=\"#6660c6df\"\n                android:gravity=\"center\"\n                android:text=\"折叠\"\n                android:textSize=\"26dp\"\n                android:transitionName=\"zi\" />\n            <TextView\n                android:layout_width=\"match_parent\"\n                android:layout_height=\"180dp\"\n                android:layout_margin=\"10dp\"\n                android:background=\"#6660c6df\"\n                android:gravity=\"center\"\n                android:text=\"折叠示\"\n                android:textSize=\"26dp\"\n                android:transitionName=\"zi\" />\n            <TextView\n                android:layout_width=\"match_parent\"\n                android:layout_height=\"180dp\"\n                android:layout_margin=\"10dp\"\n                android:background=\"#6660c6df\"\n                android:gravity=\"center\"\n                android:text=\"折叠示例\"\n                android:textSize=\"26dp\"\n                android:transitionName=\"zi\" />\n        </LinearLayout>\n    </android.support.v4.widget.NestedScrollView>\n</android.support.design.widget.CoordinatorLayout>\n```\n\n```java\n<!-- activity -->\npublic class AppBarActivity extends BaseActivity{\n\n    private Toolbar toolbar;\n\n    @Override\n    protected void onCreate(Bundle savedInstanceState) {\n        super.onCreate(savedInstanceState);\n        setContentView(R.layout.activity_app_bar);\n        toolbar = (Toolbar) findViewById(R.id.toolbar);\n        toolbar.setTitle(\"Title\");\n        setSupportActionBar(toolbar);\n    }\n}\n```\n\n*注意：在style中要设置主题为NoActionBar*\n\n**2、AppBarLayout + CollapsingToolbarLayout**\n>好了，我们现在又多了一个组件。看看CollapsingToolbarLayout是怎么用的。\nCollapsingToolbarLayout作用是提供了可以折叠的Toolbar（CollapsingToolbarLayout是一个实现了折叠工具栏效果Toolbar的包装器，它被设计为AppBarLayout的直接子View。）\n\n实例说明：\n```html\n<android.support.design.widget.CoordinatorLayout xmlns:android=\"http://schemas.android.com/apk/res/android\"\n    xmlns:app=\"http://schemas.android.com/apk/res-auto\"\n    xmlns:tools=\"http://schemas.android.com/tools\"\n    android:layout_width=\"match_parent\"\n    android:layout_height=\"match_parent\"\n    android:fitsSystemWindows=\"true\"\n    android:clipToPadding=\"false\"\n    >\n\n    <android.support.design.widget.AppBarLayout\n        android:layout_width=\"match_parent\"\n        android:layout_height=\"300dp\"\n        android:fitsSystemWindows=\"true\"\n        android:theme=\"@style/ThemeOverlay.AppCompat.Dark.ActionBar\">\n\n        <android.support.design.widget.CollapsingToolbarLayout\n            android:id=\"@+id/collapsing_toolbar\"\n            android:layout_width=\"match_parent\"\n            android:layout_height=\"match_parent\"\n            app:contentScrim=\"?attr/colorPrimary\"\n            app:expandedTitleMarginEnd=\"64dp\"\n            app:expandedTitleMarginStart=\"48dp\"\n            app:layout_scrollFlags=\"scroll|exitUntilCollapsed\">\n\n            <ImageView\n                android:id=\"@+id/ivImage\"\n                android:layout_width=\"match_parent\"\n                android:layout_height=\"match_parent\"\n                android:fitsSystemWindows=\"true\"\n                android:transitionName=\"transition_book_img\"\n                android:scaleType=\"centerCrop\"\n                app:layout_collapseMode=\"parallax\"\n                app:layout_collapseParallaxMultiplier=\"0.7\" />\n\n            <android.support.v7.widget.Toolbar\n                android:id=\"@+id/toolbar\"\n                android:layout_width=\"match_parent\"\n                android:layout_height=\"?attr/actionBarSize\"\n                app:layout_collapseMode=\"pin\"\n                app:layout_scrollFlags=\"scroll|enterAlways\"\n                app:popupTheme=\"@style/ThemeOverlay.AppCompat.Light\" />\n        </android.support.design.widget.CollapsingToolbarLayout>\n    </android.support.design.widget.AppBarLayout>\n\n    <android.support.v4.widget.NestedScrollView\n        android:layout_width=\"match_parent\"\n        android:layout_height=\"match_parent\"\n        app:layout_behavior=\"@string/appbar_scrolling_view_behavior\">\n\n        <LinearLayout\n            android:layout_width=\"match_parent\"\n            android:layout_height=\"match_parent\"\n            android:orientation=\"vertical\">\n\n            <TextView\n                android:layout_width=\"match_parent\"\n                android:layout_height=\"180dp\"\n                android:layout_margin=\"10dp\"\n                android:background=\"#6660c6df\"\n                android:gravity=\"center\"\n                android:text=\"折\"\n                android:textSize=\"26dp\"\n                android:transitionName=\"zi\" />\n\n            <TextView\n                android:layout_width=\"match_parent\"\n                android:layout_height=\"180dp\"\n                android:layout_margin=\"10dp\"\n                android:background=\"#6660c6df\"\n                android:gravity=\"center\"\n                android:text=\"折叠\"\n                android:textSize=\"26dp\"\n                android:transitionName=\"zi\" />\n\n            <TextView\n                android:layout_width=\"match_parent\"\n                android:layout_height=\"180dp\"\n                android:layout_margin=\"10dp\"\n                android:background=\"#6660c6df\"\n                android:gravity=\"center\"\n                android:text=\"折叠示\"\n                android:textSize=\"26dp\"\n                android:transitionName=\"zi\" />\n\n            <TextView\n                android:layout_width=\"match_parent\"\n                android:layout_height=\"180dp\"\n                android:layout_margin=\"10dp\"\n                android:background=\"#6660c6df\"\n                android:gravity=\"center\"\n                android:text=\"折叠示例\"\n                android:textSize=\"26dp\"\n                android:transitionName=\"zi\" />\n\n\n        </LinearLayout>\n\n    </android.support.v4.widget.NestedScrollView>\n\n</android.support.design.widget.CoordinatorLayout>\n```\n\n```java\npublic class ToolbarLayoutActivity extends BaseActivity{\n\n    private CollapsingToolbarLayout mCollapsing;\n\n    @Override\n    protected void onCreate(@Nullable Bundle savedInstanceState) {\n        super.onCreate(savedInstanceState);\n\n        setContentView(R.layout.activity_tool_layout);\n\n        initFindView();\n        initView();\n    }\n\n    private void initView() {\n        //设置标题的一些属性\n        mCollapsing.setTitle(\"设置ToolBar\");\n        mCollapsing.setCollapsedTitleGravity(Gravity.CENTER); //标题收缩后的位置，居中\n        mCollapsing.setExpandedTitleColor(Color.TRANSPARENT); // 标题展示时颜色\n        mCollapsing.setCollapsedTitleTextColor(Color.WHITE); // 标题收缩时的颜色\n\n        //沉浸式内容(改变收缩后toolbar背景，有渐变效果)\n        //也可以通过app:contentScrim=”?attr/colorPrimary”来改变效果\n        mCollapsing.setContentScrim(getResources().getDrawable(R.drawable.sy_2010091620583620405));\n\n        //沉浸式状态栏\n        collapsingToolbarLayout.setStatusBarScrim(getResources().getDrawable(R.drawable.sy_2010091620583620405));\n    }\n\n    private void initFindView() {\n        mCollapsing = (CollapsingToolbarLayout) findViewById(R.id.collapsing_toolbar);\n    }\n}\n```\n\n说明：\n    * 折叠标题 （如上述代码）。\n    * 视差滚动，通过设置app:layout_collapseParallaxMultiplier属性获取。视差值介于0.0-1.0之间。\n    * 顶部悬浮，通过设置app:layout_collapseMode设置折叠模式\n        - “pin”：固定模式，在折叠的时候最后固定在顶端\n        - “parallax”：视差模式，在折叠的时候会有个视差折叠的效果\n\n\n[1]:http://blog.csdn.net/lmj623565791/article/details/46678867\n\n\n","source":"_posts/Material-Design学习笔记（1）.md","raw":"---\ntitle: 'Material Design UI组件学习笔记（1） '\ndate: 2016-11-10 11:43:02\ntags: [Android,Material Design]\n---\n## Material Design UI组件\n\n在Google I/O 2015大会上，谷歌发布了一个新的support library,里面包含了一些遵循Material Design's spec的UI组件。这些组件配合起来使用可以产生很好的效果。虽然Material Design风格没有在国内流行起来，但是这些组件还是很有学习的必要的。\n\n<!-- more --> \n\n## 组件的使用\n1、首先添加两个包：\n>\n    compile 'com.android.support:appcompat-v7:24.2.1'\n    compile 'com.android.support:design:24.2.1'\n\n2、控件使用说明：\n<a href=\"#Snackbar\">1、Snackbar和 FloatingActionButton的使用</a>\n<a href=\"#Coordinator\">2、CoordinatorLayout的使用</a>\n\n---------\n\n<a id=\"Snackbar\"></a>\n### Snackbar和 FloatingActionButton的使用\n * Snackbar有点类似于以前的Toast,但是它更加灵活一些，可以添加自定义可选操作等。\n * FloatingActionButton顾名思义，它是一个可浮动的button,配合CoordinatorLayout可以实现一些交互效果\n\n### Snackbar\n```java\n//snackbar的用法（和Toast类似，多添加了setAction()方法）\nSnackbar.make(mListView,strs[position], Snackbar.LENGTH_SHORT)\n        .setAction(\"action\", new View.OnClickListener() {\n            @Override\n            public void onClick(View v) {\n                Toast.makeText(mContext, \"点击了Snackbar\", Toast.LENGTH_SHORT).show();\n            }\n        })\n        .show();\n```\n\n### FloatingActionButton的简单使用：\n>可以参考鸿大神的博客：[FloatingActionButton 完全解析][1]\n\n### FloatingActionButton配合CoordinatorLayout使用：\n\n1、配置xml文件\n```html\n    <!-- xml文件 -->\n    <android.support.design.widget.CoordinatorLayout\n        xmlns:android=\"http://schemas.android.com/apk/res/android\"\n        android:layout_width=\"match_parent\"\n        android:layout_height=\"match_parent\">\n\n        <android.support.design.widget.FloatingActionButton\n            android:id=\"@+id/fab\"\n            android:layout_width=\"wrap_content\"\n            android:layout_height=\"wrap_content\"\n            android:layout_gravity=\"end|bottom\"\n            android:layout_margin=\"40dp\"\n            android:background=\"@drawable/fab\"\n            android:src=\"@drawable/btn_sousuo\" />\n\n    </android.support.design.widget.CoordinatorLayout>\n\n```\n\n2、设置activity代码\n```java\n//activity\npublic class FlyingButtonActivity extends BaseActivity{\n\n    private FloatingActionButton mFloating;\n\n    @Override\n    protected void onCreate(@Nullable Bundle savedInstanceState) {\n        super.onCreate(savedInstanceState);\n        \n        setContentView(R.layout.activity_flying_button);\n\n        mFloating = (FloatingActionButton) findViewById(R.id.fab);\n        mFloating.setOnClickListener(new View.OnClickListener() {\n            @Override\n            public void onClick(View v) {\n               Snackbar.make(mFloating,\"点击浮动图标\",Snackbar.LENGTH_SHORT)\n                       .setAction(\"action\", new View.OnClickListener() {\n                           @Override\n                           public void onClick(View v) {\n                               Toast.makeText(FlyingButtonActivity.this, \"点击了Action\", Toast.LENGTH_SHORT).show();\n                           }\n                       }).show();\n            }\n        });\n    }\n\n}\n```\n\n**3、显示效果：**\n>    floatingButton在snackbar出现时，往上移动。\n\n**4、为什么会出现这样的效果？**\n>   1、首先要了解CoordinatorLayout的作用。它是用来协调子类控件的行为。\n    2、FloatingActionButton默认实现了一个FloatingActionButton.Behavior。它可以直接在CoordinatorLayout使用。\n\n\n<a name=\"Coordinator\"></a>\n### CoordinatorLayout的使用：\n>顾名思义，这个控件的目的就是协调它里面View的行为。\n它需要于子类配合使用。这里我们看 CoordinatorLayout + AppBarLayout + NestedScrollView配合使用的效果。（一般CoordinatorLayout的直接子类都是这个两个）  \n\n**1、首先重点介绍AppBarLayout：**\n> AppBarLayout具有Linearlayout垂直布局的特性。\n\n```html\n     <android.support.design.widget.CoordinatorLayout\n         xmlns:android=\"http://schemas.android.com/apk/res/android\"\n         xmlns:app=\"http://schemas.android.com/apk/res-auto\"\n         android:layout_width=\"match_parent\"\n         android:layout_height=\"match_parent\">\n    \n     <!-- AppBarLayout -->\n     <!--1、AppBarLayout最好是CoordinatorLayout的直接子view -->\n     <android.support.design.widget.AppBarLayout\n             android:layout_height=\"wrap_content\"\n             android:layout_width=\"match_parent\">\n        <!--2 、AppBarLayout的子view：需要设置app:layout_scrollFlags-->\n         <android.support.v7.widget.Toolbar\n                 ...\n                 app:layout_scrollFlags=\"scroll|enterAlways\"/>\n\n         <android.support.design.widget.TabLayout\n                 ...\n                 app:layout_scrollFlags=\"scroll|enterAlways\"/>\n\n     </android.support.design.widget.AppBarLayout>\n\n     <!-- NestedScrollView -->\n     <!-- 3、指定behavior属性为AppBarLayout.ScrollingViewBehavior -->\n     <android.support.v4.widget.NestedScrollView\n             android:layout_width=\"match_parent\"\n             android:layout_height=\"match_parent\"\n             app:layout_behavior=\"@string/appbar_scrolling_view_behavior\">\n\n     </android.support.v4.widget.NestedScrollView>\n\n </android.support.design.widget.CoordinatorLayout>\n\n```\n\n* 1、AppBarLayout和NestedScrollView作为CoordinatorLayout直接继承子类。\n* 2、AppBarLayout的子类需要设置layout_scrollFlags这个属性：\n    - scroll 子类伴随着滚动事件而滚出或滚进屏幕\n        + 注意点1:如果使用了其他值，必定要使用这个值才能起作用\n        + 注意点2:如果在这个子类前面的任何其他子类没有设置这个值，那么这个子类的设置将失去作用。\n    - enterAlways 快速返回\n        + 注意点1:向上滑动时，总是最后一个滚出屏幕的。\n        + 注意点2:只要向下滑动（不管在哪个位置），都会跟着出来。\n    - enterAlwaysCollapsed enterAlways的附加值 比scroll先向下滚动一个附加值，之后等scroll滚动完成后，在向下滚。\n        + 配合android:minHeight属性一起使用。\n    - exitUntilCollapsed 于enterAlwaysCollapsed相同原理，但是它是针对向上滚动的情况。\n    - snap 吸附效果，它不会出现停留在中间的情况。要不就完全隐藏，要不就完全出现。\n* 3、需要给一个有滑动机制的控件添加app:layout_behavior=\"@string/appbar_scrolling_view_behavior\"属性。这里我们使用的是NestedScrollView（它的作用也很强大，后面分析）\n\n* 4、demo演示效果：\n```html\n<!-- xml文件 -->\n<android.support.design.widget.CoordinatorLayout xmlns:android=\"http://schemas.android.com/apk/res/android\"\n    xmlns:app=\"http://schemas.android.com/apk/res-auto\"\n    android:id=\"@+id/main_content\"\n    android:layout_width=\"match_parent\"\n    android:layout_height=\"match_parent\">\n\n    <!--1、AppBarLayout最好是CoordinatorLayout的直接子view -->\n    <android.support.design.widget.AppBarLayout\n        android:id=\"@+id/appbar\"\n        android:layout_width=\"match_parent\"\n        android:layout_height=\"wrap_content\"\n        android:theme=\"@style/ThemeOverlay.AppCompat.Dark.ActionBar\">\n        <!--2 、AppBarLayout的子view：需要设置app:layout_scrollFlags-->\n        <android.support.v7.widget.Toolbar\n            android:id=\"@+id/toolbar\"\n            android:layout_width=\"match_parent\"\n            android:layout_height=\"?attr/actionBarSize\"\n            android:background=\"?attr/colorPrimary\"\n            android:title=\"Title\"\n            app:popupTheme=\"@style/ThemeOverlay.AppCompat.Light\"\n            app:layout_scrollFlags=\"scroll\" />\n\n        <ImageView\n            android:id=\"@+id/mIv\"\n            app:layout_scrollFlags=\"scroll|snap\"\n            android:layout_width=\"match_parent\"\n            android:layout_height=\"100dp\"\n            android:scaleType=\"centerCrop\"\n            android:background=\"@android:color/holo_blue_bright\" />\n\n    </android.support.design.widget.AppBarLayout>\n\n    <!-- 3、指定behavior属性为AppBarLayout.ScrollingViewBehavior -->\n    <android.support.v4.widget.NestedScrollView\n        android:layout_width=\"match_parent\"\n        android:layout_height=\"match_parent\"\n        app:layout_behavior=\"@string/appbar_scrolling_view_behavior\">\n        <LinearLayout\n            android:layout_width=\"match_parent\"\n            android:layout_height=\"match_parent\"\n            android:orientation=\"vertical\">\n            <TextView\n                android:layout_width=\"match_parent\"\n                android:layout_height=\"180dp\"\n                android:layout_margin=\"10dp\"\n                android:background=\"#6660c6df\"\n                android:gravity=\"center\"\n                android:text=\"折\"\n                android:textSize=\"26dp\"\n                android:transitionName=\"zi\" />\n            <TextView\n                android:layout_width=\"match_parent\"\n                android:layout_height=\"180dp\"\n                android:layout_margin=\"10dp\"\n                android:background=\"#6660c6df\"\n                android:gravity=\"center\"\n                android:text=\"折叠\"\n                android:textSize=\"26dp\"\n                android:transitionName=\"zi\" />\n            <TextView\n                android:layout_width=\"match_parent\"\n                android:layout_height=\"180dp\"\n                android:layout_margin=\"10dp\"\n                android:background=\"#6660c6df\"\n                android:gravity=\"center\"\n                android:text=\"折叠示\"\n                android:textSize=\"26dp\"\n                android:transitionName=\"zi\" />\n            <TextView\n                android:layout_width=\"match_parent\"\n                android:layout_height=\"180dp\"\n                android:layout_margin=\"10dp\"\n                android:background=\"#6660c6df\"\n                android:gravity=\"center\"\n                android:text=\"折叠示例\"\n                android:textSize=\"26dp\"\n                android:transitionName=\"zi\" />\n        </LinearLayout>\n    </android.support.v4.widget.NestedScrollView>\n</android.support.design.widget.CoordinatorLayout>\n```\n\n```java\n<!-- activity -->\npublic class AppBarActivity extends BaseActivity{\n\n    private Toolbar toolbar;\n\n    @Override\n    protected void onCreate(Bundle savedInstanceState) {\n        super.onCreate(savedInstanceState);\n        setContentView(R.layout.activity_app_bar);\n        toolbar = (Toolbar) findViewById(R.id.toolbar);\n        toolbar.setTitle(\"Title\");\n        setSupportActionBar(toolbar);\n    }\n}\n```\n\n*注意：在style中要设置主题为NoActionBar*\n\n**2、AppBarLayout + CollapsingToolbarLayout**\n>好了，我们现在又多了一个组件。看看CollapsingToolbarLayout是怎么用的。\nCollapsingToolbarLayout作用是提供了可以折叠的Toolbar（CollapsingToolbarLayout是一个实现了折叠工具栏效果Toolbar的包装器，它被设计为AppBarLayout的直接子View。）\n\n实例说明：\n```html\n<android.support.design.widget.CoordinatorLayout xmlns:android=\"http://schemas.android.com/apk/res/android\"\n    xmlns:app=\"http://schemas.android.com/apk/res-auto\"\n    xmlns:tools=\"http://schemas.android.com/tools\"\n    android:layout_width=\"match_parent\"\n    android:layout_height=\"match_parent\"\n    android:fitsSystemWindows=\"true\"\n    android:clipToPadding=\"false\"\n    >\n\n    <android.support.design.widget.AppBarLayout\n        android:layout_width=\"match_parent\"\n        android:layout_height=\"300dp\"\n        android:fitsSystemWindows=\"true\"\n        android:theme=\"@style/ThemeOverlay.AppCompat.Dark.ActionBar\">\n\n        <android.support.design.widget.CollapsingToolbarLayout\n            android:id=\"@+id/collapsing_toolbar\"\n            android:layout_width=\"match_parent\"\n            android:layout_height=\"match_parent\"\n            app:contentScrim=\"?attr/colorPrimary\"\n            app:expandedTitleMarginEnd=\"64dp\"\n            app:expandedTitleMarginStart=\"48dp\"\n            app:layout_scrollFlags=\"scroll|exitUntilCollapsed\">\n\n            <ImageView\n                android:id=\"@+id/ivImage\"\n                android:layout_width=\"match_parent\"\n                android:layout_height=\"match_parent\"\n                android:fitsSystemWindows=\"true\"\n                android:transitionName=\"transition_book_img\"\n                android:scaleType=\"centerCrop\"\n                app:layout_collapseMode=\"parallax\"\n                app:layout_collapseParallaxMultiplier=\"0.7\" />\n\n            <android.support.v7.widget.Toolbar\n                android:id=\"@+id/toolbar\"\n                android:layout_width=\"match_parent\"\n                android:layout_height=\"?attr/actionBarSize\"\n                app:layout_collapseMode=\"pin\"\n                app:layout_scrollFlags=\"scroll|enterAlways\"\n                app:popupTheme=\"@style/ThemeOverlay.AppCompat.Light\" />\n        </android.support.design.widget.CollapsingToolbarLayout>\n    </android.support.design.widget.AppBarLayout>\n\n    <android.support.v4.widget.NestedScrollView\n        android:layout_width=\"match_parent\"\n        android:layout_height=\"match_parent\"\n        app:layout_behavior=\"@string/appbar_scrolling_view_behavior\">\n\n        <LinearLayout\n            android:layout_width=\"match_parent\"\n            android:layout_height=\"match_parent\"\n            android:orientation=\"vertical\">\n\n            <TextView\n                android:layout_width=\"match_parent\"\n                android:layout_height=\"180dp\"\n                android:layout_margin=\"10dp\"\n                android:background=\"#6660c6df\"\n                android:gravity=\"center\"\n                android:text=\"折\"\n                android:textSize=\"26dp\"\n                android:transitionName=\"zi\" />\n\n            <TextView\n                android:layout_width=\"match_parent\"\n                android:layout_height=\"180dp\"\n                android:layout_margin=\"10dp\"\n                android:background=\"#6660c6df\"\n                android:gravity=\"center\"\n                android:text=\"折叠\"\n                android:textSize=\"26dp\"\n                android:transitionName=\"zi\" />\n\n            <TextView\n                android:layout_width=\"match_parent\"\n                android:layout_height=\"180dp\"\n                android:layout_margin=\"10dp\"\n                android:background=\"#6660c6df\"\n                android:gravity=\"center\"\n                android:text=\"折叠示\"\n                android:textSize=\"26dp\"\n                android:transitionName=\"zi\" />\n\n            <TextView\n                android:layout_width=\"match_parent\"\n                android:layout_height=\"180dp\"\n                android:layout_margin=\"10dp\"\n                android:background=\"#6660c6df\"\n                android:gravity=\"center\"\n                android:text=\"折叠示例\"\n                android:textSize=\"26dp\"\n                android:transitionName=\"zi\" />\n\n\n        </LinearLayout>\n\n    </android.support.v4.widget.NestedScrollView>\n\n</android.support.design.widget.CoordinatorLayout>\n```\n\n```java\npublic class ToolbarLayoutActivity extends BaseActivity{\n\n    private CollapsingToolbarLayout mCollapsing;\n\n    @Override\n    protected void onCreate(@Nullable Bundle savedInstanceState) {\n        super.onCreate(savedInstanceState);\n\n        setContentView(R.layout.activity_tool_layout);\n\n        initFindView();\n        initView();\n    }\n\n    private void initView() {\n        //设置标题的一些属性\n        mCollapsing.setTitle(\"设置ToolBar\");\n        mCollapsing.setCollapsedTitleGravity(Gravity.CENTER); //标题收缩后的位置，居中\n        mCollapsing.setExpandedTitleColor(Color.TRANSPARENT); // 标题展示时颜色\n        mCollapsing.setCollapsedTitleTextColor(Color.WHITE); // 标题收缩时的颜色\n\n        //沉浸式内容(改变收缩后toolbar背景，有渐变效果)\n        //也可以通过app:contentScrim=”?attr/colorPrimary”来改变效果\n        mCollapsing.setContentScrim(getResources().getDrawable(R.drawable.sy_2010091620583620405));\n\n        //沉浸式状态栏\n        collapsingToolbarLayout.setStatusBarScrim(getResources().getDrawable(R.drawable.sy_2010091620583620405));\n    }\n\n    private void initFindView() {\n        mCollapsing = (CollapsingToolbarLayout) findViewById(R.id.collapsing_toolbar);\n    }\n}\n```\n\n说明：\n    * 折叠标题 （如上述代码）。\n    * 视差滚动，通过设置app:layout_collapseParallaxMultiplier属性获取。视差值介于0.0-1.0之间。\n    * 顶部悬浮，通过设置app:layout_collapseMode设置折叠模式\n        - “pin”：固定模式，在折叠的时候最后固定在顶端\n        - “parallax”：视差模式，在折叠的时候会有个视差折叠的效果\n\n\n[1]:http://blog.csdn.net/lmj623565791/article/details/46678867\n\n\n","slug":"Material-Design学习笔记（1）","published":1,"updated":"2017-03-29T15:51:22.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj0v5msvr000ox5ypov0xzhy9","content":"<h2 id=\"Material-Design-UI组件\"><a href=\"#Material-Design-UI组件\" class=\"headerlink\" title=\"Material Design UI组件\"></a>Material Design UI组件</h2><p>在Google I/O 2015大会上，谷歌发布了一个新的support library,里面包含了一些遵循Material Design’s spec的UI组件。这些组件配合起来使用可以产生很好的效果。虽然Material Design风格没有在国内流行起来，但是这些组件还是很有学习的必要的。</p>\n<a id=\"more\"></a> \n<h2 id=\"组件的使用\"><a href=\"#组件的使用\" class=\"headerlink\" title=\"组件的使用\"></a>组件的使用</h2><p>1、首先添加两个包：<br>&gt;<br>    compile ‘com.android.support:appcompat-v7:24.2.1’<br>    compile ‘com.android.support:design:24.2.1’</p>\n<p>2、控件使用说明：<br><a href=\"#Snackbar\">1、Snackbar和 FloatingActionButton的使用</a><br><a href=\"#Coordinator\">2、CoordinatorLayout的使用</a></p>\n<hr>\n<p><a id=\"Snackbar\"></a></p>\n<h3 id=\"Snackbar和-FloatingActionButton的使用\"><a href=\"#Snackbar和-FloatingActionButton的使用\" class=\"headerlink\" title=\"Snackbar和 FloatingActionButton的使用\"></a>Snackbar和 FloatingActionButton的使用</h3><ul>\n<li>Snackbar有点类似于以前的Toast,但是它更加灵活一些，可以添加自定义可选操作等。</li>\n<li>FloatingActionButton顾名思义，它是一个可浮动的button,配合CoordinatorLayout可以实现一些交互效果</li>\n</ul>\n<h3 id=\"Snackbar\"><a href=\"#Snackbar\" class=\"headerlink\" title=\"Snackbar\"></a>Snackbar</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">//snackbar的用法（和Toast类似，多添加了setAction()方法）</span></div><div class=\"line\">Snackbar.make(mListView,strs[position], Snackbar.LENGTH_SHORT)</div><div class=\"line\">        .setAction(<span class=\"string\">\"action\"</span>, <span class=\"keyword\">new</span> View.OnClickListener() &#123;</div><div class=\"line\">            <span class=\"meta\">@Override</span></div><div class=\"line\">            <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onClick</span><span class=\"params\">(View v)</span> </span>&#123;</div><div class=\"line\">                Toast.makeText(mContext, <span class=\"string\">\"点击了Snackbar\"</span>, Toast.LENGTH_SHORT).show();</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;)</div><div class=\"line\">        .show();</div></pre></td></tr></table></figure>\n<h3 id=\"FloatingActionButton的简单使用：\"><a href=\"#FloatingActionButton的简单使用：\" class=\"headerlink\" title=\"FloatingActionButton的简单使用：\"></a>FloatingActionButton的简单使用：</h3><blockquote>\n<p>可以参考鸿大神的博客：<a href=\"http://blog.csdn.net/lmj623565791/article/details/46678867\" target=\"_blank\" rel=\"external\">FloatingActionButton 完全解析</a></p>\n</blockquote>\n<h3 id=\"FloatingActionButton配合CoordinatorLayout使用：\"><a href=\"#FloatingActionButton配合CoordinatorLayout使用：\" class=\"headerlink\" title=\"FloatingActionButton配合CoordinatorLayout使用：\"></a>FloatingActionButton配合CoordinatorLayout使用：</h3><p>1、配置xml文件<br><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">&lt;!-- xml文件 --&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">android.support.design.widget.CoordinatorLayout</span></span></div><div class=\"line\">    <span class=\"attr\">xmlns:android</span>=<span class=\"string\">\"http://schemas.android.com/apk/res/android\"</span></div><div class=\"line\">    <span class=\"attr\">android:layout_width</span>=<span class=\"string\">\"match_parent\"</span></div><div class=\"line\">    <span class=\"attr\">android:layout_height</span>=<span class=\"string\">\"match_parent\"</span>&gt;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">android.support.design.widget.FloatingActionButton</span></span></div><div class=\"line\">        <span class=\"attr\">android:id</span>=<span class=\"string\">\"@+id/fab\"</span></div><div class=\"line\">        <span class=\"attr\">android:layout_width</span>=<span class=\"string\">\"wrap_content\"</span></div><div class=\"line\">        <span class=\"attr\">android:layout_height</span>=<span class=\"string\">\"wrap_content\"</span></div><div class=\"line\">        <span class=\"attr\">android:layout_gravity</span>=<span class=\"string\">\"end|bottom\"</span></div><div class=\"line\">        <span class=\"attr\">android:layout_margin</span>=<span class=\"string\">\"40dp\"</span></div><div class=\"line\">        <span class=\"attr\">android:background</span>=<span class=\"string\">\"@drawable/fab\"</span></div><div class=\"line\">        <span class=\"attr\">android:src</span>=<span class=\"string\">\"@drawable/btn_sousuo\"</span> /&gt;</div><div class=\"line\"></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">android.support.design.widget.CoordinatorLayout</span>&gt;</span></div></pre></td></tr></table></figure></p>\n<p>2、设置activity代码<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">//activity</span></div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">FlyingButtonActivity</span> <span class=\"keyword\">extends</span> <span class=\"title\">BaseActivity</span></span>&#123;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">private</span> FloatingActionButton mFloating;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"meta\">@Override</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">onCreate</span><span class=\"params\">(@Nullable Bundle savedInstanceState)</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">super</span>.onCreate(savedInstanceState);</div><div class=\"line\">        </div><div class=\"line\">        setContentView(R.layout.activity_flying_button);</div><div class=\"line\"></div><div class=\"line\">        mFloating = (FloatingActionButton) findViewById(R.id.fab);</div><div class=\"line\">        mFloating.setOnClickListener(<span class=\"keyword\">new</span> View.OnClickListener() &#123;</div><div class=\"line\">            <span class=\"meta\">@Override</span></div><div class=\"line\">            <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onClick</span><span class=\"params\">(View v)</span> </span>&#123;</div><div class=\"line\">               Snackbar.make(mFloating,<span class=\"string\">\"点击浮动图标\"</span>,Snackbar.LENGTH_SHORT)</div><div class=\"line\">                       .setAction(<span class=\"string\">\"action\"</span>, <span class=\"keyword\">new</span> View.OnClickListener() &#123;</div><div class=\"line\">                           <span class=\"meta\">@Override</span></div><div class=\"line\">                           <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onClick</span><span class=\"params\">(View v)</span> </span>&#123;</div><div class=\"line\">                               Toast.makeText(FlyingButtonActivity.<span class=\"keyword\">this</span>, <span class=\"string\">\"点击了Action\"</span>, Toast.LENGTH_SHORT).show();</div><div class=\"line\">                           &#125;</div><div class=\"line\">                       &#125;).show();</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;);</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p><strong>3、显示效果：</strong></p>\n<blockquote>\n<p>   floatingButton在snackbar出现时，往上移动。</p>\n</blockquote>\n<p><strong>4、为什么会出现这样的效果？</strong></p>\n<blockquote>\n<p>  1、首先要了解CoordinatorLayout的作用。它是用来协调子类控件的行为。<br>    2、FloatingActionButton默认实现了一个FloatingActionButton.Behavior。它可以直接在CoordinatorLayout使用。</p>\n</blockquote>\n<p><a name=\"Coordinator\"></a></p>\n<h3 id=\"CoordinatorLayout的使用：\"><a href=\"#CoordinatorLayout的使用：\" class=\"headerlink\" title=\"CoordinatorLayout的使用：\"></a>CoordinatorLayout的使用：</h3><blockquote>\n<p>顾名思义，这个控件的目的就是协调它里面View的行为。<br>它需要于子类配合使用。这里我们看 CoordinatorLayout + AppBarLayout + NestedScrollView配合使用的效果。（一般CoordinatorLayout的直接子类都是这个两个）  </p>\n</blockquote>\n<p><strong>1、首先重点介绍AppBarLayout：</strong></p>\n<blockquote>\n<p>AppBarLayout具有Linearlayout垂直布局的特性。</p>\n</blockquote>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div></pre></td><td class=\"code\"><pre><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">android.support.design.widget.CoordinatorLayout</span></span></div><div class=\"line\">        <span class=\"attr\">xmlns:android</span>=<span class=\"string\">\"http://schemas.android.com/apk/res/android\"</span></div><div class=\"line\">        <span class=\"attr\">xmlns:app</span>=<span class=\"string\">\"http://schemas.android.com/apk/res-auto\"</span></div><div class=\"line\">        <span class=\"attr\">android:layout_width</span>=<span class=\"string\">\"match_parent\"</span></div><div class=\"line\">        <span class=\"attr\">android:layout_height</span>=<span class=\"string\">\"match_parent\"</span>&gt;</div><div class=\"line\">   </div><div class=\"line\">    <span class=\"comment\">&lt;!-- AppBarLayout --&gt;</span></div><div class=\"line\">    <span class=\"comment\">&lt;!--1、AppBarLayout最好是CoordinatorLayout的直接子view --&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">android.support.design.widget.AppBarLayout</span></span></div><div class=\"line\">            <span class=\"attr\">android:layout_height</span>=<span class=\"string\">\"wrap_content\"</span></div><div class=\"line\">            <span class=\"attr\">android:layout_width</span>=<span class=\"string\">\"match_parent\"</span>&gt;</div><div class=\"line\">       <span class=\"comment\">&lt;!--2 、AppBarLayout的子view：需要设置app:layout_scrollFlags--&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">android.support.v7.widget.Toolbar</span></span></div><div class=\"line\">                <span class=\"attr\">...</span></div><div class=\"line\">                <span class=\"attr\">app:layout_scrollFlags</span>=<span class=\"string\">\"scroll|enterAlways\"</span>/&gt;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">android.support.design.widget.TabLayout</span></span></div><div class=\"line\">                <span class=\"attr\">...</span></div><div class=\"line\">                <span class=\"attr\">app:layout_scrollFlags</span>=<span class=\"string\">\"scroll|enterAlways\"</span>/&gt;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">android.support.design.widget.AppBarLayout</span>&gt;</span></div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">&lt;!-- NestedScrollView --&gt;</span></div><div class=\"line\">    <span class=\"comment\">&lt;!-- 3、指定behavior属性为AppBarLayout.ScrollingViewBehavior --&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">android.support.v4.widget.NestedScrollView</span></span></div><div class=\"line\">            <span class=\"attr\">android:layout_width</span>=<span class=\"string\">\"match_parent\"</span></div><div class=\"line\">            <span class=\"attr\">android:layout_height</span>=<span class=\"string\">\"match_parent\"</span></div><div class=\"line\">            <span class=\"attr\">app:layout_behavior</span>=<span class=\"string\">\"@string/appbar_scrolling_view_behavior\"</span>&gt;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">android.support.v4.widget.NestedScrollView</span>&gt;</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">android.support.design.widget.CoordinatorLayout</span>&gt;</span></div></pre></td></tr></table></figure>\n<ul>\n<li>1、AppBarLayout和NestedScrollView作为CoordinatorLayout直接继承子类。</li>\n<li>2、AppBarLayout的子类需要设置layout_scrollFlags这个属性：<ul>\n<li>scroll 子类伴随着滚动事件而滚出或滚进屏幕<ul>\n<li>注意点1:如果使用了其他值，必定要使用这个值才能起作用</li>\n<li>注意点2:如果在这个子类前面的任何其他子类没有设置这个值，那么这个子类的设置将失去作用。</li>\n</ul>\n</li>\n<li>enterAlways 快速返回<ul>\n<li>注意点1:向上滑动时，总是最后一个滚出屏幕的。</li>\n<li>注意点2:只要向下滑动（不管在哪个位置），都会跟着出来。</li>\n</ul>\n</li>\n<li>enterAlwaysCollapsed enterAlways的附加值 比scroll先向下滚动一个附加值，之后等scroll滚动完成后，在向下滚。<ul>\n<li>配合android:minHeight属性一起使用。</li>\n</ul>\n</li>\n<li>exitUntilCollapsed 于enterAlwaysCollapsed相同原理，但是它是针对向上滚动的情况。</li>\n<li>snap 吸附效果，它不会出现停留在中间的情况。要不就完全隐藏，要不就完全出现。</li>\n</ul>\n</li>\n<li><p>3、需要给一个有滑动机制的控件添加app:layout_behavior=”@string/appbar_scrolling_view_behavior”属性。这里我们使用的是NestedScrollView（它的作用也很强大，后面分析）</p>\n</li>\n<li><p>4、demo演示效果：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div><div class=\"line\">73</div><div class=\"line\">74</div><div class=\"line\">75</div><div class=\"line\">76</div><div class=\"line\">77</div><div class=\"line\">78</div><div class=\"line\">79</div><div class=\"line\">80</div><div class=\"line\">81</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">&lt;!-- xml文件 --&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">android.support.design.widget.CoordinatorLayout</span> <span class=\"attr\">xmlns:android</span>=<span class=\"string\">\"http://schemas.android.com/apk/res/android\"</span></span></div><div class=\"line\">    <span class=\"attr\">xmlns:app</span>=<span class=\"string\">\"http://schemas.android.com/apk/res-auto\"</span></div><div class=\"line\">    <span class=\"attr\">android:id</span>=<span class=\"string\">\"@+id/main_content\"</span></div><div class=\"line\">    <span class=\"attr\">android:layout_width</span>=<span class=\"string\">\"match_parent\"</span></div><div class=\"line\">    <span class=\"attr\">android:layout_height</span>=<span class=\"string\">\"match_parent\"</span>&gt;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">&lt;!--1、AppBarLayout最好是CoordinatorLayout的直接子view --&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">android.support.design.widget.AppBarLayout</span></span></div><div class=\"line\">        <span class=\"attr\">android:id</span>=<span class=\"string\">\"@+id/appbar\"</span></div><div class=\"line\">        <span class=\"attr\">android:layout_width</span>=<span class=\"string\">\"match_parent\"</span></div><div class=\"line\">        <span class=\"attr\">android:layout_height</span>=<span class=\"string\">\"wrap_content\"</span></div><div class=\"line\">        <span class=\"attr\">android:theme</span>=<span class=\"string\">\"@style/ThemeOverlay.AppCompat.Dark.ActionBar\"</span>&gt;</div><div class=\"line\">        <span class=\"comment\">&lt;!--2 、AppBarLayout的子view：需要设置app:layout_scrollFlags--&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">android.support.v7.widget.Toolbar</span></span></div><div class=\"line\">            <span class=\"attr\">android:id</span>=<span class=\"string\">\"@+id/toolbar\"</span></div><div class=\"line\">            <span class=\"attr\">android:layout_width</span>=<span class=\"string\">\"match_parent\"</span></div><div class=\"line\">            <span class=\"attr\">android:layout_height</span>=<span class=\"string\">\"?attr/actionBarSize\"</span></div><div class=\"line\">            <span class=\"attr\">android:background</span>=<span class=\"string\">\"?attr/colorPrimary\"</span></div><div class=\"line\">            <span class=\"attr\">android:title</span>=<span class=\"string\">\"Title\"</span></div><div class=\"line\">            <span class=\"attr\">app:popupTheme</span>=<span class=\"string\">\"@style/ThemeOverlay.AppCompat.Light\"</span></div><div class=\"line\">            <span class=\"attr\">app:layout_scrollFlags</span>=<span class=\"string\">\"scroll\"</span> /&gt;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">ImageView</span></span></div><div class=\"line\">            <span class=\"attr\">android:id</span>=<span class=\"string\">\"@+id/mIv\"</span></div><div class=\"line\">            <span class=\"attr\">app:layout_scrollFlags</span>=<span class=\"string\">\"scroll|snap\"</span></div><div class=\"line\">            <span class=\"attr\">android:layout_width</span>=<span class=\"string\">\"match_parent\"</span></div><div class=\"line\">            <span class=\"attr\">android:layout_height</span>=<span class=\"string\">\"100dp\"</span></div><div class=\"line\">            <span class=\"attr\">android:scaleType</span>=<span class=\"string\">\"centerCrop\"</span></div><div class=\"line\">            <span class=\"attr\">android:background</span>=<span class=\"string\">\"@android:color/holo_blue_bright\"</span> /&gt;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">android.support.design.widget.AppBarLayout</span>&gt;</span></div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">&lt;!-- 3、指定behavior属性为AppBarLayout.ScrollingViewBehavior --&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">android.support.v4.widget.NestedScrollView</span></span></div><div class=\"line\">        <span class=\"attr\">android:layout_width</span>=<span class=\"string\">\"match_parent\"</span></div><div class=\"line\">        <span class=\"attr\">android:layout_height</span>=<span class=\"string\">\"match_parent\"</span></div><div class=\"line\">        <span class=\"attr\">app:layout_behavior</span>=<span class=\"string\">\"@string/appbar_scrolling_view_behavior\"</span>&gt;</div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">LinearLayout</span></span></div><div class=\"line\">            <span class=\"attr\">android:layout_width</span>=<span class=\"string\">\"match_parent\"</span></div><div class=\"line\">            <span class=\"attr\">android:layout_height</span>=<span class=\"string\">\"match_parent\"</span></div><div class=\"line\">            <span class=\"attr\">android:orientation</span>=<span class=\"string\">\"vertical\"</span>&gt;</div><div class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">TextView</span></span></div><div class=\"line\">                <span class=\"attr\">android:layout_width</span>=<span class=\"string\">\"match_parent\"</span></div><div class=\"line\">                <span class=\"attr\">android:layout_height</span>=<span class=\"string\">\"180dp\"</span></div><div class=\"line\">                <span class=\"attr\">android:layout_margin</span>=<span class=\"string\">\"10dp\"</span></div><div class=\"line\">                <span class=\"attr\">android:background</span>=<span class=\"string\">\"#6660c6df\"</span></div><div class=\"line\">                <span class=\"attr\">android:gravity</span>=<span class=\"string\">\"center\"</span></div><div class=\"line\">                <span class=\"attr\">android:text</span>=<span class=\"string\">\"折\"</span></div><div class=\"line\">                <span class=\"attr\">android:textSize</span>=<span class=\"string\">\"26dp\"</span></div><div class=\"line\">                <span class=\"attr\">android:transitionName</span>=<span class=\"string\">\"zi\"</span> /&gt;</div><div class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">TextView</span></span></div><div class=\"line\">                <span class=\"attr\">android:layout_width</span>=<span class=\"string\">\"match_parent\"</span></div><div class=\"line\">                <span class=\"attr\">android:layout_height</span>=<span class=\"string\">\"180dp\"</span></div><div class=\"line\">                <span class=\"attr\">android:layout_margin</span>=<span class=\"string\">\"10dp\"</span></div><div class=\"line\">                <span class=\"attr\">android:background</span>=<span class=\"string\">\"#6660c6df\"</span></div><div class=\"line\">                <span class=\"attr\">android:gravity</span>=<span class=\"string\">\"center\"</span></div><div class=\"line\">                <span class=\"attr\">android:text</span>=<span class=\"string\">\"折叠\"</span></div><div class=\"line\">                <span class=\"attr\">android:textSize</span>=<span class=\"string\">\"26dp\"</span></div><div class=\"line\">                <span class=\"attr\">android:transitionName</span>=<span class=\"string\">\"zi\"</span> /&gt;</div><div class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">TextView</span></span></div><div class=\"line\">                <span class=\"attr\">android:layout_width</span>=<span class=\"string\">\"match_parent\"</span></div><div class=\"line\">                <span class=\"attr\">android:layout_height</span>=<span class=\"string\">\"180dp\"</span></div><div class=\"line\">                <span class=\"attr\">android:layout_margin</span>=<span class=\"string\">\"10dp\"</span></div><div class=\"line\">                <span class=\"attr\">android:background</span>=<span class=\"string\">\"#6660c6df\"</span></div><div class=\"line\">                <span class=\"attr\">android:gravity</span>=<span class=\"string\">\"center\"</span></div><div class=\"line\">                <span class=\"attr\">android:text</span>=<span class=\"string\">\"折叠示\"</span></div><div class=\"line\">                <span class=\"attr\">android:textSize</span>=<span class=\"string\">\"26dp\"</span></div><div class=\"line\">                <span class=\"attr\">android:transitionName</span>=<span class=\"string\">\"zi\"</span> /&gt;</div><div class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">TextView</span></span></div><div class=\"line\">                <span class=\"attr\">android:layout_width</span>=<span class=\"string\">\"match_parent\"</span></div><div class=\"line\">                <span class=\"attr\">android:layout_height</span>=<span class=\"string\">\"180dp\"</span></div><div class=\"line\">                <span class=\"attr\">android:layout_margin</span>=<span class=\"string\">\"10dp\"</span></div><div class=\"line\">                <span class=\"attr\">android:background</span>=<span class=\"string\">\"#6660c6df\"</span></div><div class=\"line\">                <span class=\"attr\">android:gravity</span>=<span class=\"string\">\"center\"</span></div><div class=\"line\">                <span class=\"attr\">android:text</span>=<span class=\"string\">\"折叠示例\"</span></div><div class=\"line\">                <span class=\"attr\">android:textSize</span>=<span class=\"string\">\"26dp\"</span></div><div class=\"line\">                <span class=\"attr\">android:transitionName</span>=<span class=\"string\">\"zi\"</span> /&gt;</div><div class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">LinearLayout</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">android.support.v4.widget.NestedScrollView</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">android.support.design.widget.CoordinatorLayout</span>&gt;</span></div></pre></td></tr></table></figure>\n</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;!-- activity --&gt;</div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">AppBarActivity</span> <span class=\"keyword\">extends</span> <span class=\"title\">BaseActivity</span></span>&#123;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">private</span> Toolbar toolbar;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"meta\">@Override</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">onCreate</span><span class=\"params\">(Bundle savedInstanceState)</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">super</span>.onCreate(savedInstanceState);</div><div class=\"line\">        setContentView(R.layout.activity_app_bar);</div><div class=\"line\">        toolbar = (Toolbar) findViewById(R.id.toolbar);</div><div class=\"line\">        toolbar.setTitle(<span class=\"string\">\"Title\"</span>);</div><div class=\"line\">        setSupportActionBar(toolbar);</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p><em>注意：在style中要设置主题为NoActionBar</em></p>\n<p><strong>2、AppBarLayout + CollapsingToolbarLayout</strong></p>\n<blockquote>\n<p>好了，我们现在又多了一个组件。看看CollapsingToolbarLayout是怎么用的。<br>CollapsingToolbarLayout作用是提供了可以折叠的Toolbar（CollapsingToolbarLayout是一个实现了折叠工具栏效果Toolbar的包装器，它被设计为AppBarLayout的直接子View。）</p>\n</blockquote>\n<p>实例说明：<br><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div><div class=\"line\">73</div><div class=\"line\">74</div><div class=\"line\">75</div><div class=\"line\">76</div><div class=\"line\">77</div><div class=\"line\">78</div><div class=\"line\">79</div><div class=\"line\">80</div><div class=\"line\">81</div><div class=\"line\">82</div><div class=\"line\">83</div><div class=\"line\">84</div><div class=\"line\">85</div><div class=\"line\">86</div><div class=\"line\">87</div><div class=\"line\">88</div><div class=\"line\">89</div><div class=\"line\">90</div><div class=\"line\">91</div><div class=\"line\">92</div><div class=\"line\">93</div><div class=\"line\">94</div><div class=\"line\">95</div><div class=\"line\">96</div><div class=\"line\">97</div><div class=\"line\">98</div><div class=\"line\">99</div><div class=\"line\">100</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">android.support.design.widget.CoordinatorLayout</span> <span class=\"attr\">xmlns:android</span>=<span class=\"string\">\"http://schemas.android.com/apk/res/android\"</span></span></div><div class=\"line\">    <span class=\"attr\">xmlns:app</span>=<span class=\"string\">\"http://schemas.android.com/apk/res-auto\"</span></div><div class=\"line\">    <span class=\"attr\">xmlns:tools</span>=<span class=\"string\">\"http://schemas.android.com/tools\"</span></div><div class=\"line\">    <span class=\"attr\">android:layout_width</span>=<span class=\"string\">\"match_parent\"</span></div><div class=\"line\">    <span class=\"attr\">android:layout_height</span>=<span class=\"string\">\"match_parent\"</span></div><div class=\"line\">    <span class=\"attr\">android:fitsSystemWindows</span>=<span class=\"string\">\"true\"</span></div><div class=\"line\">    <span class=\"attr\">android:clipToPadding</span>=<span class=\"string\">\"false\"</span></div><div class=\"line\">    &gt;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">android.support.design.widget.AppBarLayout</span></span></div><div class=\"line\">        <span class=\"attr\">android:layout_width</span>=<span class=\"string\">\"match_parent\"</span></div><div class=\"line\">        <span class=\"attr\">android:layout_height</span>=<span class=\"string\">\"300dp\"</span></div><div class=\"line\">        <span class=\"attr\">android:fitsSystemWindows</span>=<span class=\"string\">\"true\"</span></div><div class=\"line\">        <span class=\"attr\">android:theme</span>=<span class=\"string\">\"@style/ThemeOverlay.AppCompat.Dark.ActionBar\"</span>&gt;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">android.support.design.widget.CollapsingToolbarLayout</span></span></div><div class=\"line\">            <span class=\"attr\">android:id</span>=<span class=\"string\">\"@+id/collapsing_toolbar\"</span></div><div class=\"line\">            <span class=\"attr\">android:layout_width</span>=<span class=\"string\">\"match_parent\"</span></div><div class=\"line\">            <span class=\"attr\">android:layout_height</span>=<span class=\"string\">\"match_parent\"</span></div><div class=\"line\">            <span class=\"attr\">app:contentScrim</span>=<span class=\"string\">\"?attr/colorPrimary\"</span></div><div class=\"line\">            <span class=\"attr\">app:expandedTitleMarginEnd</span>=<span class=\"string\">\"64dp\"</span></div><div class=\"line\">            <span class=\"attr\">app:expandedTitleMarginStart</span>=<span class=\"string\">\"48dp\"</span></div><div class=\"line\">            <span class=\"attr\">app:layout_scrollFlags</span>=<span class=\"string\">\"scroll|exitUntilCollapsed\"</span>&gt;</div><div class=\"line\"></div><div class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">ImageView</span></span></div><div class=\"line\">                <span class=\"attr\">android:id</span>=<span class=\"string\">\"@+id/ivImage\"</span></div><div class=\"line\">                <span class=\"attr\">android:layout_width</span>=<span class=\"string\">\"match_parent\"</span></div><div class=\"line\">                <span class=\"attr\">android:layout_height</span>=<span class=\"string\">\"match_parent\"</span></div><div class=\"line\">                <span class=\"attr\">android:fitsSystemWindows</span>=<span class=\"string\">\"true\"</span></div><div class=\"line\">                <span class=\"attr\">android:transitionName</span>=<span class=\"string\">\"transition_book_img\"</span></div><div class=\"line\">                <span class=\"attr\">android:scaleType</span>=<span class=\"string\">\"centerCrop\"</span></div><div class=\"line\">                <span class=\"attr\">app:layout_collapseMode</span>=<span class=\"string\">\"parallax\"</span></div><div class=\"line\">                <span class=\"attr\">app:layout_collapseParallaxMultiplier</span>=<span class=\"string\">\"0.7\"</span> /&gt;</div><div class=\"line\"></div><div class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">android.support.v7.widget.Toolbar</span></span></div><div class=\"line\">                <span class=\"attr\">android:id</span>=<span class=\"string\">\"@+id/toolbar\"</span></div><div class=\"line\">                <span class=\"attr\">android:layout_width</span>=<span class=\"string\">\"match_parent\"</span></div><div class=\"line\">                <span class=\"attr\">android:layout_height</span>=<span class=\"string\">\"?attr/actionBarSize\"</span></div><div class=\"line\">                <span class=\"attr\">app:layout_collapseMode</span>=<span class=\"string\">\"pin\"</span></div><div class=\"line\">                <span class=\"attr\">app:layout_scrollFlags</span>=<span class=\"string\">\"scroll|enterAlways\"</span></div><div class=\"line\">                <span class=\"attr\">app:popupTheme</span>=<span class=\"string\">\"@style/ThemeOverlay.AppCompat.Light\"</span> /&gt;</div><div class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">android.support.design.widget.CollapsingToolbarLayout</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">android.support.design.widget.AppBarLayout</span>&gt;</span></div><div class=\"line\"></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">android.support.v4.widget.NestedScrollView</span></span></div><div class=\"line\">        <span class=\"attr\">android:layout_width</span>=<span class=\"string\">\"match_parent\"</span></div><div class=\"line\">        <span class=\"attr\">android:layout_height</span>=<span class=\"string\">\"match_parent\"</span></div><div class=\"line\">        <span class=\"attr\">app:layout_behavior</span>=<span class=\"string\">\"@string/appbar_scrolling_view_behavior\"</span>&gt;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">LinearLayout</span></span></div><div class=\"line\">            <span class=\"attr\">android:layout_width</span>=<span class=\"string\">\"match_parent\"</span></div><div class=\"line\">            <span class=\"attr\">android:layout_height</span>=<span class=\"string\">\"match_parent\"</span></div><div class=\"line\">            <span class=\"attr\">android:orientation</span>=<span class=\"string\">\"vertical\"</span>&gt;</div><div class=\"line\"></div><div class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">TextView</span></span></div><div class=\"line\">                <span class=\"attr\">android:layout_width</span>=<span class=\"string\">\"match_parent\"</span></div><div class=\"line\">                <span class=\"attr\">android:layout_height</span>=<span class=\"string\">\"180dp\"</span></div><div class=\"line\">                <span class=\"attr\">android:layout_margin</span>=<span class=\"string\">\"10dp\"</span></div><div class=\"line\">                <span class=\"attr\">android:background</span>=<span class=\"string\">\"#6660c6df\"</span></div><div class=\"line\">                <span class=\"attr\">android:gravity</span>=<span class=\"string\">\"center\"</span></div><div class=\"line\">                <span class=\"attr\">android:text</span>=<span class=\"string\">\"折\"</span></div><div class=\"line\">                <span class=\"attr\">android:textSize</span>=<span class=\"string\">\"26dp\"</span></div><div class=\"line\">                <span class=\"attr\">android:transitionName</span>=<span class=\"string\">\"zi\"</span> /&gt;</div><div class=\"line\"></div><div class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">TextView</span></span></div><div class=\"line\">                <span class=\"attr\">android:layout_width</span>=<span class=\"string\">\"match_parent\"</span></div><div class=\"line\">                <span class=\"attr\">android:layout_height</span>=<span class=\"string\">\"180dp\"</span></div><div class=\"line\">                <span class=\"attr\">android:layout_margin</span>=<span class=\"string\">\"10dp\"</span></div><div class=\"line\">                <span class=\"attr\">android:background</span>=<span class=\"string\">\"#6660c6df\"</span></div><div class=\"line\">                <span class=\"attr\">android:gravity</span>=<span class=\"string\">\"center\"</span></div><div class=\"line\">                <span class=\"attr\">android:text</span>=<span class=\"string\">\"折叠\"</span></div><div class=\"line\">                <span class=\"attr\">android:textSize</span>=<span class=\"string\">\"26dp\"</span></div><div class=\"line\">                <span class=\"attr\">android:transitionName</span>=<span class=\"string\">\"zi\"</span> /&gt;</div><div class=\"line\"></div><div class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">TextView</span></span></div><div class=\"line\">                <span class=\"attr\">android:layout_width</span>=<span class=\"string\">\"match_parent\"</span></div><div class=\"line\">                <span class=\"attr\">android:layout_height</span>=<span class=\"string\">\"180dp\"</span></div><div class=\"line\">                <span class=\"attr\">android:layout_margin</span>=<span class=\"string\">\"10dp\"</span></div><div class=\"line\">                <span class=\"attr\">android:background</span>=<span class=\"string\">\"#6660c6df\"</span></div><div class=\"line\">                <span class=\"attr\">android:gravity</span>=<span class=\"string\">\"center\"</span></div><div class=\"line\">                <span class=\"attr\">android:text</span>=<span class=\"string\">\"折叠示\"</span></div><div class=\"line\">                <span class=\"attr\">android:textSize</span>=<span class=\"string\">\"26dp\"</span></div><div class=\"line\">                <span class=\"attr\">android:transitionName</span>=<span class=\"string\">\"zi\"</span> /&gt;</div><div class=\"line\"></div><div class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">TextView</span></span></div><div class=\"line\">                <span class=\"attr\">android:layout_width</span>=<span class=\"string\">\"match_parent\"</span></div><div class=\"line\">                <span class=\"attr\">android:layout_height</span>=<span class=\"string\">\"180dp\"</span></div><div class=\"line\">                <span class=\"attr\">android:layout_margin</span>=<span class=\"string\">\"10dp\"</span></div><div class=\"line\">                <span class=\"attr\">android:background</span>=<span class=\"string\">\"#6660c6df\"</span></div><div class=\"line\">                <span class=\"attr\">android:gravity</span>=<span class=\"string\">\"center\"</span></div><div class=\"line\">                <span class=\"attr\">android:text</span>=<span class=\"string\">\"折叠示例\"</span></div><div class=\"line\">                <span class=\"attr\">android:textSize</span>=<span class=\"string\">\"26dp\"</span></div><div class=\"line\">                <span class=\"attr\">android:transitionName</span>=<span class=\"string\">\"zi\"</span> /&gt;</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">LinearLayout</span>&gt;</span></div><div class=\"line\"></div><div class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">android.support.v4.widget.NestedScrollView</span>&gt;</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">android.support.design.widget.CoordinatorLayout</span>&gt;</span></div></pre></td></tr></table></figure></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ToolbarLayoutActivity</span> <span class=\"keyword\">extends</span> <span class=\"title\">BaseActivity</span></span>&#123;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">private</span> CollapsingToolbarLayout mCollapsing;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"meta\">@Override</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">onCreate</span><span class=\"params\">(@Nullable Bundle savedInstanceState)</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">super</span>.onCreate(savedInstanceState);</div><div class=\"line\"></div><div class=\"line\">        setContentView(R.layout.activity_tool_layout);</div><div class=\"line\"></div><div class=\"line\">        initFindView();</div><div class=\"line\">        initView();</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">initView</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">        <span class=\"comment\">//设置标题的一些属性</span></div><div class=\"line\">        mCollapsing.setTitle(<span class=\"string\">\"设置ToolBar\"</span>);</div><div class=\"line\">        mCollapsing.setCollapsedTitleGravity(Gravity.CENTER); <span class=\"comment\">//标题收缩后的位置，居中</span></div><div class=\"line\">        mCollapsing.setExpandedTitleColor(Color.TRANSPARENT); <span class=\"comment\">// 标题展示时颜色</span></div><div class=\"line\">        mCollapsing.setCollapsedTitleTextColor(Color.WHITE); <span class=\"comment\">// 标题收缩时的颜色</span></div><div class=\"line\"></div><div class=\"line\">        <span class=\"comment\">//沉浸式内容(改变收缩后toolbar背景，有渐变效果)</span></div><div class=\"line\">        <span class=\"comment\">//也可以通过app:contentScrim=”?attr/colorPrimary”来改变效果</span></div><div class=\"line\">        mCollapsing.setContentScrim(getResources().getDrawable(R.drawable.sy_2010091620583620405));</div><div class=\"line\"></div><div class=\"line\">        <span class=\"comment\">//沉浸式状态栏</span></div><div class=\"line\">        collapsingToolbarLayout.setStatusBarScrim(getResources().getDrawable(R.drawable.sy_2010091620583620405));</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">initFindView</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">        mCollapsing = (CollapsingToolbarLayout) findViewById(R.id.collapsing_toolbar);</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>说明：</p>\n<pre><code>* 折叠标题 （如上述代码）。\n* 视差滚动，通过设置app:layout_collapseParallaxMultiplier属性获取。视差值介于0.0-1.0之间。\n* 顶部悬浮，通过设置app:layout_collapseMode设置折叠模式\n    - “pin”：固定模式，在折叠的时候最后固定在顶端\n    - “parallax”：视差模式，在折叠的时候会有个视差折叠的效果\n</code></pre>","excerpt":"<h2 id=\"Material-Design-UI组件\"><a href=\"#Material-Design-UI组件\" class=\"headerlink\" title=\"Material Design UI组件\"></a>Material Design UI组件</h2><p>在Google I/O 2015大会上，谷歌发布了一个新的support library,里面包含了一些遵循Material Design’s spec的UI组件。这些组件配合起来使用可以产生很好的效果。虽然Material Design风格没有在国内流行起来，但是这些组件还是很有学习的必要的。</p>","more":"<h2 id=\"组件的使用\"><a href=\"#组件的使用\" class=\"headerlink\" title=\"组件的使用\"></a>组件的使用</h2><p>1、首先添加两个包：<br>&gt;<br>    compile ‘com.android.support:appcompat-v7:24.2.1’<br>    compile ‘com.android.support:design:24.2.1’</p>\n<p>2、控件使用说明：<br><a href=\"#Snackbar\">1、Snackbar和 FloatingActionButton的使用</a><br><a href=\"#Coordinator\">2、CoordinatorLayout的使用</a></p>\n<hr>\n<p><a id=\"Snackbar\"></a></p>\n<h3 id=\"Snackbar和-FloatingActionButton的使用\"><a href=\"#Snackbar和-FloatingActionButton的使用\" class=\"headerlink\" title=\"Snackbar和 FloatingActionButton的使用\"></a>Snackbar和 FloatingActionButton的使用</h3><ul>\n<li>Snackbar有点类似于以前的Toast,但是它更加灵活一些，可以添加自定义可选操作等。</li>\n<li>FloatingActionButton顾名思义，它是一个可浮动的button,配合CoordinatorLayout可以实现一些交互效果</li>\n</ul>\n<h3 id=\"Snackbar\"><a href=\"#Snackbar\" class=\"headerlink\" title=\"Snackbar\"></a>Snackbar</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">//snackbar的用法（和Toast类似，多添加了setAction()方法）</span></div><div class=\"line\">Snackbar.make(mListView,strs[position], Snackbar.LENGTH_SHORT)</div><div class=\"line\">        .setAction(<span class=\"string\">\"action\"</span>, <span class=\"keyword\">new</span> View.OnClickListener() &#123;</div><div class=\"line\">            <span class=\"meta\">@Override</span></div><div class=\"line\">            <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onClick</span><span class=\"params\">(View v)</span> </span>&#123;</div><div class=\"line\">                Toast.makeText(mContext, <span class=\"string\">\"点击了Snackbar\"</span>, Toast.LENGTH_SHORT).show();</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;)</div><div class=\"line\">        .show();</div></pre></td></tr></table></figure>\n<h3 id=\"FloatingActionButton的简单使用：\"><a href=\"#FloatingActionButton的简单使用：\" class=\"headerlink\" title=\"FloatingActionButton的简单使用：\"></a>FloatingActionButton的简单使用：</h3><blockquote>\n<p>可以参考鸿大神的博客：<a href=\"http://blog.csdn.net/lmj623565791/article/details/46678867\">FloatingActionButton 完全解析</a></p>\n</blockquote>\n<h3 id=\"FloatingActionButton配合CoordinatorLayout使用：\"><a href=\"#FloatingActionButton配合CoordinatorLayout使用：\" class=\"headerlink\" title=\"FloatingActionButton配合CoordinatorLayout使用：\"></a>FloatingActionButton配合CoordinatorLayout使用：</h3><p>1、配置xml文件<br><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">&lt;!-- xml文件 --&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">android.support.design.widget.CoordinatorLayout</span></div><div class=\"line\">    <span class=\"attr\">xmlns:android</span>=<span class=\"string\">\"http://schemas.android.com/apk/res/android\"</span></div><div class=\"line\">    <span class=\"attr\">android:layout_width</span>=<span class=\"string\">\"match_parent\"</span></div><div class=\"line\">    <span class=\"attr\">android:layout_height</span>=<span class=\"string\">\"match_parent\"</span>&gt;</span></div><div class=\"line\"></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">android.support.design.widget.FloatingActionButton</span></div><div class=\"line\">        <span class=\"attr\">android:id</span>=<span class=\"string\">\"@+id/fab\"</span></div><div class=\"line\">        <span class=\"attr\">android:layout_width</span>=<span class=\"string\">\"wrap_content\"</span></div><div class=\"line\">        <span class=\"attr\">android:layout_height</span>=<span class=\"string\">\"wrap_content\"</span></div><div class=\"line\">        <span class=\"attr\">android:layout_gravity</span>=<span class=\"string\">\"end|bottom\"</span></div><div class=\"line\">        <span class=\"attr\">android:layout_margin</span>=<span class=\"string\">\"40dp\"</span></div><div class=\"line\">        <span class=\"attr\">android:background</span>=<span class=\"string\">\"@drawable/fab\"</span></div><div class=\"line\">        <span class=\"attr\">android:src</span>=<span class=\"string\">\"@drawable/btn_sousuo\"</span> /&gt;</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">android.support.design.widget.CoordinatorLayout</span>&gt;</span></div></pre></td></tr></table></figure></p>\n<p>2、设置activity代码<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">//activity</span></div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">FlyingButtonActivity</span> <span class=\"keyword\">extends</span> <span class=\"title\">BaseActivity</span></span>&#123;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">private</span> FloatingActionButton mFloating;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"meta\">@Override</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">onCreate</span><span class=\"params\">(@Nullable Bundle savedInstanceState)</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">super</span>.onCreate(savedInstanceState);</div><div class=\"line\">        </div><div class=\"line\">        setContentView(R.layout.activity_flying_button);</div><div class=\"line\"></div><div class=\"line\">        mFloating = (FloatingActionButton) findViewById(R.id.fab);</div><div class=\"line\">        mFloating.setOnClickListener(<span class=\"keyword\">new</span> View.OnClickListener() &#123;</div><div class=\"line\">            <span class=\"meta\">@Override</span></div><div class=\"line\">            <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onClick</span><span class=\"params\">(View v)</span> </span>&#123;</div><div class=\"line\">               Snackbar.make(mFloating,<span class=\"string\">\"点击浮动图标\"</span>,Snackbar.LENGTH_SHORT)</div><div class=\"line\">                       .setAction(<span class=\"string\">\"action\"</span>, <span class=\"keyword\">new</span> View.OnClickListener() &#123;</div><div class=\"line\">                           <span class=\"meta\">@Override</span></div><div class=\"line\">                           <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onClick</span><span class=\"params\">(View v)</span> </span>&#123;</div><div class=\"line\">                               Toast.makeText(FlyingButtonActivity.<span class=\"keyword\">this</span>, <span class=\"string\">\"点击了Action\"</span>, Toast.LENGTH_SHORT).show();</div><div class=\"line\">                           &#125;</div><div class=\"line\">                       &#125;).show();</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;);</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p><strong>3、显示效果：</strong></p>\n<blockquote>\n<p>   floatingButton在snackbar出现时，往上移动。</p>\n</blockquote>\n<p><strong>4、为什么会出现这样的效果？</strong></p>\n<blockquote>\n<p>  1、首先要了解CoordinatorLayout的作用。它是用来协调子类控件的行为。<br>    2、FloatingActionButton默认实现了一个FloatingActionButton.Behavior。它可以直接在CoordinatorLayout使用。</p>\n</blockquote>\n<p><a name=\"Coordinator\"></a></p>\n<h3 id=\"CoordinatorLayout的使用：\"><a href=\"#CoordinatorLayout的使用：\" class=\"headerlink\" title=\"CoordinatorLayout的使用：\"></a>CoordinatorLayout的使用：</h3><blockquote>\n<p>顾名思义，这个控件的目的就是协调它里面View的行为。<br>它需要于子类配合使用。这里我们看 CoordinatorLayout + AppBarLayout + NestedScrollView配合使用的效果。（一般CoordinatorLayout的直接子类都是这个两个）  </p>\n</blockquote>\n<p><strong>1、首先重点介绍AppBarLayout：</strong></p>\n<blockquote>\n<p>AppBarLayout具有Linearlayout垂直布局的特性。</p>\n</blockquote>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div></pre></td><td class=\"code\"><pre><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">android.support.design.widget.CoordinatorLayout</span></div><div class=\"line\">        <span class=\"attr\">xmlns:android</span>=<span class=\"string\">\"http://schemas.android.com/apk/res/android\"</span></div><div class=\"line\">        <span class=\"attr\">xmlns:app</span>=<span class=\"string\">\"http://schemas.android.com/apk/res-auto\"</span></div><div class=\"line\">        <span class=\"attr\">android:layout_width</span>=<span class=\"string\">\"match_parent\"</span></div><div class=\"line\">        <span class=\"attr\">android:layout_height</span>=<span class=\"string\">\"match_parent\"</span>&gt;</span></div><div class=\"line\">   </div><div class=\"line\">    <span class=\"comment\">&lt;!-- AppBarLayout --&gt;</span></div><div class=\"line\">    <span class=\"comment\">&lt;!--1、AppBarLayout最好是CoordinatorLayout的直接子view --&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">android.support.design.widget.AppBarLayout</span></div><div class=\"line\">            <span class=\"attr\">android:layout_height</span>=<span class=\"string\">\"wrap_content\"</span></div><div class=\"line\">            <span class=\"attr\">android:layout_width</span>=<span class=\"string\">\"match_parent\"</span>&gt;</span></div><div class=\"line\">       <span class=\"comment\">&lt;!--2 、AppBarLayout的子view：需要设置app:layout_scrollFlags--&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">android.support.v7.widget.Toolbar</span></div><div class=\"line\">                <span class=\"attr\">...</span></div><div class=\"line\">                <span class=\"attr\">app:layout_scrollFlags</span>=<span class=\"string\">\"scroll|enterAlways\"</span>/&gt;</span></div><div class=\"line\"></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">android.support.design.widget.TabLayout</span></div><div class=\"line\">                <span class=\"attr\">...</span></div><div class=\"line\">                <span class=\"attr\">app:layout_scrollFlags</span>=<span class=\"string\">\"scroll|enterAlways\"</span>/&gt;</span></div><div class=\"line\"></div><div class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">android.support.design.widget.AppBarLayout</span>&gt;</span></div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">&lt;!-- NestedScrollView --&gt;</span></div><div class=\"line\">    <span class=\"comment\">&lt;!-- 3、指定behavior属性为AppBarLayout.ScrollingViewBehavior --&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">android.support.v4.widget.NestedScrollView</span></div><div class=\"line\">            <span class=\"attr\">android:layout_width</span>=<span class=\"string\">\"match_parent\"</span></div><div class=\"line\">            <span class=\"attr\">android:layout_height</span>=<span class=\"string\">\"match_parent\"</span></div><div class=\"line\">            <span class=\"attr\">app:layout_behavior</span>=<span class=\"string\">\"@string/appbar_scrolling_view_behavior\"</span>&gt;</span></div><div class=\"line\"></div><div class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">android.support.v4.widget.NestedScrollView</span>&gt;</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">android.support.design.widget.CoordinatorLayout</span>&gt;</span></div></pre></td></tr></table></figure>\n<ul>\n<li>1、AppBarLayout和NestedScrollView作为CoordinatorLayout直接继承子类。</li>\n<li>2、AppBarLayout的子类需要设置layout_scrollFlags这个属性：<ul>\n<li>scroll 子类伴随着滚动事件而滚出或滚进屏幕<ul>\n<li>注意点1:如果使用了其他值，必定要使用这个值才能起作用</li>\n<li>注意点2:如果在这个子类前面的任何其他子类没有设置这个值，那么这个子类的设置将失去作用。</li>\n</ul>\n</li>\n<li>enterAlways 快速返回<ul>\n<li>注意点1:向上滑动时，总是最后一个滚出屏幕的。</li>\n<li>注意点2:只要向下滑动（不管在哪个位置），都会跟着出来。</li>\n</ul>\n</li>\n<li>enterAlwaysCollapsed enterAlways的附加值 比scroll先向下滚动一个附加值，之后等scroll滚动完成后，在向下滚。<ul>\n<li>配合android:minHeight属性一起使用。</li>\n</ul>\n</li>\n<li>exitUntilCollapsed 于enterAlwaysCollapsed相同原理，但是它是针对向上滚动的情况。</li>\n<li>snap 吸附效果，它不会出现停留在中间的情况。要不就完全隐藏，要不就完全出现。</li>\n</ul>\n</li>\n<li><p>3、需要给一个有滑动机制的控件添加app:layout_behavior=”@string/appbar_scrolling_view_behavior”属性。这里我们使用的是NestedScrollView（它的作用也很强大，后面分析）</p>\n</li>\n<li><p>4、demo演示效果：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div><div class=\"line\">73</div><div class=\"line\">74</div><div class=\"line\">75</div><div class=\"line\">76</div><div class=\"line\">77</div><div class=\"line\">78</div><div class=\"line\">79</div><div class=\"line\">80</div><div class=\"line\">81</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">&lt;!-- xml文件 --&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">android.support.design.widget.CoordinatorLayout</span> <span class=\"attr\">xmlns:android</span>=<span class=\"string\">\"http://schemas.android.com/apk/res/android\"</span></div><div class=\"line\">    <span class=\"attr\">xmlns:app</span>=<span class=\"string\">\"http://schemas.android.com/apk/res-auto\"</span></div><div class=\"line\">    <span class=\"attr\">android:id</span>=<span class=\"string\">\"@+id/main_content\"</span></div><div class=\"line\">    <span class=\"attr\">android:layout_width</span>=<span class=\"string\">\"match_parent\"</span></div><div class=\"line\">    <span class=\"attr\">android:layout_height</span>=<span class=\"string\">\"match_parent\"</span>&gt;</span></div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">&lt;!--1、AppBarLayout最好是CoordinatorLayout的直接子view --&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">android.support.design.widget.AppBarLayout</span></div><div class=\"line\">        <span class=\"attr\">android:id</span>=<span class=\"string\">\"@+id/appbar\"</span></div><div class=\"line\">        <span class=\"attr\">android:layout_width</span>=<span class=\"string\">\"match_parent\"</span></div><div class=\"line\">        <span class=\"attr\">android:layout_height</span>=<span class=\"string\">\"wrap_content\"</span></div><div class=\"line\">        <span class=\"attr\">android:theme</span>=<span class=\"string\">\"@style/ThemeOverlay.AppCompat.Dark.ActionBar\"</span>&gt;</span></div><div class=\"line\">        <span class=\"comment\">&lt;!--2 、AppBarLayout的子view：需要设置app:layout_scrollFlags--&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">android.support.v7.widget.Toolbar</span></div><div class=\"line\">            <span class=\"attr\">android:id</span>=<span class=\"string\">\"@+id/toolbar\"</span></div><div class=\"line\">            <span class=\"attr\">android:layout_width</span>=<span class=\"string\">\"match_parent\"</span></div><div class=\"line\">            <span class=\"attr\">android:layout_height</span>=<span class=\"string\">\"?attr/actionBarSize\"</span></div><div class=\"line\">            <span class=\"attr\">android:background</span>=<span class=\"string\">\"?attr/colorPrimary\"</span></div><div class=\"line\">            <span class=\"attr\">android:title</span>=<span class=\"string\">\"Title\"</span></div><div class=\"line\">            <span class=\"attr\">app:popupTheme</span>=<span class=\"string\">\"@style/ThemeOverlay.AppCompat.Light\"</span></div><div class=\"line\">            <span class=\"attr\">app:layout_scrollFlags</span>=<span class=\"string\">\"scroll\"</span> /&gt;</span></div><div class=\"line\"></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">ImageView</span></div><div class=\"line\">            <span class=\"attr\">android:id</span>=<span class=\"string\">\"@+id/mIv\"</span></div><div class=\"line\">            <span class=\"attr\">app:layout_scrollFlags</span>=<span class=\"string\">\"scroll|snap\"</span></div><div class=\"line\">            <span class=\"attr\">android:layout_width</span>=<span class=\"string\">\"match_parent\"</span></div><div class=\"line\">            <span class=\"attr\">android:layout_height</span>=<span class=\"string\">\"100dp\"</span></div><div class=\"line\">            <span class=\"attr\">android:scaleType</span>=<span class=\"string\">\"centerCrop\"</span></div><div class=\"line\">            <span class=\"attr\">android:background</span>=<span class=\"string\">\"@android:color/holo_blue_bright\"</span> /&gt;</span></div><div class=\"line\"></div><div class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">android.support.design.widget.AppBarLayout</span>&gt;</span></div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">&lt;!-- 3、指定behavior属性为AppBarLayout.ScrollingViewBehavior --&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">android.support.v4.widget.NestedScrollView</span></div><div class=\"line\">        <span class=\"attr\">android:layout_width</span>=<span class=\"string\">\"match_parent\"</span></div><div class=\"line\">        <span class=\"attr\">android:layout_height</span>=<span class=\"string\">\"match_parent\"</span></div><div class=\"line\">        <span class=\"attr\">app:layout_behavior</span>=<span class=\"string\">\"@string/appbar_scrolling_view_behavior\"</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">LinearLayout</span></div><div class=\"line\">            <span class=\"attr\">android:layout_width</span>=<span class=\"string\">\"match_parent\"</span></div><div class=\"line\">            <span class=\"attr\">android:layout_height</span>=<span class=\"string\">\"match_parent\"</span></div><div class=\"line\">            <span class=\"attr\">android:orientation</span>=<span class=\"string\">\"vertical\"</span>&gt;</span></div><div class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">TextView</span></div><div class=\"line\">                <span class=\"attr\">android:layout_width</span>=<span class=\"string\">\"match_parent\"</span></div><div class=\"line\">                <span class=\"attr\">android:layout_height</span>=<span class=\"string\">\"180dp\"</span></div><div class=\"line\">                <span class=\"attr\">android:layout_margin</span>=<span class=\"string\">\"10dp\"</span></div><div class=\"line\">                <span class=\"attr\">android:background</span>=<span class=\"string\">\"#6660c6df\"</span></div><div class=\"line\">                <span class=\"attr\">android:gravity</span>=<span class=\"string\">\"center\"</span></div><div class=\"line\">                <span class=\"attr\">android:text</span>=<span class=\"string\">\"折\"</span></div><div class=\"line\">                <span class=\"attr\">android:textSize</span>=<span class=\"string\">\"26dp\"</span></div><div class=\"line\">                <span class=\"attr\">android:transitionName</span>=<span class=\"string\">\"zi\"</span> /&gt;</span></div><div class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">TextView</span></div><div class=\"line\">                <span class=\"attr\">android:layout_width</span>=<span class=\"string\">\"match_parent\"</span></div><div class=\"line\">                <span class=\"attr\">android:layout_height</span>=<span class=\"string\">\"180dp\"</span></div><div class=\"line\">                <span class=\"attr\">android:layout_margin</span>=<span class=\"string\">\"10dp\"</span></div><div class=\"line\">                <span class=\"attr\">android:background</span>=<span class=\"string\">\"#6660c6df\"</span></div><div class=\"line\">                <span class=\"attr\">android:gravity</span>=<span class=\"string\">\"center\"</span></div><div class=\"line\">                <span class=\"attr\">android:text</span>=<span class=\"string\">\"折叠\"</span></div><div class=\"line\">                <span class=\"attr\">android:textSize</span>=<span class=\"string\">\"26dp\"</span></div><div class=\"line\">                <span class=\"attr\">android:transitionName</span>=<span class=\"string\">\"zi\"</span> /&gt;</span></div><div class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">TextView</span></div><div class=\"line\">                <span class=\"attr\">android:layout_width</span>=<span class=\"string\">\"match_parent\"</span></div><div class=\"line\">                <span class=\"attr\">android:layout_height</span>=<span class=\"string\">\"180dp\"</span></div><div class=\"line\">                <span class=\"attr\">android:layout_margin</span>=<span class=\"string\">\"10dp\"</span></div><div class=\"line\">                <span class=\"attr\">android:background</span>=<span class=\"string\">\"#6660c6df\"</span></div><div class=\"line\">                <span class=\"attr\">android:gravity</span>=<span class=\"string\">\"center\"</span></div><div class=\"line\">                <span class=\"attr\">android:text</span>=<span class=\"string\">\"折叠示\"</span></div><div class=\"line\">                <span class=\"attr\">android:textSize</span>=<span class=\"string\">\"26dp\"</span></div><div class=\"line\">                <span class=\"attr\">android:transitionName</span>=<span class=\"string\">\"zi\"</span> /&gt;</span></div><div class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">TextView</span></div><div class=\"line\">                <span class=\"attr\">android:layout_width</span>=<span class=\"string\">\"match_parent\"</span></div><div class=\"line\">                <span class=\"attr\">android:layout_height</span>=<span class=\"string\">\"180dp\"</span></div><div class=\"line\">                <span class=\"attr\">android:layout_margin</span>=<span class=\"string\">\"10dp\"</span></div><div class=\"line\">                <span class=\"attr\">android:background</span>=<span class=\"string\">\"#6660c6df\"</span></div><div class=\"line\">                <span class=\"attr\">android:gravity</span>=<span class=\"string\">\"center\"</span></div><div class=\"line\">                <span class=\"attr\">android:text</span>=<span class=\"string\">\"折叠示例\"</span></div><div class=\"line\">                <span class=\"attr\">android:textSize</span>=<span class=\"string\">\"26dp\"</span></div><div class=\"line\">                <span class=\"attr\">android:transitionName</span>=<span class=\"string\">\"zi\"</span> /&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">LinearLayout</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">android.support.v4.widget.NestedScrollView</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">android.support.design.widget.CoordinatorLayout</span>&gt;</span></div></pre></td></tr></table></figure>\n</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;!-- activity --&gt;</div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">AppBarActivity</span> <span class=\"keyword\">extends</span> <span class=\"title\">BaseActivity</span></span>&#123;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">private</span> Toolbar toolbar;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"meta\">@Override</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">onCreate</span><span class=\"params\">(Bundle savedInstanceState)</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">super</span>.onCreate(savedInstanceState);</div><div class=\"line\">        setContentView(R.layout.activity_app_bar);</div><div class=\"line\">        toolbar = (Toolbar) findViewById(R.id.toolbar);</div><div class=\"line\">        toolbar.setTitle(<span class=\"string\">\"Title\"</span>);</div><div class=\"line\">        setSupportActionBar(toolbar);</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p><em>注意：在style中要设置主题为NoActionBar</em></p>\n<p><strong>2、AppBarLayout + CollapsingToolbarLayout</strong></p>\n<blockquote>\n<p>好了，我们现在又多了一个组件。看看CollapsingToolbarLayout是怎么用的。<br>CollapsingToolbarLayout作用是提供了可以折叠的Toolbar（CollapsingToolbarLayout是一个实现了折叠工具栏效果Toolbar的包装器，它被设计为AppBarLayout的直接子View。）</p>\n</blockquote>\n<p>实例说明：<br><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div><div class=\"line\">73</div><div class=\"line\">74</div><div class=\"line\">75</div><div class=\"line\">76</div><div class=\"line\">77</div><div class=\"line\">78</div><div class=\"line\">79</div><div class=\"line\">80</div><div class=\"line\">81</div><div class=\"line\">82</div><div class=\"line\">83</div><div class=\"line\">84</div><div class=\"line\">85</div><div class=\"line\">86</div><div class=\"line\">87</div><div class=\"line\">88</div><div class=\"line\">89</div><div class=\"line\">90</div><div class=\"line\">91</div><div class=\"line\">92</div><div class=\"line\">93</div><div class=\"line\">94</div><div class=\"line\">95</div><div class=\"line\">96</div><div class=\"line\">97</div><div class=\"line\">98</div><div class=\"line\">99</div><div class=\"line\">100</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">android.support.design.widget.CoordinatorLayout</span> <span class=\"attr\">xmlns:android</span>=<span class=\"string\">\"http://schemas.android.com/apk/res/android\"</span></div><div class=\"line\">    <span class=\"attr\">xmlns:app</span>=<span class=\"string\">\"http://schemas.android.com/apk/res-auto\"</span></div><div class=\"line\">    <span class=\"attr\">xmlns:tools</span>=<span class=\"string\">\"http://schemas.android.com/tools\"</span></div><div class=\"line\">    <span class=\"attr\">android:layout_width</span>=<span class=\"string\">\"match_parent\"</span></div><div class=\"line\">    <span class=\"attr\">android:layout_height</span>=<span class=\"string\">\"match_parent\"</span></div><div class=\"line\">    <span class=\"attr\">android:fitsSystemWindows</span>=<span class=\"string\">\"true\"</span></div><div class=\"line\">    <span class=\"attr\">android:clipToPadding</span>=<span class=\"string\">\"false\"</span></div><div class=\"line\">    &gt;</span></div><div class=\"line\"></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">android.support.design.widget.AppBarLayout</span></div><div class=\"line\">        <span class=\"attr\">android:layout_width</span>=<span class=\"string\">\"match_parent\"</span></div><div class=\"line\">        <span class=\"attr\">android:layout_height</span>=<span class=\"string\">\"300dp\"</span></div><div class=\"line\">        <span class=\"attr\">android:fitsSystemWindows</span>=<span class=\"string\">\"true\"</span></div><div class=\"line\">        <span class=\"attr\">android:theme</span>=<span class=\"string\">\"@style/ThemeOverlay.AppCompat.Dark.ActionBar\"</span>&gt;</span></div><div class=\"line\"></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">android.support.design.widget.CollapsingToolbarLayout</span></div><div class=\"line\">            <span class=\"attr\">android:id</span>=<span class=\"string\">\"@+id/collapsing_toolbar\"</span></div><div class=\"line\">            <span class=\"attr\">android:layout_width</span>=<span class=\"string\">\"match_parent\"</span></div><div class=\"line\">            <span class=\"attr\">android:layout_height</span>=<span class=\"string\">\"match_parent\"</span></div><div class=\"line\">            <span class=\"attr\">app:contentScrim</span>=<span class=\"string\">\"?attr/colorPrimary\"</span></div><div class=\"line\">            <span class=\"attr\">app:expandedTitleMarginEnd</span>=<span class=\"string\">\"64dp\"</span></div><div class=\"line\">            <span class=\"attr\">app:expandedTitleMarginStart</span>=<span class=\"string\">\"48dp\"</span></div><div class=\"line\">            <span class=\"attr\">app:layout_scrollFlags</span>=<span class=\"string\">\"scroll|exitUntilCollapsed\"</span>&gt;</span></div><div class=\"line\"></div><div class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">ImageView</span></div><div class=\"line\">                <span class=\"attr\">android:id</span>=<span class=\"string\">\"@+id/ivImage\"</span></div><div class=\"line\">                <span class=\"attr\">android:layout_width</span>=<span class=\"string\">\"match_parent\"</span></div><div class=\"line\">                <span class=\"attr\">android:layout_height</span>=<span class=\"string\">\"match_parent\"</span></div><div class=\"line\">                <span class=\"attr\">android:fitsSystemWindows</span>=<span class=\"string\">\"true\"</span></div><div class=\"line\">                <span class=\"attr\">android:transitionName</span>=<span class=\"string\">\"transition_book_img\"</span></div><div class=\"line\">                <span class=\"attr\">android:scaleType</span>=<span class=\"string\">\"centerCrop\"</span></div><div class=\"line\">                <span class=\"attr\">app:layout_collapseMode</span>=<span class=\"string\">\"parallax\"</span></div><div class=\"line\">                <span class=\"attr\">app:layout_collapseParallaxMultiplier</span>=<span class=\"string\">\"0.7\"</span> /&gt;</span></div><div class=\"line\"></div><div class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">android.support.v7.widget.Toolbar</span></div><div class=\"line\">                <span class=\"attr\">android:id</span>=<span class=\"string\">\"@+id/toolbar\"</span></div><div class=\"line\">                <span class=\"attr\">android:layout_width</span>=<span class=\"string\">\"match_parent\"</span></div><div class=\"line\">                <span class=\"attr\">android:layout_height</span>=<span class=\"string\">\"?attr/actionBarSize\"</span></div><div class=\"line\">                <span class=\"attr\">app:layout_collapseMode</span>=<span class=\"string\">\"pin\"</span></div><div class=\"line\">                <span class=\"attr\">app:layout_scrollFlags</span>=<span class=\"string\">\"scroll|enterAlways\"</span></div><div class=\"line\">                <span class=\"attr\">app:popupTheme</span>=<span class=\"string\">\"@style/ThemeOverlay.AppCompat.Light\"</span> /&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">android.support.design.widget.CollapsingToolbarLayout</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">android.support.design.widget.AppBarLayout</span>&gt;</span></div><div class=\"line\"></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">android.support.v4.widget.NestedScrollView</span></div><div class=\"line\">        <span class=\"attr\">android:layout_width</span>=<span class=\"string\">\"match_parent\"</span></div><div class=\"line\">        <span class=\"attr\">android:layout_height</span>=<span class=\"string\">\"match_parent\"</span></div><div class=\"line\">        <span class=\"attr\">app:layout_behavior</span>=<span class=\"string\">\"@string/appbar_scrolling_view_behavior\"</span>&gt;</span></div><div class=\"line\"></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">LinearLayout</span></div><div class=\"line\">            <span class=\"attr\">android:layout_width</span>=<span class=\"string\">\"match_parent\"</span></div><div class=\"line\">            <span class=\"attr\">android:layout_height</span>=<span class=\"string\">\"match_parent\"</span></div><div class=\"line\">            <span class=\"attr\">android:orientation</span>=<span class=\"string\">\"vertical\"</span>&gt;</span></div><div class=\"line\"></div><div class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">TextView</span></div><div class=\"line\">                <span class=\"attr\">android:layout_width</span>=<span class=\"string\">\"match_parent\"</span></div><div class=\"line\">                <span class=\"attr\">android:layout_height</span>=<span class=\"string\">\"180dp\"</span></div><div class=\"line\">                <span class=\"attr\">android:layout_margin</span>=<span class=\"string\">\"10dp\"</span></div><div class=\"line\">                <span class=\"attr\">android:background</span>=<span class=\"string\">\"#6660c6df\"</span></div><div class=\"line\">                <span class=\"attr\">android:gravity</span>=<span class=\"string\">\"center\"</span></div><div class=\"line\">                <span class=\"attr\">android:text</span>=<span class=\"string\">\"折\"</span></div><div class=\"line\">                <span class=\"attr\">android:textSize</span>=<span class=\"string\">\"26dp\"</span></div><div class=\"line\">                <span class=\"attr\">android:transitionName</span>=<span class=\"string\">\"zi\"</span> /&gt;</span></div><div class=\"line\"></div><div class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">TextView</span></div><div class=\"line\">                <span class=\"attr\">android:layout_width</span>=<span class=\"string\">\"match_parent\"</span></div><div class=\"line\">                <span class=\"attr\">android:layout_height</span>=<span class=\"string\">\"180dp\"</span></div><div class=\"line\">                <span class=\"attr\">android:layout_margin</span>=<span class=\"string\">\"10dp\"</span></div><div class=\"line\">                <span class=\"attr\">android:background</span>=<span class=\"string\">\"#6660c6df\"</span></div><div class=\"line\">                <span class=\"attr\">android:gravity</span>=<span class=\"string\">\"center\"</span></div><div class=\"line\">                <span class=\"attr\">android:text</span>=<span class=\"string\">\"折叠\"</span></div><div class=\"line\">                <span class=\"attr\">android:textSize</span>=<span class=\"string\">\"26dp\"</span></div><div class=\"line\">                <span class=\"attr\">android:transitionName</span>=<span class=\"string\">\"zi\"</span> /&gt;</span></div><div class=\"line\"></div><div class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">TextView</span></div><div class=\"line\">                <span class=\"attr\">android:layout_width</span>=<span class=\"string\">\"match_parent\"</span></div><div class=\"line\">                <span class=\"attr\">android:layout_height</span>=<span class=\"string\">\"180dp\"</span></div><div class=\"line\">                <span class=\"attr\">android:layout_margin</span>=<span class=\"string\">\"10dp\"</span></div><div class=\"line\">                <span class=\"attr\">android:background</span>=<span class=\"string\">\"#6660c6df\"</span></div><div class=\"line\">                <span class=\"attr\">android:gravity</span>=<span class=\"string\">\"center\"</span></div><div class=\"line\">                <span class=\"attr\">android:text</span>=<span class=\"string\">\"折叠示\"</span></div><div class=\"line\">                <span class=\"attr\">android:textSize</span>=<span class=\"string\">\"26dp\"</span></div><div class=\"line\">                <span class=\"attr\">android:transitionName</span>=<span class=\"string\">\"zi\"</span> /&gt;</span></div><div class=\"line\"></div><div class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">TextView</span></div><div class=\"line\">                <span class=\"attr\">android:layout_width</span>=<span class=\"string\">\"match_parent\"</span></div><div class=\"line\">                <span class=\"attr\">android:layout_height</span>=<span class=\"string\">\"180dp\"</span></div><div class=\"line\">                <span class=\"attr\">android:layout_margin</span>=<span class=\"string\">\"10dp\"</span></div><div class=\"line\">                <span class=\"attr\">android:background</span>=<span class=\"string\">\"#6660c6df\"</span></div><div class=\"line\">                <span class=\"attr\">android:gravity</span>=<span class=\"string\">\"center\"</span></div><div class=\"line\">                <span class=\"attr\">android:text</span>=<span class=\"string\">\"折叠示例\"</span></div><div class=\"line\">                <span class=\"attr\">android:textSize</span>=<span class=\"string\">\"26dp\"</span></div><div class=\"line\">                <span class=\"attr\">android:transitionName</span>=<span class=\"string\">\"zi\"</span> /&gt;</span></div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">LinearLayout</span>&gt;</span></div><div class=\"line\"></div><div class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">android.support.v4.widget.NestedScrollView</span>&gt;</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">android.support.design.widget.CoordinatorLayout</span>&gt;</span></div></pre></td></tr></table></figure></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ToolbarLayoutActivity</span> <span class=\"keyword\">extends</span> <span class=\"title\">BaseActivity</span></span>&#123;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">private</span> CollapsingToolbarLayout mCollapsing;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"meta\">@Override</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">onCreate</span><span class=\"params\">(@Nullable Bundle savedInstanceState)</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">super</span>.onCreate(savedInstanceState);</div><div class=\"line\"></div><div class=\"line\">        setContentView(R.layout.activity_tool_layout);</div><div class=\"line\"></div><div class=\"line\">        initFindView();</div><div class=\"line\">        initView();</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">initView</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">        <span class=\"comment\">//设置标题的一些属性</span></div><div class=\"line\">        mCollapsing.setTitle(<span class=\"string\">\"设置ToolBar\"</span>);</div><div class=\"line\">        mCollapsing.setCollapsedTitleGravity(Gravity.CENTER); <span class=\"comment\">//标题收缩后的位置，居中</span></div><div class=\"line\">        mCollapsing.setExpandedTitleColor(Color.TRANSPARENT); <span class=\"comment\">// 标题展示时颜色</span></div><div class=\"line\">        mCollapsing.setCollapsedTitleTextColor(Color.WHITE); <span class=\"comment\">// 标题收缩时的颜色</span></div><div class=\"line\"></div><div class=\"line\">        <span class=\"comment\">//沉浸式内容(改变收缩后toolbar背景，有渐变效果)</span></div><div class=\"line\">        <span class=\"comment\">//也可以通过app:contentScrim=”?attr/colorPrimary”来改变效果</span></div><div class=\"line\">        mCollapsing.setContentScrim(getResources().getDrawable(R.drawable.sy_2010091620583620405));</div><div class=\"line\"></div><div class=\"line\">        <span class=\"comment\">//沉浸式状态栏</span></div><div class=\"line\">        collapsingToolbarLayout.setStatusBarScrim(getResources().getDrawable(R.drawable.sy_2010091620583620405));</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">initFindView</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">        mCollapsing = (CollapsingToolbarLayout) findViewById(R.id.collapsing_toolbar);</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>说明：</p>\n<pre><code>* 折叠标题 （如上述代码）。\n* 视差滚动，通过设置app:layout_collapseParallaxMultiplier属性获取。视差值介于0.0-1.0之间。\n* 顶部悬浮，通过设置app:layout_collapseMode设置折叠模式\n    - “pin”：固定模式，在折叠的时候最后固定在顶端\n    - “parallax”：视差模式，在折叠的时候会有个视差折叠的效果\n</code></pre>"},{"title":"RecyclerView坑点","date":"2016-11-28T08:11:49.000Z","_content":"RecyclerView用来代替ListView和GridView，它的优点很多，这里就不详细说明了。这里主要记录下我在使用RecyclerView时候的主要坑点。\n\n### 卡顿！！\n\n如果在item中使用了较为复杂的布局，如嵌套等。就会出现卡顿现象。（是特别卡）\n\n**解决方法：**\n网上查找的方案有以下几种思路：\n\n1、如果有很多图片加载，可以使用图片加载框架。配合加载时机（停止滑动时加载图片）。\n2、尽量不要使用太复杂的布局，可以自定义View,或者改UI\n3、如果一定要使用嵌套的话，不要嵌套GridView，直接嵌套RecycleView好了。\n4、可以用同一个RecycleViewPool\n\n然而有时候这几种方案并不能完全解决我们的问题，卡顿还是会出现。\n\n<!-- more -->  \n\n----\n\n### 从RecyclerView源码入手\n>参考：http://www.jianshu.com/p/32c963b1ebc1（文／梨花满天便是雪）\n可以先看这篇博客了解下RecyckerView大概缓存机制。\n\n**RecycledViewPool**\n>RecycledViewPool类是用来缓存Item用，是一个ViewHolder的缓存池，如果多个RecyclerView之间用setRecycledViewPool(RecycledViewPool)设置同一个RecycledViewPool，他们就可以共享Item。其实RecycledViewPool的内部维护了一个Map，里面以不同的viewType为Key存储了各自对应的ViewHolder集合。可以通过提供的方法来修改内部缓存的Viewholder。\n\n所以，当不同的RecyclerView中使用相同类型的item时，利用共享一个RecycledViewPool，就可以提升滑动的流程程度。\n\n这个类提供了四个公共方法：\n- clear()  清空缓存池\n- getRecycledView(int viewType)  得到一个viewType类型的Item\n- putRecycledView(RecyclerView.ViewHolder scrap)  把viewType类型的Item放入缓存池\n- setMaxRecycledViews(int viewType, int max)  设置对应viewType类型的Item的最大缓存数量\n\n----\n\n**ViewCacheExtension**\n>ViewCacheExtension的代码一看什么都没有，没错这是一个需要开发者重写的类。上面Recycler里调用Recycler.getViewForPosition(int)方法获取View时，Recycler先检查自己内部的attached scrap和一级缓存，再检查ViewCacheExtension.getViewForPositionAndType(Recycler, int, int)，最后检查RecyclerViewPool，从上面三个任何一个只要拿到View就不会调用下一个方法。所以我们可以重写getViewForPositionAndType(Recycler recycler, int position, int type)，在方法里通过Recycler类控制View缓存。注意：如果你重写了这个类，Recycler不会在这个类中做缓存View的操作，是否缓存View完全由开发者控制。\n\n```java\n public abstract static class ViewCacheExtension {\n\n        abstract public View getViewForPositionAndType(Recycler recycler, int position, int type);\n    }\n```\n\n这个类里面只有提供了一个方法，就是获取缓存View的方法。开发者要自己想办法把想要缓存的View放进去。\n\n我的做法是：创建一个类来继承ViewCacheExtension，重写里面的方法。在onBindClickViewHolder（）方法创建实例，把对应holder的View加进去。\n\n```java\n    public class ViewHolderCache extends RecyclerView.ViewCacheExtension{\n        private View mView;\n\n        public ViewHolderCache(CateGoryHolder holder) {\n            mView = holder.getItemView();\n        }\n\n\n        @Override\n        public View getViewForPositionAndType(RecyclerView.Recycler recycler, int position, int type) {\n            if(type == Type.CATEGORY.ordinal() && position == 1){\n                return mView;\n            }\n            return null;\n        }\n    }\n\n\n    ------\n    @Override\n    public void onBindClickViewHolder(RecyclerView.ViewHolder holder, int position) {\n            ...\n            ((CateGoryHolder) holder).setGridView(mContext,recycledViewPool, mCategoryList);\n\n            ViewHolderCache viewHolderCache = new ViewHolderCache((CateGoryHolder)holder);\n            ...\n        }\n    }\n\n```\n\n\n这里可以保存特定的View缓存。解决比较特殊的item Type卡顿现象。\n\n**setItemViewCacheSize方法**\n\n最后的最后，如果你实在解决不了了。可以使用RecyclerView.setItemViewCacheSize(data.size())。\n虽然解决了燃眉之急，不过潜在的风险你懂得。\n\n\n\n**RecyclerView嵌套RecyclerView**\n\n\n\n\n\n\n\n\n\n\n","source":"_posts/RecyclerView坑点.md","raw":"---\ntitle: RecyclerView坑点\ndate: 2016-11-28 16:11:49\ntags: [Android]\n---\nRecyclerView用来代替ListView和GridView，它的优点很多，这里就不详细说明了。这里主要记录下我在使用RecyclerView时候的主要坑点。\n\n### 卡顿！！\n\n如果在item中使用了较为复杂的布局，如嵌套等。就会出现卡顿现象。（是特别卡）\n\n**解决方法：**\n网上查找的方案有以下几种思路：\n\n1、如果有很多图片加载，可以使用图片加载框架。配合加载时机（停止滑动时加载图片）。\n2、尽量不要使用太复杂的布局，可以自定义View,或者改UI\n3、如果一定要使用嵌套的话，不要嵌套GridView，直接嵌套RecycleView好了。\n4、可以用同一个RecycleViewPool\n\n然而有时候这几种方案并不能完全解决我们的问题，卡顿还是会出现。\n\n<!-- more -->  \n\n----\n\n### 从RecyclerView源码入手\n>参考：http://www.jianshu.com/p/32c963b1ebc1（文／梨花满天便是雪）\n可以先看这篇博客了解下RecyckerView大概缓存机制。\n\n**RecycledViewPool**\n>RecycledViewPool类是用来缓存Item用，是一个ViewHolder的缓存池，如果多个RecyclerView之间用setRecycledViewPool(RecycledViewPool)设置同一个RecycledViewPool，他们就可以共享Item。其实RecycledViewPool的内部维护了一个Map，里面以不同的viewType为Key存储了各自对应的ViewHolder集合。可以通过提供的方法来修改内部缓存的Viewholder。\n\n所以，当不同的RecyclerView中使用相同类型的item时，利用共享一个RecycledViewPool，就可以提升滑动的流程程度。\n\n这个类提供了四个公共方法：\n- clear()  清空缓存池\n- getRecycledView(int viewType)  得到一个viewType类型的Item\n- putRecycledView(RecyclerView.ViewHolder scrap)  把viewType类型的Item放入缓存池\n- setMaxRecycledViews(int viewType, int max)  设置对应viewType类型的Item的最大缓存数量\n\n----\n\n**ViewCacheExtension**\n>ViewCacheExtension的代码一看什么都没有，没错这是一个需要开发者重写的类。上面Recycler里调用Recycler.getViewForPosition(int)方法获取View时，Recycler先检查自己内部的attached scrap和一级缓存，再检查ViewCacheExtension.getViewForPositionAndType(Recycler, int, int)，最后检查RecyclerViewPool，从上面三个任何一个只要拿到View就不会调用下一个方法。所以我们可以重写getViewForPositionAndType(Recycler recycler, int position, int type)，在方法里通过Recycler类控制View缓存。注意：如果你重写了这个类，Recycler不会在这个类中做缓存View的操作，是否缓存View完全由开发者控制。\n\n```java\n public abstract static class ViewCacheExtension {\n\n        abstract public View getViewForPositionAndType(Recycler recycler, int position, int type);\n    }\n```\n\n这个类里面只有提供了一个方法，就是获取缓存View的方法。开发者要自己想办法把想要缓存的View放进去。\n\n我的做法是：创建一个类来继承ViewCacheExtension，重写里面的方法。在onBindClickViewHolder（）方法创建实例，把对应holder的View加进去。\n\n```java\n    public class ViewHolderCache extends RecyclerView.ViewCacheExtension{\n        private View mView;\n\n        public ViewHolderCache(CateGoryHolder holder) {\n            mView = holder.getItemView();\n        }\n\n\n        @Override\n        public View getViewForPositionAndType(RecyclerView.Recycler recycler, int position, int type) {\n            if(type == Type.CATEGORY.ordinal() && position == 1){\n                return mView;\n            }\n            return null;\n        }\n    }\n\n\n    ------\n    @Override\n    public void onBindClickViewHolder(RecyclerView.ViewHolder holder, int position) {\n            ...\n            ((CateGoryHolder) holder).setGridView(mContext,recycledViewPool, mCategoryList);\n\n            ViewHolderCache viewHolderCache = new ViewHolderCache((CateGoryHolder)holder);\n            ...\n        }\n    }\n\n```\n\n\n这里可以保存特定的View缓存。解决比较特殊的item Type卡顿现象。\n\n**setItemViewCacheSize方法**\n\n最后的最后，如果你实在解决不了了。可以使用RecyclerView.setItemViewCacheSize(data.size())。\n虽然解决了燃眉之急，不过潜在的风险你懂得。\n\n\n\n**RecyclerView嵌套RecyclerView**\n\n\n\n\n\n\n\n\n\n\n","slug":"RecyclerView坑点","published":1,"updated":"2017-03-29T15:51:22.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj0v5msvt000rx5ypl9qdbeal","content":"<p>RecyclerView用来代替ListView和GridView，它的优点很多，这里就不详细说明了。这里主要记录下我在使用RecyclerView时候的主要坑点。</p>\n<h3 id=\"卡顿！！\"><a href=\"#卡顿！！\" class=\"headerlink\" title=\"卡顿！！\"></a>卡顿！！</h3><p>如果在item中使用了较为复杂的布局，如嵌套等。就会出现卡顿现象。（是特别卡）</p>\n<p><strong>解决方法：</strong><br>网上查找的方案有以下几种思路：</p>\n<p>1、如果有很多图片加载，可以使用图片加载框架。配合加载时机（停止滑动时加载图片）。<br>2、尽量不要使用太复杂的布局，可以自定义View,或者改UI<br>3、如果一定要使用嵌套的话，不要嵌套GridView，直接嵌套RecycleView好了。<br>4、可以用同一个RecycleViewPool</p>\n<p>然而有时候这几种方案并不能完全解决我们的问题，卡顿还是会出现。</p>\n<a id=\"more\"></a>  \n<hr>\n<h3 id=\"从RecyclerView源码入手\"><a href=\"#从RecyclerView源码入手\" class=\"headerlink\" title=\"从RecyclerView源码入手\"></a>从RecyclerView源码入手</h3><blockquote>\n<p>参考：<a href=\"http://www.jianshu.com/p/32c963b1ebc1（文／梨花满天便是雪）\" target=\"_blank\" rel=\"external\">http://www.jianshu.com/p/32c963b1ebc1（文／梨花满天便是雪）</a><br>可以先看这篇博客了解下RecyckerView大概缓存机制。</p>\n</blockquote>\n<p><strong>RecycledViewPool</strong></p>\n<blockquote>\n<p>RecycledViewPool类是用来缓存Item用，是一个ViewHolder的缓存池，如果多个RecyclerView之间用setRecycledViewPool(RecycledViewPool)设置同一个RecycledViewPool，他们就可以共享Item。其实RecycledViewPool的内部维护了一个Map，里面以不同的viewType为Key存储了各自对应的ViewHolder集合。可以通过提供的方法来修改内部缓存的Viewholder。</p>\n</blockquote>\n<p>所以，当不同的RecyclerView中使用相同类型的item时，利用共享一个RecycledViewPool，就可以提升滑动的流程程度。</p>\n<p>这个类提供了四个公共方法：</p>\n<ul>\n<li>clear()  清空缓存池</li>\n<li>getRecycledView(int viewType)  得到一个viewType类型的Item</li>\n<li>putRecycledView(RecyclerView.ViewHolder scrap)  把viewType类型的Item放入缓存池</li>\n<li>setMaxRecycledViews(int viewType, int max)  设置对应viewType类型的Item的最大缓存数量</li>\n</ul>\n<hr>\n<p><strong>ViewCacheExtension</strong></p>\n<blockquote>\n<p>ViewCacheExtension的代码一看什么都没有，没错这是一个需要开发者重写的类。上面Recycler里调用Recycler.getViewForPosition(int)方法获取View时，Recycler先检查自己内部的attached scrap和一级缓存，再检查ViewCacheExtension.getViewForPositionAndType(Recycler, int, int)，最后检查RecyclerViewPool，从上面三个任何一个只要拿到View就不会调用下一个方法。所以我们可以重写getViewForPositionAndType(Recycler recycler, int position, int type)，在方法里通过Recycler类控制View缓存。注意：如果你重写了这个类，Recycler不会在这个类中做缓存View的操作，是否缓存View完全由开发者控制。</p>\n</blockquote>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">abstract</span> <span class=\"keyword\">static</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ViewCacheExtension</span> </span>&#123;</div><div class=\"line\"></div><div class=\"line\">       <span class=\"function\"><span class=\"keyword\">abstract</span> <span class=\"keyword\">public</span> View <span class=\"title\">getViewForPositionAndType</span><span class=\"params\">(Recycler recycler, <span class=\"keyword\">int</span> position, <span class=\"keyword\">int</span> type)</span></span>;</div><div class=\"line\">   &#125;</div></pre></td></tr></table></figure>\n<p>这个类里面只有提供了一个方法，就是获取缓存View的方法。开发者要自己想办法把想要缓存的View放进去。</p>\n<p>我的做法是：创建一个类来继承ViewCacheExtension，重写里面的方法。在onBindClickViewHolder（）方法创建实例，把对应holder的View加进去。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ViewHolderCache</span> <span class=\"keyword\">extends</span> <span class=\"title\">RecyclerView</span>.<span class=\"title\">ViewCacheExtension</span></span>&#123;</div><div class=\"line\">    <span class=\"keyword\">private</span> View mView;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">ViewHolderCache</span><span class=\"params\">(CateGoryHolder holder)</span> </span>&#123;</div><div class=\"line\">        mView = holder.getItemView();</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">    <span class=\"meta\">@Override</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> View <span class=\"title\">getViewForPositionAndType</span><span class=\"params\">(RecyclerView.Recycler recycler, <span class=\"keyword\">int</span> position, <span class=\"keyword\">int</span> type)</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">if</span>(type == Type.CATEGORY.ordinal() &amp;&amp; position == <span class=\"number\">1</span>)&#123;</div><div class=\"line\">            <span class=\"keyword\">return</span> mView;</div><div class=\"line\">        &#125;</div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">null</span>;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">------</div><div class=\"line\"><span class=\"meta\">@Override</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onBindClickViewHolder</span><span class=\"params\">(RecyclerView.ViewHolder holder, <span class=\"keyword\">int</span> position)</span> </span>&#123;</div><div class=\"line\">        ...</div><div class=\"line\">        ((CateGoryHolder) holder).setGridView(mContext,recycledViewPool, mCategoryList);</div><div class=\"line\"></div><div class=\"line\">        ViewHolderCache viewHolderCache = <span class=\"keyword\">new</span> ViewHolderCache((CateGoryHolder)holder);</div><div class=\"line\">        ...</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>这里可以保存特定的View缓存。解决比较特殊的item Type卡顿现象。</p>\n<p><strong>setItemViewCacheSize方法</strong></p>\n<p>最后的最后，如果你实在解决不了了。可以使用RecyclerView.setItemViewCacheSize(data.size())。<br>虽然解决了燃眉之急，不过潜在的风险你懂得。</p>\n<p><strong>RecyclerView嵌套RecyclerView</strong></p>\n","excerpt":"<p>RecyclerView用来代替ListView和GridView，它的优点很多，这里就不详细说明了。这里主要记录下我在使用RecyclerView时候的主要坑点。</p>\n<h3 id=\"卡顿！！\"><a href=\"#卡顿！！\" class=\"headerlink\" title=\"卡顿！！\"></a>卡顿！！</h3><p>如果在item中使用了较为复杂的布局，如嵌套等。就会出现卡顿现象。（是特别卡）</p>\n<p><strong>解决方法：</strong><br>网上查找的方案有以下几种思路：</p>\n<p>1、如果有很多图片加载，可以使用图片加载框架。配合加载时机（停止滑动时加载图片）。<br>2、尽量不要使用太复杂的布局，可以自定义View,或者改UI<br>3、如果一定要使用嵌套的话，不要嵌套GridView，直接嵌套RecycleView好了。<br>4、可以用同一个RecycleViewPool</p>\n<p>然而有时候这几种方案并不能完全解决我们的问题，卡顿还是会出现。</p>","more":"<hr>\n<h3 id=\"从RecyclerView源码入手\"><a href=\"#从RecyclerView源码入手\" class=\"headerlink\" title=\"从RecyclerView源码入手\"></a>从RecyclerView源码入手</h3><blockquote>\n<p>参考：<a href=\"http://www.jianshu.com/p/32c963b1ebc1（文／梨花满天便是雪）\">http://www.jianshu.com/p/32c963b1ebc1（文／梨花满天便是雪）</a><br>可以先看这篇博客了解下RecyckerView大概缓存机制。</p>\n</blockquote>\n<p><strong>RecycledViewPool</strong></p>\n<blockquote>\n<p>RecycledViewPool类是用来缓存Item用，是一个ViewHolder的缓存池，如果多个RecyclerView之间用setRecycledViewPool(RecycledViewPool)设置同一个RecycledViewPool，他们就可以共享Item。其实RecycledViewPool的内部维护了一个Map，里面以不同的viewType为Key存储了各自对应的ViewHolder集合。可以通过提供的方法来修改内部缓存的Viewholder。</p>\n</blockquote>\n<p>所以，当不同的RecyclerView中使用相同类型的item时，利用共享一个RecycledViewPool，就可以提升滑动的流程程度。</p>\n<p>这个类提供了四个公共方法：</p>\n<ul>\n<li>clear()  清空缓存池</li>\n<li>getRecycledView(int viewType)  得到一个viewType类型的Item</li>\n<li>putRecycledView(RecyclerView.ViewHolder scrap)  把viewType类型的Item放入缓存池</li>\n<li>setMaxRecycledViews(int viewType, int max)  设置对应viewType类型的Item的最大缓存数量</li>\n</ul>\n<hr>\n<p><strong>ViewCacheExtension</strong></p>\n<blockquote>\n<p>ViewCacheExtension的代码一看什么都没有，没错这是一个需要开发者重写的类。上面Recycler里调用Recycler.getViewForPosition(int)方法获取View时，Recycler先检查自己内部的attached scrap和一级缓存，再检查ViewCacheExtension.getViewForPositionAndType(Recycler, int, int)，最后检查RecyclerViewPool，从上面三个任何一个只要拿到View就不会调用下一个方法。所以我们可以重写getViewForPositionAndType(Recycler recycler, int position, int type)，在方法里通过Recycler类控制View缓存。注意：如果你重写了这个类，Recycler不会在这个类中做缓存View的操作，是否缓存View完全由开发者控制。</p>\n</blockquote>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">abstract</span> <span class=\"keyword\">static</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ViewCacheExtension</span> </span>&#123;</div><div class=\"line\"></div><div class=\"line\">       <span class=\"function\"><span class=\"keyword\">abstract</span> <span class=\"keyword\">public</span> View <span class=\"title\">getViewForPositionAndType</span><span class=\"params\">(Recycler recycler, <span class=\"keyword\">int</span> position, <span class=\"keyword\">int</span> type)</span></span>;</div><div class=\"line\">   &#125;</div></pre></td></tr></table></figure>\n<p>这个类里面只有提供了一个方法，就是获取缓存View的方法。开发者要自己想办法把想要缓存的View放进去。</p>\n<p>我的做法是：创建一个类来继承ViewCacheExtension，重写里面的方法。在onBindClickViewHolder（）方法创建实例，把对应holder的View加进去。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ViewHolderCache</span> <span class=\"keyword\">extends</span> <span class=\"title\">RecyclerView</span>.<span class=\"title\">ViewCacheExtension</span></span>&#123;</div><div class=\"line\">    <span class=\"keyword\">private</span> View mView;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">ViewHolderCache</span><span class=\"params\">(CateGoryHolder holder)</span> </span>&#123;</div><div class=\"line\">        mView = holder.getItemView();</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">    <span class=\"meta\">@Override</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> View <span class=\"title\">getViewForPositionAndType</span><span class=\"params\">(RecyclerView.Recycler recycler, <span class=\"keyword\">int</span> position, <span class=\"keyword\">int</span> type)</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">if</span>(type == Type.CATEGORY.ordinal() &amp;&amp; position == <span class=\"number\">1</span>)&#123;</div><div class=\"line\">            <span class=\"keyword\">return</span> mView;</div><div class=\"line\">        &#125;</div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">null</span>;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">------</div><div class=\"line\"><span class=\"meta\">@Override</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onBindClickViewHolder</span><span class=\"params\">(RecyclerView.ViewHolder holder, <span class=\"keyword\">int</span> position)</span> </span>&#123;</div><div class=\"line\">        ...</div><div class=\"line\">        ((CateGoryHolder) holder).setGridView(mContext,recycledViewPool, mCategoryList);</div><div class=\"line\"></div><div class=\"line\">        ViewHolderCache viewHolderCache = <span class=\"keyword\">new</span> ViewHolderCache((CateGoryHolder)holder);</div><div class=\"line\">        ...</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>这里可以保存特定的View缓存。解决比较特殊的item Type卡顿现象。</p>\n<p><strong>setItemViewCacheSize方法</strong></p>\n<p>最后的最后，如果你实在解决不了了。可以使用RecyclerView.setItemViewCacheSize(data.size())。<br>虽然解决了燃眉之急，不过潜在的风险你懂得。</p>\n<p><strong>RecyclerView嵌套RecyclerView</strong></p>"},{"title":"开启我的博客","date":"2016-11-04T15:11:30.000Z","_content":"折腾了半天，终于开启了第一篇博客。\n\n<img src=\"http://og5n67ybk.bkt.clouddn.com/11%20-%20bawZxrN.png\">\n","source":"_posts/我的第一篇博客.md","raw":"---\ntitle: 开启我的博客\ndate: 2016-11-04 23:11:30\ntags: 随笔\n---\n折腾了半天，终于开启了第一篇博客。\n\n<img src=\"http://og5n67ybk.bkt.clouddn.com/11%20-%20bawZxrN.png\">\n","slug":"我的第一篇博客","published":1,"updated":"2017-03-29T15:51:22.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj0v5msvw000sx5ypf7i5b8wj","content":"<p>折腾了半天，终于开启了第一篇博客。</p>\n<p><img src=\"http://og5n67ybk.bkt.clouddn.com/11%20-%20bawZxrN.png\"></p>\n","excerpt":"","more":"<p>折腾了半天，终于开启了第一篇博客。</p>\n<p><img src=\"http://og5n67ybk.bkt.clouddn.com/11%20-%20bawZxrN.png\"></p>\n"},{"title":"java 反射机制","date":"2017-03-29T01:59:59.000Z","_content":"\n**反射解决的问题：**\n\n> 反射主要解决动态编程,即使用反射时,所有的对象生成是动态的,因此调用的方法也是动态的。反射可以简化开发,但是代码的可读性很低。\n\n\n<!-- more --> \n\n### Class对象\n\n> java中所有类型都对应一个Class对象（java.lang.Class）\n> \n> 虚拟机为每种类型管理一个独一无二的class对象。运行程序时，java\n> 虚拟机首先检查是否所要加载的类相对应的class对象已经加载，如果没有加载，虚拟机会根类名查找.class文件，并将其class对象载入。\n> \n> 一般某个类的class对象被载入内存，它就用来创建这个类的所有对象。\n\n<img src='http://ofjn4kn3q.bkt.clouddn.com/%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7%202017-03-29%20%E4%B8%8A%E5%8D%8810.15.53.png'>\n\n\n**如何获取class对象**\n\n1、**对象.getClass()** 或者 **类名.Class** 可以获取对应对象的class。\n\n2、对于基本类型：封装类.TYPE代表了对应的基本类型的Class对象 \n\n    如： Integer.TYPE对应的是int的Class对象 \n\n3、如果知道类名（全名)可以通过Class.forName(className)获取。这是动态的获取class对象。\n\n---\n\n\n### 反射获取对象。\n\n>上面已经获得了class对象。我们真正想要的是类的实例。如何获得呢？\n\n\n代码：\n```\n\n    //创建一个类student类\n    public class Student {\n        private String name;\n        private int age;\n        private String tag;\n\n        public Student() {\n            tag = \"无参数\";\n        }\n\n        public Student(String name, int age) {\n            this.name = name;\n            this.age = age;\n            tag = \"含参数\";\n        }\n\n        @Override\n        public String toString() {\n            return tag;\n        }\n    }\n\n```\n\n测试代码：\n\n```\n    \n    Class c = Class.forName(\"com.clazz.reflect.Student\");\n\n    //无参数的做法\n    Object cObj = c.newInstance();//调用无参的构造方法\n    System.out.prin(cObj);  //打印：无参数\n\n    //有参数的做法\n    Constructor conAll = c.getConstructor(String.class,int.class); //传入参数类型\n    Object caobj = conAll.newInstance(\"李四\",23);//调用含参的构造方法.\n    System.out.prin(caobj);  //打印：含参数\n\n```\n\n1、创建无参数对象：.newInstance();\n\n2、创建有参对象： 先通过getConstructor()指定参数类型，然后在调用newInstance()。\n\n**注：如何student类本身没有无参构造函数，直接调用newInstance()，会报错**\n\n\n---\n\n\n### 关于反射的其他方法\n\n>上面介绍了newInstance()方法和getConstructor()方法使用，下面详细介绍其他常用几个方法：\n\n\n**1、获取构造方法：**\n\n    Constructor<T> getConstructor(Class<?>... parameterTypes)  \n\n        返回一个 Constructor 对象，它反映此 Class 对象所表示的类的指定公共构造方法。 \n\n    Constructor<?>[] getConstructors() \n\n        返回一个包含某些 Constructor 对象的数组，这些对象反映此 Class 对象所表示的类的所有公共构造方法。 \n\n\n**2、获取成员字段：**\n\n     Field getField(String name)    //参数：属性名\n\n          返回一个 Field 对象，它反映此 Class 对象所表示的类或接口的指定公共成员字段。 \n\n     Field[] getFields() \n\n          返回一个包含某些 Field 对象的数组，这些对象反映此 Class 对象所表示的类或接口的所有可访问公共字段。\n\n     Field getDeclaredField(String name)   //参数：属性名\n\n          返回一个 Field 对象，该对象反映此 Class 对象所表示的类或接口的指定已声明字段。 \n\n     Field[] getDeclaredFields() \n\n          返回 Field 对象的一个数组，这些对象反映此 Class 对象所表示的类或接口所声明的所有字段。 \n\n\n**3、获取成员方法：**\n\n     Method getMethod(String name, Class<?>... parameterTypes)  //参数：方法名，参数类型数组\n\n      返回一个 Method 对象，它反映此 Class 对象所表示的类或接口的指定公共成员方法。 \n\n    Method[] getMethods() \n\n      返回一个包含某些 Method 对象的数组，这些对象反映此 Class 对象所表示的类或接口（包括那些由该类或接口声明的以及从超类和超接口继承的那些的类或接口）的公共 member 方法。 \n\n    Method getDeclaredMethod(String name, Class<?>... parameterTypes) //参数：方法名，参数类型数组\n\n      返回一个 Method 对象，该对象反映此 Class 对象所表示的类或接口的指定已声明方法。\n\n    Method[] getDeclaredMethods() \n\n      返回 Method 对象的一个数组，这些对象反映此 Class 对象表示的类或接口声明的所有方法，包括公共、保护、默认（包）访问和私有方法，但不包括继承的方法。 \n\n\n**4、创建实例、执行方法、转换字符串**\n\n    T newInstance() \n\n      创建此 Class 对象所表示的类的一个新实例。 <new Instance()可以动态的创建对象>\n\n    String toString() \n\n      将对象转换为字符串。\n\n    method.invoke(Object receiver, Object ... args)  //参数：对象实例，方法需要的参数\n\n      执行方法\n\n\n注意：如果拿到的是私有成员变量，首先要调用setAccessible(true)方法，表示允许访问修改。\n\n    如：\n        Field name = aClass.getDeclaredField(\"name\");\n        name.setAccessible(true);\n        name.set(student1,\"张三\");\n\n\n----\n\n### 反射其他高级用法\n>既然Class对象可以拿到类的所有信息，那当类有父类，有接口的时候，就可以通过反射获取它们。\n\n```java\n\n    //获取父类的class对象，拿到这个实例就可以对父类进行反射操作。\n    Class superclass = aClass.getSuperclass();\n\n    //获取接口集合\n    Class[] interfaces = aClass.getInterfaces();\n\n\n```\n\n\n**在泛型上的运用：**\n\n```java\n\n    //获取返回值泛型类型\n    getGenericReturnType()\n\n    //获取方法参数泛型类型\n    getGenericParameterTypes()\n    \n    //超类的泛型类型\n    getGenericSuperclass()\n\n```\n\n\n```java\n\n    public class MyClass<T> {\n      protected List<String> stringList = ...;\n\n      public List<String> getStringList(){\n        return this.stringList;\n      }\n\n      public void setStringList(List<String> list){\n        this.stringList = list;\n      }\n    }\n\n    ...\n\n    //获取返回值的泛型类型\n    Method method = MyClass.class.getMethod(\"getStringList\", null);\n    Type returnType = method.getGenericReturnType();\n\n    if(returnType instanceof ParameterizedType){\n        ParameterizedType type = (ParameterizedType) returnType;\n        Type[] typeArguments = type.getActualTypeArguments();\n        for(Type typeArgument : typeArguments){\n            Class typeArgClass = (Class) typeArgument;\n            System.out.println(\"typeArgClass = \" + typeArgClass);\n        }\n    }\n\n    //获取参数上的泛型类型\n    method = Myclass.class.getMethod(\"setStringList\", List.class);\n    Type[] genericParameterTypes = method.getGenericParameterTypes();\n\n    for(Type genericParameterType : genericParameterTypes){\n        if(genericParameterType instanceof ParameterizedType){\n            ParameterizedType aType = (ParameterizedType) genericParameterType;\n            Type[] parameterArgTypes = aType.getActualTypeArguments();\n            for(Type parameterArgType : parameterArgTypes){\n                Class parameterArgClass = (Class) parameterArgType;\n                System.out.println(\"parameterArgClass = \" + parameterArgClass);\n            }\n        }\n    }\n\n    //获取成员变量上的泛型类型\n    field = Myclass.class.getDeclaredField(\"stringList\");\n    Type genericType = surper.getGenericType();\n\n    if(genericType instanceof ParameterizedType){\n        ParameterizedType aType = (ParameterizedType) genericType;\n        Type[] parameterArgTypes = aType.getActualTypeArguments();\n        for(Type parameterArgType:parameterArgTypes){\n            Class fieldArgClass = (Class) parameterArgType;\n            System.out.print(\"fieldArgClass = \" + fieldArgClass);\n        }\n    }\n\n    //获取类上的泛型(getGenericSuperclass方法使用时有规定)\n    Class<?> clazz = getClass(); //获取实际运行的类的 Class\n    Type type = clazz.getGenericSuperclass(); //获取实际运行的类的直接超类的泛型类型\n    if(type instanceof ParameterizedType){ //如果该泛型类型是参数化类型\n        Type[] parameterizedType = ((ParameterizedType)type).getActualTypeArguments();//获取泛型类型的实际类型参数集\n        entityClass = (Class<T>) parameterizedType[0]; //取出第一个(下标为0)参数的值\n\n        System.out.print(\"entityClass = \" + entityClass);\n    }\n\n```\n\n---\n\n\n```java\n\n    public class Base<T> {\n      private Class<T> entityClass;\n\n      public Base(){\n        try {\n            Class<?> clazz = getClass(); //获取实际运行的类的 Class\n            Type type = clazz.getGenericSuperclass(); //获取实际运行的类的直接超类的泛型类型\n            if(type instanceof ParameterizedType){ //如果该泛型类型是参数化类型\n                Type[] parameterizedType = ((ParameterizedType)type).getActualTypeArguments();//获取泛型类型的实际类型参数集\n                entityClass = (Class<T>) parameterizedType[0]; //取出第一个(下标为0)参数的值\n            }\n        } catch (Exception e) {\n            e.printStackTrace();\n        }\n      }\n      \n      //泛型的实际类型参数的类全名\n      public String getEntityName(){\n          return entityClass.getName();\n      }\n      \n      //泛型的实际类型参数的类名\n      public String getEntitySimpleName(){\n          return entityClass.getSimpleName();\n      }\n\n      //泛型的实际类型参数的Class\n      public Class<T> getEntityClass() {\n          return entityClass;\n      }\n      \n\n      ...\n\n    public class Child extends Base<Child>{\n\n    } \n\n    public static void main(String[] args){\n        Child child = new Child();\n        System.out.println(child.getEntityClass());\n        System.out.println(child.getEntityName());\n        System.out.println(child.getEntitySimpleName());\n    }\n\n    //输出：\n      class test.Child\n      test.Child\n      Child\n  }\n\n```\n\n**所以通过泛型反射，也只有在 超类（调用 getGenericSuperclass 方法） 或者成员变量（调用 getGenericType 方法）或者方法（调用 getGenericParameterTypes 方法）像这些有方法返回 ParameterizedType 类型的时候才能反射成功。\n**\n ","source":"_posts/java-反射机制.md","raw":"---\ntitle: java 反射机制\ndate: 2017-03-29 09:59:59\ntags: [Java]\n---\n\n**反射解决的问题：**\n\n> 反射主要解决动态编程,即使用反射时,所有的对象生成是动态的,因此调用的方法也是动态的。反射可以简化开发,但是代码的可读性很低。\n\n\n<!-- more --> \n\n### Class对象\n\n> java中所有类型都对应一个Class对象（java.lang.Class）\n> \n> 虚拟机为每种类型管理一个独一无二的class对象。运行程序时，java\n> 虚拟机首先检查是否所要加载的类相对应的class对象已经加载，如果没有加载，虚拟机会根类名查找.class文件，并将其class对象载入。\n> \n> 一般某个类的class对象被载入内存，它就用来创建这个类的所有对象。\n\n<img src='http://ofjn4kn3q.bkt.clouddn.com/%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7%202017-03-29%20%E4%B8%8A%E5%8D%8810.15.53.png'>\n\n\n**如何获取class对象**\n\n1、**对象.getClass()** 或者 **类名.Class** 可以获取对应对象的class。\n\n2、对于基本类型：封装类.TYPE代表了对应的基本类型的Class对象 \n\n    如： Integer.TYPE对应的是int的Class对象 \n\n3、如果知道类名（全名)可以通过Class.forName(className)获取。这是动态的获取class对象。\n\n---\n\n\n### 反射获取对象。\n\n>上面已经获得了class对象。我们真正想要的是类的实例。如何获得呢？\n\n\n代码：\n```\n\n    //创建一个类student类\n    public class Student {\n        private String name;\n        private int age;\n        private String tag;\n\n        public Student() {\n            tag = \"无参数\";\n        }\n\n        public Student(String name, int age) {\n            this.name = name;\n            this.age = age;\n            tag = \"含参数\";\n        }\n\n        @Override\n        public String toString() {\n            return tag;\n        }\n    }\n\n```\n\n测试代码：\n\n```\n    \n    Class c = Class.forName(\"com.clazz.reflect.Student\");\n\n    //无参数的做法\n    Object cObj = c.newInstance();//调用无参的构造方法\n    System.out.prin(cObj);  //打印：无参数\n\n    //有参数的做法\n    Constructor conAll = c.getConstructor(String.class,int.class); //传入参数类型\n    Object caobj = conAll.newInstance(\"李四\",23);//调用含参的构造方法.\n    System.out.prin(caobj);  //打印：含参数\n\n```\n\n1、创建无参数对象：.newInstance();\n\n2、创建有参对象： 先通过getConstructor()指定参数类型，然后在调用newInstance()。\n\n**注：如何student类本身没有无参构造函数，直接调用newInstance()，会报错**\n\n\n---\n\n\n### 关于反射的其他方法\n\n>上面介绍了newInstance()方法和getConstructor()方法使用，下面详细介绍其他常用几个方法：\n\n\n**1、获取构造方法：**\n\n    Constructor<T> getConstructor(Class<?>... parameterTypes)  \n\n        返回一个 Constructor 对象，它反映此 Class 对象所表示的类的指定公共构造方法。 \n\n    Constructor<?>[] getConstructors() \n\n        返回一个包含某些 Constructor 对象的数组，这些对象反映此 Class 对象所表示的类的所有公共构造方法。 \n\n\n**2、获取成员字段：**\n\n     Field getField(String name)    //参数：属性名\n\n          返回一个 Field 对象，它反映此 Class 对象所表示的类或接口的指定公共成员字段。 \n\n     Field[] getFields() \n\n          返回一个包含某些 Field 对象的数组，这些对象反映此 Class 对象所表示的类或接口的所有可访问公共字段。\n\n     Field getDeclaredField(String name)   //参数：属性名\n\n          返回一个 Field 对象，该对象反映此 Class 对象所表示的类或接口的指定已声明字段。 \n\n     Field[] getDeclaredFields() \n\n          返回 Field 对象的一个数组，这些对象反映此 Class 对象所表示的类或接口所声明的所有字段。 \n\n\n**3、获取成员方法：**\n\n     Method getMethod(String name, Class<?>... parameterTypes)  //参数：方法名，参数类型数组\n\n      返回一个 Method 对象，它反映此 Class 对象所表示的类或接口的指定公共成员方法。 \n\n    Method[] getMethods() \n\n      返回一个包含某些 Method 对象的数组，这些对象反映此 Class 对象所表示的类或接口（包括那些由该类或接口声明的以及从超类和超接口继承的那些的类或接口）的公共 member 方法。 \n\n    Method getDeclaredMethod(String name, Class<?>... parameterTypes) //参数：方法名，参数类型数组\n\n      返回一个 Method 对象，该对象反映此 Class 对象所表示的类或接口的指定已声明方法。\n\n    Method[] getDeclaredMethods() \n\n      返回 Method 对象的一个数组，这些对象反映此 Class 对象表示的类或接口声明的所有方法，包括公共、保护、默认（包）访问和私有方法，但不包括继承的方法。 \n\n\n**4、创建实例、执行方法、转换字符串**\n\n    T newInstance() \n\n      创建此 Class 对象所表示的类的一个新实例。 <new Instance()可以动态的创建对象>\n\n    String toString() \n\n      将对象转换为字符串。\n\n    method.invoke(Object receiver, Object ... args)  //参数：对象实例，方法需要的参数\n\n      执行方法\n\n\n注意：如果拿到的是私有成员变量，首先要调用setAccessible(true)方法，表示允许访问修改。\n\n    如：\n        Field name = aClass.getDeclaredField(\"name\");\n        name.setAccessible(true);\n        name.set(student1,\"张三\");\n\n\n----\n\n### 反射其他高级用法\n>既然Class对象可以拿到类的所有信息，那当类有父类，有接口的时候，就可以通过反射获取它们。\n\n```java\n\n    //获取父类的class对象，拿到这个实例就可以对父类进行反射操作。\n    Class superclass = aClass.getSuperclass();\n\n    //获取接口集合\n    Class[] interfaces = aClass.getInterfaces();\n\n\n```\n\n\n**在泛型上的运用：**\n\n```java\n\n    //获取返回值泛型类型\n    getGenericReturnType()\n\n    //获取方法参数泛型类型\n    getGenericParameterTypes()\n    \n    //超类的泛型类型\n    getGenericSuperclass()\n\n```\n\n\n```java\n\n    public class MyClass<T> {\n      protected List<String> stringList = ...;\n\n      public List<String> getStringList(){\n        return this.stringList;\n      }\n\n      public void setStringList(List<String> list){\n        this.stringList = list;\n      }\n    }\n\n    ...\n\n    //获取返回值的泛型类型\n    Method method = MyClass.class.getMethod(\"getStringList\", null);\n    Type returnType = method.getGenericReturnType();\n\n    if(returnType instanceof ParameterizedType){\n        ParameterizedType type = (ParameterizedType) returnType;\n        Type[] typeArguments = type.getActualTypeArguments();\n        for(Type typeArgument : typeArguments){\n            Class typeArgClass = (Class) typeArgument;\n            System.out.println(\"typeArgClass = \" + typeArgClass);\n        }\n    }\n\n    //获取参数上的泛型类型\n    method = Myclass.class.getMethod(\"setStringList\", List.class);\n    Type[] genericParameterTypes = method.getGenericParameterTypes();\n\n    for(Type genericParameterType : genericParameterTypes){\n        if(genericParameterType instanceof ParameterizedType){\n            ParameterizedType aType = (ParameterizedType) genericParameterType;\n            Type[] parameterArgTypes = aType.getActualTypeArguments();\n            for(Type parameterArgType : parameterArgTypes){\n                Class parameterArgClass = (Class) parameterArgType;\n                System.out.println(\"parameterArgClass = \" + parameterArgClass);\n            }\n        }\n    }\n\n    //获取成员变量上的泛型类型\n    field = Myclass.class.getDeclaredField(\"stringList\");\n    Type genericType = surper.getGenericType();\n\n    if(genericType instanceof ParameterizedType){\n        ParameterizedType aType = (ParameterizedType) genericType;\n        Type[] parameterArgTypes = aType.getActualTypeArguments();\n        for(Type parameterArgType:parameterArgTypes){\n            Class fieldArgClass = (Class) parameterArgType;\n            System.out.print(\"fieldArgClass = \" + fieldArgClass);\n        }\n    }\n\n    //获取类上的泛型(getGenericSuperclass方法使用时有规定)\n    Class<?> clazz = getClass(); //获取实际运行的类的 Class\n    Type type = clazz.getGenericSuperclass(); //获取实际运行的类的直接超类的泛型类型\n    if(type instanceof ParameterizedType){ //如果该泛型类型是参数化类型\n        Type[] parameterizedType = ((ParameterizedType)type).getActualTypeArguments();//获取泛型类型的实际类型参数集\n        entityClass = (Class<T>) parameterizedType[0]; //取出第一个(下标为0)参数的值\n\n        System.out.print(\"entityClass = \" + entityClass);\n    }\n\n```\n\n---\n\n\n```java\n\n    public class Base<T> {\n      private Class<T> entityClass;\n\n      public Base(){\n        try {\n            Class<?> clazz = getClass(); //获取实际运行的类的 Class\n            Type type = clazz.getGenericSuperclass(); //获取实际运行的类的直接超类的泛型类型\n            if(type instanceof ParameterizedType){ //如果该泛型类型是参数化类型\n                Type[] parameterizedType = ((ParameterizedType)type).getActualTypeArguments();//获取泛型类型的实际类型参数集\n                entityClass = (Class<T>) parameterizedType[0]; //取出第一个(下标为0)参数的值\n            }\n        } catch (Exception e) {\n            e.printStackTrace();\n        }\n      }\n      \n      //泛型的实际类型参数的类全名\n      public String getEntityName(){\n          return entityClass.getName();\n      }\n      \n      //泛型的实际类型参数的类名\n      public String getEntitySimpleName(){\n          return entityClass.getSimpleName();\n      }\n\n      //泛型的实际类型参数的Class\n      public Class<T> getEntityClass() {\n          return entityClass;\n      }\n      \n\n      ...\n\n    public class Child extends Base<Child>{\n\n    } \n\n    public static void main(String[] args){\n        Child child = new Child();\n        System.out.println(child.getEntityClass());\n        System.out.println(child.getEntityName());\n        System.out.println(child.getEntitySimpleName());\n    }\n\n    //输出：\n      class test.Child\n      test.Child\n      Child\n  }\n\n```\n\n**所以通过泛型反射，也只有在 超类（调用 getGenericSuperclass 方法） 或者成员变量（调用 getGenericType 方法）或者方法（调用 getGenericParameterTypes 方法）像这些有方法返回 ParameterizedType 类型的时候才能反射成功。\n**\n ","slug":"java-反射机制","published":1,"updated":"2017-03-29T15:51:22.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj0v5msvx000vx5ypgc8ow0zt","content":"<p><strong>反射解决的问题：</strong></p>\n<blockquote>\n<p>反射主要解决动态编程,即使用反射时,所有的对象生成是动态的,因此调用的方法也是动态的。反射可以简化开发,但是代码的可读性很低。</p>\n</blockquote>\n<a id=\"more\"></a> \n<h3 id=\"Class对象\"><a href=\"#Class对象\" class=\"headerlink\" title=\"Class对象\"></a>Class对象</h3><blockquote>\n<p>java中所有类型都对应一个Class对象（java.lang.Class）</p>\n<p>虚拟机为每种类型管理一个独一无二的class对象。运行程序时，java<br>虚拟机首先检查是否所要加载的类相对应的class对象已经加载，如果没有加载，虚拟机会根类名查找.class文件，并将其class对象载入。</p>\n<p>一般某个类的class对象被载入内存，它就用来创建这个类的所有对象。</p>\n</blockquote>\n<p><img src=\"http://ofjn4kn3q.bkt.clouddn.com/%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7%202017-03-29%20%E4%B8%8A%E5%8D%8810.15.53.png\"></p>\n<p><strong>如何获取class对象</strong></p>\n<p>1、<strong>对象.getClass()</strong> 或者 <strong>类名.Class</strong> 可以获取对应对象的class。</p>\n<p>2、对于基本类型：封装类.TYPE代表了对应的基本类型的Class对象 </p>\n<pre><code>如： Integer.TYPE对应的是int的Class对象 \n</code></pre><p>3、如果知道类名（全名)可以通过Class.forName(className)获取。这是动态的获取class对象。</p>\n<hr>\n<h3 id=\"反射获取对象。\"><a href=\"#反射获取对象。\" class=\"headerlink\" title=\"反射获取对象。\"></a>反射获取对象。</h3><blockquote>\n<p>上面已经获得了class对象。我们真正想要的是类的实例。如何获得呢？</p>\n</blockquote>\n<p>代码：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\">//创建一个类student类</div><div class=\"line\">public class Student &#123;</div><div class=\"line\">    private String name;</div><div class=\"line\">    private int age;</div><div class=\"line\">    private String tag;</div><div class=\"line\"></div><div class=\"line\">    public Student() &#123;</div><div class=\"line\">        tag = &quot;无参数&quot;;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    public Student(String name, int age) &#123;</div><div class=\"line\">        this.name = name;</div><div class=\"line\">        this.age = age;</div><div class=\"line\">        tag = &quot;含参数&quot;;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    @Override</div><div class=\"line\">    public String toString() &#123;</div><div class=\"line\">        return tag;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>测试代码：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\">Class c = Class.forName(&quot;com.clazz.reflect.Student&quot;);</div><div class=\"line\"></div><div class=\"line\">//无参数的做法</div><div class=\"line\">Object cObj = c.newInstance();//调用无参的构造方法</div><div class=\"line\">System.out.prin(cObj);  //打印：无参数</div><div class=\"line\"></div><div class=\"line\">//有参数的做法</div><div class=\"line\">Constructor conAll = c.getConstructor(String.class,int.class); //传入参数类型</div><div class=\"line\">Object caobj = conAll.newInstance(&quot;李四&quot;,23);//调用含参的构造方法.</div><div class=\"line\">System.out.prin(caobj);  //打印：含参数</div></pre></td></tr></table></figure>\n<p>1、创建无参数对象：.newInstance();</p>\n<p>2、创建有参对象： 先通过getConstructor()指定参数类型，然后在调用newInstance()。</p>\n<p><strong>注：如何student类本身没有无参构造函数，直接调用newInstance()，会报错</strong></p>\n<hr>\n<h3 id=\"关于反射的其他方法\"><a href=\"#关于反射的其他方法\" class=\"headerlink\" title=\"关于反射的其他方法\"></a>关于反射的其他方法</h3><blockquote>\n<p>上面介绍了newInstance()方法和getConstructor()方法使用，下面详细介绍其他常用几个方法：</p>\n</blockquote>\n<p><strong>1、获取构造方法：</strong></p>\n<pre><code>Constructor&lt;T&gt; getConstructor(Class&lt;?&gt;... parameterTypes)  \n\n    返回一个 Constructor 对象，它反映此 Class 对象所表示的类的指定公共构造方法。 \n\nConstructor&lt;?&gt;[] getConstructors() \n\n    返回一个包含某些 Constructor 对象的数组，这些对象反映此 Class 对象所表示的类的所有公共构造方法。 \n</code></pre><p><strong>2、获取成员字段：</strong></p>\n<pre><code>Field getField(String name)    //参数：属性名\n\n     返回一个 Field 对象，它反映此 Class 对象所表示的类或接口的指定公共成员字段。 \n\nField[] getFields() \n\n     返回一个包含某些 Field 对象的数组，这些对象反映此 Class 对象所表示的类或接口的所有可访问公共字段。\n\nField getDeclaredField(String name)   //参数：属性名\n\n     返回一个 Field 对象，该对象反映此 Class 对象所表示的类或接口的指定已声明字段。 \n\nField[] getDeclaredFields() \n\n     返回 Field 对象的一个数组，这些对象反映此 Class 对象所表示的类或接口所声明的所有字段。 \n</code></pre><p><strong>3、获取成员方法：</strong></p>\n<pre><code> Method getMethod(String name, Class&lt;?&gt;... parameterTypes)  //参数：方法名，参数类型数组\n\n  返回一个 Method 对象，它反映此 Class 对象所表示的类或接口的指定公共成员方法。 \n\nMethod[] getMethods() \n\n  返回一个包含某些 Method 对象的数组，这些对象反映此 Class 对象所表示的类或接口（包括那些由该类或接口声明的以及从超类和超接口继承的那些的类或接口）的公共 member 方法。 \n\nMethod getDeclaredMethod(String name, Class&lt;?&gt;... parameterTypes) //参数：方法名，参数类型数组\n\n  返回一个 Method 对象，该对象反映此 Class 对象所表示的类或接口的指定已声明方法。\n\nMethod[] getDeclaredMethods() \n\n  返回 Method 对象的一个数组，这些对象反映此 Class 对象表示的类或接口声明的所有方法，包括公共、保护、默认（包）访问和私有方法，但不包括继承的方法。 \n</code></pre><p><strong>4、创建实例、执行方法、转换字符串</strong></p>\n<pre><code>T newInstance() \n\n  创建此 Class 对象所表示的类的一个新实例。 &lt;new Instance()可以动态的创建对象&gt;\n\nString toString() \n\n  将对象转换为字符串。\n\nmethod.invoke(Object receiver, Object ... args)  //参数：对象实例，方法需要的参数\n\n  执行方法\n</code></pre><p>注意：如果拿到的是私有成员变量，首先要调用setAccessible(true)方法，表示允许访问修改。</p>\n<pre><code>如：\n    Field name = aClass.getDeclaredField(&quot;name&quot;);\n    name.setAccessible(true);\n    name.set(student1,&quot;张三&quot;);\n</code></pre><hr>\n<h3 id=\"反射其他高级用法\"><a href=\"#反射其他高级用法\" class=\"headerlink\" title=\"反射其他高级用法\"></a>反射其他高级用法</h3><blockquote>\n<p>既然Class对象可以拿到类的所有信息，那当类有父类，有接口的时候，就可以通过反射获取它们。</p>\n</blockquote>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">//获取父类的class对象，拿到这个实例就可以对父类进行反射操作。</span></div><div class=\"line\">Class superclass = aClass.getSuperclass();</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">//获取接口集合</span></div><div class=\"line\">Class[] interfaces = aClass.getInterfaces();</div></pre></td></tr></table></figure>\n<p><strong>在泛型上的运用：</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">//获取返回值泛型类型</span></div><div class=\"line\">getGenericReturnType()</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">//获取方法参数泛型类型</span></div><div class=\"line\">getGenericParameterTypes()</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">//超类的泛型类型</span></div><div class=\"line\">getGenericSuperclass()</div></pre></td></tr></table></figure>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MyClass</span>&lt;<span class=\"title\">T</span>&gt; </span>&#123;</div><div class=\"line\">  <span class=\"keyword\">protected</span> List&lt;String&gt; stringList = ...;</div><div class=\"line\"></div><div class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> List&lt;String&gt; <span class=\"title\">getStringList</span><span class=\"params\">()</span></span>&#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.stringList;</div><div class=\"line\">  &#125;</div><div class=\"line\"></div><div class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">setStringList</span><span class=\"params\">(List&lt;String&gt; list)</span></span>&#123;</div><div class=\"line\">    <span class=\"keyword\">this</span>.stringList = list;</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">...</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">//获取返回值的泛型类型</span></div><div class=\"line\">Method method = MyClass.class.getMethod(<span class=\"string\">\"getStringList\"</span>, <span class=\"keyword\">null</span>);</div><div class=\"line\">Type returnType = method.getGenericReturnType();</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">if</span>(returnType <span class=\"keyword\">instanceof</span> ParameterizedType)&#123;</div><div class=\"line\">    ParameterizedType type = (ParameterizedType) returnType;</div><div class=\"line\">    Type[] typeArguments = type.getActualTypeArguments();</div><div class=\"line\">    <span class=\"keyword\">for</span>(Type typeArgument : typeArguments)&#123;</div><div class=\"line\">        Class typeArgClass = (Class) typeArgument;</div><div class=\"line\">        System.out.println(<span class=\"string\">\"typeArgClass = \"</span> + typeArgClass);</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">//获取参数上的泛型类型</span></div><div class=\"line\">method = Myclass.class.getMethod(<span class=\"string\">\"setStringList\"</span>, List.class);</div><div class=\"line\">Type[] genericParameterTypes = method.getGenericParameterTypes();</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">for</span>(Type genericParameterType : genericParameterTypes)&#123;</div><div class=\"line\">    <span class=\"keyword\">if</span>(genericParameterType <span class=\"keyword\">instanceof</span> ParameterizedType)&#123;</div><div class=\"line\">        ParameterizedType aType = (ParameterizedType) genericParameterType;</div><div class=\"line\">        Type[] parameterArgTypes = aType.getActualTypeArguments();</div><div class=\"line\">        <span class=\"keyword\">for</span>(Type parameterArgType : parameterArgTypes)&#123;</div><div class=\"line\">            Class parameterArgClass = (Class) parameterArgType;</div><div class=\"line\">            System.out.println(<span class=\"string\">\"parameterArgClass = \"</span> + parameterArgClass);</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">//获取成员变量上的泛型类型</span></div><div class=\"line\">field = Myclass.class.getDeclaredField(<span class=\"string\">\"stringList\"</span>);</div><div class=\"line\">Type genericType = surper.getGenericType();</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">if</span>(genericType <span class=\"keyword\">instanceof</span> ParameterizedType)&#123;</div><div class=\"line\">    ParameterizedType aType = (ParameterizedType) genericType;</div><div class=\"line\">    Type[] parameterArgTypes = aType.getActualTypeArguments();</div><div class=\"line\">    <span class=\"keyword\">for</span>(Type parameterArgType:parameterArgTypes)&#123;</div><div class=\"line\">        Class fieldArgClass = (Class) parameterArgType;</div><div class=\"line\">        System.out.print(<span class=\"string\">\"fieldArgClass = \"</span> + fieldArgClass);</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">//获取类上的泛型(getGenericSuperclass方法使用时有规定)</span></div><div class=\"line\">Class&lt;?&gt; clazz = getClass(); <span class=\"comment\">//获取实际运行的类的 Class</span></div><div class=\"line\">Type type = clazz.getGenericSuperclass(); <span class=\"comment\">//获取实际运行的类的直接超类的泛型类型</span></div><div class=\"line\"><span class=\"keyword\">if</span>(type <span class=\"keyword\">instanceof</span> ParameterizedType)&#123; <span class=\"comment\">//如果该泛型类型是参数化类型</span></div><div class=\"line\">    Type[] parameterizedType = ((ParameterizedType)type).getActualTypeArguments();<span class=\"comment\">//获取泛型类型的实际类型参数集</span></div><div class=\"line\">    entityClass = (Class&lt;T&gt;) parameterizedType[<span class=\"number\">0</span>]; <span class=\"comment\">//取出第一个(下标为0)参数的值</span></div><div class=\"line\"></div><div class=\"line\">    System.out.print(<span class=\"string\">\"entityClass = \"</span> + entityClass);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<hr>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\">  <span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Base</span>&lt;<span class=\"title\">T</span>&gt; </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">private</span> Class&lt;T&gt; entityClass;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">Base</span><span class=\"params\">()</span></span>&#123;</div><div class=\"line\">      <span class=\"keyword\">try</span> &#123;</div><div class=\"line\">          Class&lt;?&gt; clazz = getClass(); <span class=\"comment\">//获取实际运行的类的 Class</span></div><div class=\"line\">          Type type = clazz.getGenericSuperclass(); <span class=\"comment\">//获取实际运行的类的直接超类的泛型类型</span></div><div class=\"line\">          <span class=\"keyword\">if</span>(type <span class=\"keyword\">instanceof</span> ParameterizedType)&#123; <span class=\"comment\">//如果该泛型类型是参数化类型</span></div><div class=\"line\">              Type[] parameterizedType = ((ParameterizedType)type).getActualTypeArguments();<span class=\"comment\">//获取泛型类型的实际类型参数集</span></div><div class=\"line\">              entityClass = (Class&lt;T&gt;) parameterizedType[<span class=\"number\">0</span>]; <span class=\"comment\">//取出第一个(下标为0)参数的值</span></div><div class=\"line\">          &#125;</div><div class=\"line\">      &#125; <span class=\"keyword\">catch</span> (Exception e) &#123;</div><div class=\"line\">          e.printStackTrace();</div><div class=\"line\">      &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">    </div><div class=\"line\">    <span class=\"comment\">//泛型的实际类型参数的类全名</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">getEntityName</span><span class=\"params\">()</span></span>&#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> entityClass.getName();</div><div class=\"line\">    &#125;</div><div class=\"line\">    </div><div class=\"line\">    <span class=\"comment\">//泛型的实际类型参数的类名</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">getEntitySimpleName</span><span class=\"params\">()</span></span>&#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> entityClass.getSimpleName();</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">//泛型的实际类型参数的Class</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> Class&lt;T&gt; <span class=\"title\">getEntityClass</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> entityClass;</div><div class=\"line\">    &#125;</div><div class=\"line\">    </div><div class=\"line\"></div><div class=\"line\">    ...</div><div class=\"line\"></div><div class=\"line\">  <span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Child</span> <span class=\"keyword\">extends</span> <span class=\"title\">Base</span>&lt;<span class=\"title\">Child</span>&gt;</span>&#123;</div><div class=\"line\"></div><div class=\"line\">  &#125; </div><div class=\"line\"></div><div class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span></span>&#123;</div><div class=\"line\">      Child child = <span class=\"keyword\">new</span> Child();</div><div class=\"line\">      System.out.println(child.getEntityClass());</div><div class=\"line\">      System.out.println(child.getEntityName());</div><div class=\"line\">      System.out.println(child.getEntitySimpleName());</div><div class=\"line\">  &#125;</div><div class=\"line\"></div><div class=\"line\">  <span class=\"comment\">//输出：</span></div><div class=\"line\">    <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">test</span>.<span class=\"title\">Child</span></span></div><div class=\"line\">    <span class=\"title\">test</span>.<span class=\"title\">Child</span></div><div class=\"line\">    <span class=\"title\">Child</span></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p><strong>所以通过泛型反射，也只有在 超类（调用 getGenericSuperclass 方法） 或者成员变量（调用 getGenericType 方法）或者方法（调用 getGenericParameterTypes 方法）像这些有方法返回 ParameterizedType 类型的时候才能反射成功。\n</strong></p>\n","excerpt":"<p><strong>反射解决的问题：</strong></p>\n<blockquote>\n<p>反射主要解决动态编程,即使用反射时,所有的对象生成是动态的,因此调用的方法也是动态的。反射可以简化开发,但是代码的可读性很低。</p>\n</blockquote>","more":"<h3 id=\"Class对象\"><a href=\"#Class对象\" class=\"headerlink\" title=\"Class对象\"></a>Class对象</h3><blockquote>\n<p>java中所有类型都对应一个Class对象（java.lang.Class）</p>\n<p>虚拟机为每种类型管理一个独一无二的class对象。运行程序时，java<br>虚拟机首先检查是否所要加载的类相对应的class对象已经加载，如果没有加载，虚拟机会根类名查找.class文件，并将其class对象载入。</p>\n<p>一般某个类的class对象被载入内存，它就用来创建这个类的所有对象。</p>\n</blockquote>\n<p><img src='http://ofjn4kn3q.bkt.clouddn.com/%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7%202017-03-29%20%E4%B8%8A%E5%8D%8810.15.53.png'></p>\n<p><strong>如何获取class对象</strong></p>\n<p>1、<strong>对象.getClass()</strong> 或者 <strong>类名.Class</strong> 可以获取对应对象的class。</p>\n<p>2、对于基本类型：封装类.TYPE代表了对应的基本类型的Class对象 </p>\n<pre><code>如： Integer.TYPE对应的是int的Class对象 \n</code></pre><p>3、如果知道类名（全名)可以通过Class.forName(className)获取。这是动态的获取class对象。</p>\n<hr>\n<h3 id=\"反射获取对象。\"><a href=\"#反射获取对象。\" class=\"headerlink\" title=\"反射获取对象。\"></a>反射获取对象。</h3><blockquote>\n<p>上面已经获得了class对象。我们真正想要的是类的实例。如何获得呢？</p>\n</blockquote>\n<p>代码：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\">//创建一个类student类</div><div class=\"line\">public class Student &#123;</div><div class=\"line\">    private String name;</div><div class=\"line\">    private int age;</div><div class=\"line\">    private String tag;</div><div class=\"line\"></div><div class=\"line\">    public Student() &#123;</div><div class=\"line\">        tag = &quot;无参数&quot;;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    public Student(String name, int age) &#123;</div><div class=\"line\">        this.name = name;</div><div class=\"line\">        this.age = age;</div><div class=\"line\">        tag = &quot;含参数&quot;;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    @Override</div><div class=\"line\">    public String toString() &#123;</div><div class=\"line\">        return tag;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>测试代码：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\">Class c = Class.forName(&quot;com.clazz.reflect.Student&quot;);</div><div class=\"line\"></div><div class=\"line\">//无参数的做法</div><div class=\"line\">Object cObj = c.newInstance();//调用无参的构造方法</div><div class=\"line\">System.out.prin(cObj);  //打印：无参数</div><div class=\"line\"></div><div class=\"line\">//有参数的做法</div><div class=\"line\">Constructor conAll = c.getConstructor(String.class,int.class); //传入参数类型</div><div class=\"line\">Object caobj = conAll.newInstance(&quot;李四&quot;,23);//调用含参的构造方法.</div><div class=\"line\">System.out.prin(caobj);  //打印：含参数</div></pre></td></tr></table></figure>\n<p>1、创建无参数对象：.newInstance();</p>\n<p>2、创建有参对象： 先通过getConstructor()指定参数类型，然后在调用newInstance()。</p>\n<p><strong>注：如何student类本身没有无参构造函数，直接调用newInstance()，会报错</strong></p>\n<hr>\n<h3 id=\"关于反射的其他方法\"><a href=\"#关于反射的其他方法\" class=\"headerlink\" title=\"关于反射的其他方法\"></a>关于反射的其他方法</h3><blockquote>\n<p>上面介绍了newInstance()方法和getConstructor()方法使用，下面详细介绍其他常用几个方法：</p>\n</blockquote>\n<p><strong>1、获取构造方法：</strong></p>\n<pre><code>Constructor&lt;T&gt; getConstructor(Class&lt;?&gt;... parameterTypes)  \n\n    返回一个 Constructor 对象，它反映此 Class 对象所表示的类的指定公共构造方法。 \n\nConstructor&lt;?&gt;[] getConstructors() \n\n    返回一个包含某些 Constructor 对象的数组，这些对象反映此 Class 对象所表示的类的所有公共构造方法。 \n</code></pre><p><strong>2、获取成员字段：</strong></p>\n<pre><code>Field getField(String name)    //参数：属性名\n\n     返回一个 Field 对象，它反映此 Class 对象所表示的类或接口的指定公共成员字段。 \n\nField[] getFields() \n\n     返回一个包含某些 Field 对象的数组，这些对象反映此 Class 对象所表示的类或接口的所有可访问公共字段。\n\nField getDeclaredField(String name)   //参数：属性名\n\n     返回一个 Field 对象，该对象反映此 Class 对象所表示的类或接口的指定已声明字段。 \n\nField[] getDeclaredFields() \n\n     返回 Field 对象的一个数组，这些对象反映此 Class 对象所表示的类或接口所声明的所有字段。 \n</code></pre><p><strong>3、获取成员方法：</strong></p>\n<pre><code> Method getMethod(String name, Class&lt;?&gt;... parameterTypes)  //参数：方法名，参数类型数组\n\n  返回一个 Method 对象，它反映此 Class 对象所表示的类或接口的指定公共成员方法。 \n\nMethod[] getMethods() \n\n  返回一个包含某些 Method 对象的数组，这些对象反映此 Class 对象所表示的类或接口（包括那些由该类或接口声明的以及从超类和超接口继承的那些的类或接口）的公共 member 方法。 \n\nMethod getDeclaredMethod(String name, Class&lt;?&gt;... parameterTypes) //参数：方法名，参数类型数组\n\n  返回一个 Method 对象，该对象反映此 Class 对象所表示的类或接口的指定已声明方法。\n\nMethod[] getDeclaredMethods() \n\n  返回 Method 对象的一个数组，这些对象反映此 Class 对象表示的类或接口声明的所有方法，包括公共、保护、默认（包）访问和私有方法，但不包括继承的方法。 \n</code></pre><p><strong>4、创建实例、执行方法、转换字符串</strong></p>\n<pre><code>T newInstance() \n\n  创建此 Class 对象所表示的类的一个新实例。 &lt;new Instance()可以动态的创建对象&gt;\n\nString toString() \n\n  将对象转换为字符串。\n\nmethod.invoke(Object receiver, Object ... args)  //参数：对象实例，方法需要的参数\n\n  执行方法\n</code></pre><p>注意：如果拿到的是私有成员变量，首先要调用setAccessible(true)方法，表示允许访问修改。</p>\n<pre><code>如：\n    Field name = aClass.getDeclaredField(&quot;name&quot;);\n    name.setAccessible(true);\n    name.set(student1,&quot;张三&quot;);\n</code></pre><hr>\n<h3 id=\"反射其他高级用法\"><a href=\"#反射其他高级用法\" class=\"headerlink\" title=\"反射其他高级用法\"></a>反射其他高级用法</h3><blockquote>\n<p>既然Class对象可以拿到类的所有信息，那当类有父类，有接口的时候，就可以通过反射获取它们。</p>\n</blockquote>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">//获取父类的class对象，拿到这个实例就可以对父类进行反射操作。</span></div><div class=\"line\">Class superclass = aClass.getSuperclass();</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">//获取接口集合</span></div><div class=\"line\">Class[] interfaces = aClass.getInterfaces();</div></pre></td></tr></table></figure>\n<p><strong>在泛型上的运用：</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">//获取返回值泛型类型</span></div><div class=\"line\">getGenericReturnType()</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">//获取方法参数泛型类型</span></div><div class=\"line\">getGenericParameterTypes()</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">//超类的泛型类型</span></div><div class=\"line\">getGenericSuperclass()</div></pre></td></tr></table></figure>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MyClass</span>&lt;<span class=\"title\">T</span>&gt; </span>&#123;</div><div class=\"line\">  <span class=\"keyword\">protected</span> List&lt;String&gt; stringList = ...;</div><div class=\"line\"></div><div class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> List&lt;String&gt; <span class=\"title\">getStringList</span><span class=\"params\">()</span></span>&#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.stringList;</div><div class=\"line\">  &#125;</div><div class=\"line\"></div><div class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">setStringList</span><span class=\"params\">(List&lt;String&gt; list)</span></span>&#123;</div><div class=\"line\">    <span class=\"keyword\">this</span>.stringList = list;</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">...</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">//获取返回值的泛型类型</span></div><div class=\"line\">Method method = MyClass.class.getMethod(<span class=\"string\">\"getStringList\"</span>, <span class=\"keyword\">null</span>);</div><div class=\"line\">Type returnType = method.getGenericReturnType();</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">if</span>(returnType <span class=\"keyword\">instanceof</span> ParameterizedType)&#123;</div><div class=\"line\">    ParameterizedType type = (ParameterizedType) returnType;</div><div class=\"line\">    Type[] typeArguments = type.getActualTypeArguments();</div><div class=\"line\">    <span class=\"keyword\">for</span>(Type typeArgument : typeArguments)&#123;</div><div class=\"line\">        Class typeArgClass = (Class) typeArgument;</div><div class=\"line\">        System.out.println(<span class=\"string\">\"typeArgClass = \"</span> + typeArgClass);</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">//获取参数上的泛型类型</span></div><div class=\"line\">method = Myclass.class.getMethod(<span class=\"string\">\"setStringList\"</span>, List.class);</div><div class=\"line\">Type[] genericParameterTypes = method.getGenericParameterTypes();</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">for</span>(Type genericParameterType : genericParameterTypes)&#123;</div><div class=\"line\">    <span class=\"keyword\">if</span>(genericParameterType <span class=\"keyword\">instanceof</span> ParameterizedType)&#123;</div><div class=\"line\">        ParameterizedType aType = (ParameterizedType) genericParameterType;</div><div class=\"line\">        Type[] parameterArgTypes = aType.getActualTypeArguments();</div><div class=\"line\">        <span class=\"keyword\">for</span>(Type parameterArgType : parameterArgTypes)&#123;</div><div class=\"line\">            Class parameterArgClass = (Class) parameterArgType;</div><div class=\"line\">            System.out.println(<span class=\"string\">\"parameterArgClass = \"</span> + parameterArgClass);</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">//获取成员变量上的泛型类型</span></div><div class=\"line\">field = Myclass.class.getDeclaredField(<span class=\"string\">\"stringList\"</span>);</div><div class=\"line\">Type genericType = surper.getGenericType();</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">if</span>(genericType <span class=\"keyword\">instanceof</span> ParameterizedType)&#123;</div><div class=\"line\">    ParameterizedType aType = (ParameterizedType) genericType;</div><div class=\"line\">    Type[] parameterArgTypes = aType.getActualTypeArguments();</div><div class=\"line\">    <span class=\"keyword\">for</span>(Type parameterArgType:parameterArgTypes)&#123;</div><div class=\"line\">        Class fieldArgClass = (Class) parameterArgType;</div><div class=\"line\">        System.out.print(<span class=\"string\">\"fieldArgClass = \"</span> + fieldArgClass);</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">//获取类上的泛型(getGenericSuperclass方法使用时有规定)</span></div><div class=\"line\">Class&lt;?&gt; clazz = getClass(); <span class=\"comment\">//获取实际运行的类的 Class</span></div><div class=\"line\">Type type = clazz.getGenericSuperclass(); <span class=\"comment\">//获取实际运行的类的直接超类的泛型类型</span></div><div class=\"line\"><span class=\"keyword\">if</span>(type <span class=\"keyword\">instanceof</span> ParameterizedType)&#123; <span class=\"comment\">//如果该泛型类型是参数化类型</span></div><div class=\"line\">    Type[] parameterizedType = ((ParameterizedType)type).getActualTypeArguments();<span class=\"comment\">//获取泛型类型的实际类型参数集</span></div><div class=\"line\">    entityClass = (Class&lt;T&gt;) parameterizedType[<span class=\"number\">0</span>]; <span class=\"comment\">//取出第一个(下标为0)参数的值</span></div><div class=\"line\"></div><div class=\"line\">    System.out.print(<span class=\"string\">\"entityClass = \"</span> + entityClass);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<hr>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\">  <span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Base</span>&lt;<span class=\"title\">T</span>&gt; </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">private</span> Class&lt;T&gt; entityClass;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">Base</span><span class=\"params\">()</span></span>&#123;</div><div class=\"line\">      <span class=\"keyword\">try</span> &#123;</div><div class=\"line\">          Class&lt;?&gt; clazz = getClass(); <span class=\"comment\">//获取实际运行的类的 Class</span></div><div class=\"line\">          Type type = clazz.getGenericSuperclass(); <span class=\"comment\">//获取实际运行的类的直接超类的泛型类型</span></div><div class=\"line\">          <span class=\"keyword\">if</span>(type <span class=\"keyword\">instanceof</span> ParameterizedType)&#123; <span class=\"comment\">//如果该泛型类型是参数化类型</span></div><div class=\"line\">              Type[] parameterizedType = ((ParameterizedType)type).getActualTypeArguments();<span class=\"comment\">//获取泛型类型的实际类型参数集</span></div><div class=\"line\">              entityClass = (Class&lt;T&gt;) parameterizedType[<span class=\"number\">0</span>]; <span class=\"comment\">//取出第一个(下标为0)参数的值</span></div><div class=\"line\">          &#125;</div><div class=\"line\">      &#125; <span class=\"keyword\">catch</span> (Exception e) &#123;</div><div class=\"line\">          e.printStackTrace();</div><div class=\"line\">      &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">    </div><div class=\"line\">    <span class=\"comment\">//泛型的实际类型参数的类全名</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">getEntityName</span><span class=\"params\">()</span></span>&#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> entityClass.getName();</div><div class=\"line\">    &#125;</div><div class=\"line\">    </div><div class=\"line\">    <span class=\"comment\">//泛型的实际类型参数的类名</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">getEntitySimpleName</span><span class=\"params\">()</span></span>&#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> entityClass.getSimpleName();</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">//泛型的实际类型参数的Class</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> Class&lt;T&gt; <span class=\"title\">getEntityClass</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> entityClass;</div><div class=\"line\">    &#125;</div><div class=\"line\">    </div><div class=\"line\"></div><div class=\"line\">    ...</div><div class=\"line\"></div><div class=\"line\">  <span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Child</span> <span class=\"keyword\">extends</span> <span class=\"title\">Base</span>&lt;<span class=\"title\">Child</span>&gt;</span>&#123;</div><div class=\"line\"></div><div class=\"line\">  &#125; </div><div class=\"line\"></div><div class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span></span>&#123;</div><div class=\"line\">      Child child = <span class=\"keyword\">new</span> Child();</div><div class=\"line\">      System.out.println(child.getEntityClass());</div><div class=\"line\">      System.out.println(child.getEntityName());</div><div class=\"line\">      System.out.println(child.getEntitySimpleName());</div><div class=\"line\">  &#125;</div><div class=\"line\"></div><div class=\"line\">  <span class=\"comment\">//输出：</span></div><div class=\"line\">    <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">test</span>.<span class=\"title\">Child</span></div><div class=\"line\">    <span class=\"title\">test</span>.<span class=\"title\">Child</span></div><div class=\"line\">    <span class=\"title\">Child</span></div><div class=\"line\">&#125;</span></div></pre></td></tr></table></figure>\n<p><strong>所以通过泛型反射，也只有在 超类（调用 getGenericSuperclass 方法） 或者成员变量（调用 getGenericType 方法）或者方法（调用 getGenericParameterTypes 方法）像这些有方法返回 ParameterizedType 类型的时候才能反射成功。\n</strong></p>"},{"title":"5、状态（State）","date":"2017-03-29T02:46:14.000Z","_content":"\n### State的使用\n>在RN中一般使用两种数据来控制一个组件。\n props,它是在父控件中指定，一经指定就不会在改变。\n State,它相当于一个动态的数据。是可以在控件中改变的\n\n **一般来说，你需要在constructor中初始化state，然后在需要修改时调用setState方法。**\n\n<!--more-->\n\n假如我们需要制作一段不停闪烁的文字。文字内容本身在组件创建时就已经指定好了，所以文字内容应该是一个prop。而文字的显示或隐藏的状态（快速的显隐切换就产生了闪烁的效果）则是随着时间变化的，因此这一状态应该写到state中。\n\n```html \n\n    import React, {\n      Component\n    } from 'react';\n\n    import {\n      AppRegistry,\n      View,\n      Image,\n      Text,\n    } from 'react-native';\n\n\n    class Blink extends Component {\n      constructor(props) {\n        super(props);\n        this.state = {\n          showText: true\n        }\n        setInterval(() => {\n          this.setState({\n            showText: !this.state.showText\n          });\n        }, 1000);\n      }\n\n      render() {\n        // 根据当前showText的值决定是否显示text内容\n        let display = this.state.showText ? this.props.text : ' ';\n        return (\n          <Text>{display}</Text>\n        );\n      }\n    }\n\n\n    class BlinkApp extends Component {\n      render() {\n        return (\n          <View>\n            <Blink text='I love to blink' />\n            <Blink text='Yes blinking is so great' />\n            <Blink text='Why did they ever take this out of HTML' />\n            <Blink text='Look at me look at me look at me' />\n          </View>\n        );\n      }\n    }\n\n    AppRegistry.registerComponent('AwesomeProject', () => BlinkApp);\n\n```\n\n---\n#### setInterval()函数\n\n>首先，认识一下setInterval（)函数\n 1、setInterval() 方法可按照指定的周期（以毫秒计）来调用函数或计算表达式。\n 2、setInterval() 方法会不停地调用函数，直到 clearInterval() 被调用或窗口被关闭。由 setInterval() 返回的 ID 值可用作 clearInterval() 方法的参数。\n\nsetInterval(code,millisec)\n\n+ 参数1，必要的函数\n+ 参数2，周期（以毫米计数）\n\n使用clearInterval()函数来取消循环\n\n```html \n\n    <script language=javascript>\n    var int=self.setInterval(\"clock()\",50) //self表示当前页面\n    function clock()\n      {\n      var t=new Date()\n      document.getElementById(\"clock\").value=t\n      }\n    </script>\n    </form>\n    <button onclick=\"int=window.clearInterval(int)\"> //在这个窗口下获取\n    Stop interval</button>\n\n```\n\n---\n\n\nState的核心使用方法：\n\n1、在构造函数中初始化：this.state = ...\n2、通过this.setState()函数来修改state的值。\n3、使用定义的变量。\n\n*每次state中的数发生变化时，会刷新一次UI界面。来修改数据*","source":"_posts/状态（State）.md","raw":"---\ntitle: 5、状态（State）\ndate: 2017-03-29 10:46:14\ntags: [React-native]\n---\n\n### State的使用\n>在RN中一般使用两种数据来控制一个组件。\n props,它是在父控件中指定，一经指定就不会在改变。\n State,它相当于一个动态的数据。是可以在控件中改变的\n\n **一般来说，你需要在constructor中初始化state，然后在需要修改时调用setState方法。**\n\n<!--more-->\n\n假如我们需要制作一段不停闪烁的文字。文字内容本身在组件创建时就已经指定好了，所以文字内容应该是一个prop。而文字的显示或隐藏的状态（快速的显隐切换就产生了闪烁的效果）则是随着时间变化的，因此这一状态应该写到state中。\n\n```html \n\n    import React, {\n      Component\n    } from 'react';\n\n    import {\n      AppRegistry,\n      View,\n      Image,\n      Text,\n    } from 'react-native';\n\n\n    class Blink extends Component {\n      constructor(props) {\n        super(props);\n        this.state = {\n          showText: true\n        }\n        setInterval(() => {\n          this.setState({\n            showText: !this.state.showText\n          });\n        }, 1000);\n      }\n\n      render() {\n        // 根据当前showText的值决定是否显示text内容\n        let display = this.state.showText ? this.props.text : ' ';\n        return (\n          <Text>{display}</Text>\n        );\n      }\n    }\n\n\n    class BlinkApp extends Component {\n      render() {\n        return (\n          <View>\n            <Blink text='I love to blink' />\n            <Blink text='Yes blinking is so great' />\n            <Blink text='Why did they ever take this out of HTML' />\n            <Blink text='Look at me look at me look at me' />\n          </View>\n        );\n      }\n    }\n\n    AppRegistry.registerComponent('AwesomeProject', () => BlinkApp);\n\n```\n\n---\n#### setInterval()函数\n\n>首先，认识一下setInterval（)函数\n 1、setInterval() 方法可按照指定的周期（以毫秒计）来调用函数或计算表达式。\n 2、setInterval() 方法会不停地调用函数，直到 clearInterval() 被调用或窗口被关闭。由 setInterval() 返回的 ID 值可用作 clearInterval() 方法的参数。\n\nsetInterval(code,millisec)\n\n+ 参数1，必要的函数\n+ 参数2，周期（以毫米计数）\n\n使用clearInterval()函数来取消循环\n\n```html \n\n    <script language=javascript>\n    var int=self.setInterval(\"clock()\",50) //self表示当前页面\n    function clock()\n      {\n      var t=new Date()\n      document.getElementById(\"clock\").value=t\n      }\n    </script>\n    </form>\n    <button onclick=\"int=window.clearInterval(int)\"> //在这个窗口下获取\n    Stop interval</button>\n\n```\n\n---\n\n\nState的核心使用方法：\n\n1、在构造函数中初始化：this.state = ...\n2、通过this.setState()函数来修改state的值。\n3、使用定义的变量。\n\n*每次state中的数发生变化时，会刷新一次UI界面。来修改数据*","slug":"状态（State）","published":1,"updated":"2017-03-29T15:51:22.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj0v5msvz000xx5ypgdz1m5xk","content":"<h3 id=\"State的使用\"><a href=\"#State的使用\" class=\"headerlink\" title=\"State的使用\"></a>State的使用</h3><blockquote>\n<p>在RN中一般使用两种数据来控制一个组件。<br> props,它是在父控件中指定，一经指定就不会在改变。<br> State,它相当于一个动态的数据。是可以在控件中改变的</p>\n</blockquote>\n<p> <strong>一般来说，你需要在constructor中初始化state，然后在需要修改时调用setState方法。</strong></p>\n<a id=\"more\"></a>\n<p>假如我们需要制作一段不停闪烁的文字。文字内容本身在组件创建时就已经指定好了，所以文字内容应该是一个prop。而文字的显示或隐藏的状态（快速的显隐切换就产生了闪烁的效果）则是随着时间变化的，因此这一状态应该写到state中。</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\">import React, &#123;</div><div class=\"line\">  Component</div><div class=\"line\">&#125; from 'react';</div><div class=\"line\"></div><div class=\"line\">import &#123;</div><div class=\"line\">  AppRegistry,</div><div class=\"line\">  View,</div><div class=\"line\">  Image,</div><div class=\"line\">  Text,</div><div class=\"line\">&#125; from 'react-native';</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">class Blink extends Component &#123;</div><div class=\"line\">  constructor(props) &#123;</div><div class=\"line\">    super(props);</div><div class=\"line\">    this.state = &#123;</div><div class=\"line\">      showText: true</div><div class=\"line\">    &#125;</div><div class=\"line\">    setInterval(() =&gt; &#123;</div><div class=\"line\">      this.setState(&#123;</div><div class=\"line\">        showText: !this.state.showText</div><div class=\"line\">      &#125;);</div><div class=\"line\">    &#125;, 1000);</div><div class=\"line\">  &#125;</div><div class=\"line\"></div><div class=\"line\">  render() &#123;</div><div class=\"line\">    // 根据当前showText的值决定是否显示text内容</div><div class=\"line\">    let display = this.state.showText ? this.props.text : ' ';</div><div class=\"line\">    return (</div><div class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">Text</span>&gt;</span>&#123;display&#125;<span class=\"tag\">&lt;/<span class=\"name\">Text</span>&gt;</span></div><div class=\"line\">    );</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">class BlinkApp extends Component &#123;</div><div class=\"line\">  render() &#123;</div><div class=\"line\">    return (</div><div class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">View</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">Blink</span> <span class=\"attr\">text</span>=<span class=\"string\">'I love to blink'</span> /&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">Blink</span> <span class=\"attr\">text</span>=<span class=\"string\">'Yes blinking is so great'</span> /&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">Blink</span> <span class=\"attr\">text</span>=<span class=\"string\">'Why did they ever take this out of HTML'</span> /&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">Blink</span> <span class=\"attr\">text</span>=<span class=\"string\">'Look at me look at me look at me'</span> /&gt;</span></div><div class=\"line\">      <span class=\"tag\">&lt;/<span class=\"name\">View</span>&gt;</span></div><div class=\"line\">    );</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">AppRegistry.registerComponent('AwesomeProject', () =&gt; BlinkApp);</div></pre></td></tr></table></figure>\n<hr>\n<h4 id=\"setInterval-函数\"><a href=\"#setInterval-函数\" class=\"headerlink\" title=\"setInterval()函数\"></a>setInterval()函数</h4><blockquote>\n<p>首先，认识一下setInterval（)函数<br> 1、setInterval() 方法可按照指定的周期（以毫秒计）来调用函数或计算表达式。<br> 2、setInterval() 方法会不停地调用函数，直到 clearInterval() 被调用或窗口被关闭。由 setInterval() 返回的 ID 值可用作 clearInterval() 方法的参数。</p>\n</blockquote>\n<p>setInterval(code,millisec)</p>\n<ul>\n<li>参数1，必要的函数</li>\n<li>参数2，周期（以毫米计数）</li>\n</ul>\n<p>使用clearInterval()函数来取消循环</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">language</span>=<span class=\"string\">javascript</span>&gt;</span><span class=\"javascript\"></span></div><div class=\"line\"><span class=\"keyword\">var</span> int=self.setInterval(<span class=\"string\">\"clock()\"</span>,<span class=\"number\">50</span>) <span class=\"comment\">//self表示当前页面</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">clock</span>(<span class=\"params\"></span>)</span></div><div class=\"line\">  &#123;</div><div class=\"line\">  <span class=\"keyword\">var</span> t=<span class=\"keyword\">new</span> <span class=\"built_in\">Date</span>()</div><div class=\"line\">  <span class=\"built_in\">document</span>.getElementById(<span class=\"string\">\"clock\"</span>).value=t</div><div class=\"line\">  &#125;</div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">form</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">button</span> <span class=\"attr\">onclick</span>=<span class=\"string\">\"int=window.clearInterval(int)\"</span>&gt;</span> //在这个窗口下获取</div><div class=\"line\">Stop interval<span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></div></pre></td></tr></table></figure>\n<hr>\n<p>State的核心使用方法：</p>\n<p>1、在构造函数中初始化：this.state = …<br>2、通过this.setState()函数来修改state的值。<br>3、使用定义的变量。</p>\n<p><em>每次state中的数发生变化时，会刷新一次UI界面。来修改数据</em></p>\n","excerpt":"<h3 id=\"State的使用\"><a href=\"#State的使用\" class=\"headerlink\" title=\"State的使用\"></a>State的使用</h3><blockquote>\n<p>在RN中一般使用两种数据来控制一个组件。<br> props,它是在父控件中指定，一经指定就不会在改变。<br> State,它相当于一个动态的数据。是可以在控件中改变的</p>\n</blockquote>\n<p> <strong>一般来说，你需要在constructor中初始化state，然后在需要修改时调用setState方法。</strong></p>","more":"<p>假如我们需要制作一段不停闪烁的文字。文字内容本身在组件创建时就已经指定好了，所以文字内容应该是一个prop。而文字的显示或隐藏的状态（快速的显隐切换就产生了闪烁的效果）则是随着时间变化的，因此这一状态应该写到state中。</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\">import React, &#123;</div><div class=\"line\">  Component</div><div class=\"line\">&#125; from 'react';</div><div class=\"line\"></div><div class=\"line\">import &#123;</div><div class=\"line\">  AppRegistry,</div><div class=\"line\">  View,</div><div class=\"line\">  Image,</div><div class=\"line\">  Text,</div><div class=\"line\">&#125; from 'react-native';</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">class Blink extends Component &#123;</div><div class=\"line\">  constructor(props) &#123;</div><div class=\"line\">    super(props);</div><div class=\"line\">    this.state = &#123;</div><div class=\"line\">      showText: true</div><div class=\"line\">    &#125;</div><div class=\"line\">    setInterval(() =&gt; &#123;</div><div class=\"line\">      this.setState(&#123;</div><div class=\"line\">        showText: !this.state.showText</div><div class=\"line\">      &#125;);</div><div class=\"line\">    &#125;, 1000);</div><div class=\"line\">  &#125;</div><div class=\"line\"></div><div class=\"line\">  render() &#123;</div><div class=\"line\">    // 根据当前showText的值决定是否显示text内容</div><div class=\"line\">    let display = this.state.showText ? this.props.text : ' ';</div><div class=\"line\">    return (</div><div class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">Text</span>&gt;</span>&#123;display&#125;<span class=\"tag\">&lt;/<span class=\"name\">Text</span>&gt;</span></div><div class=\"line\">    );</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">class BlinkApp extends Component &#123;</div><div class=\"line\">  render() &#123;</div><div class=\"line\">    return (</div><div class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">View</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">Blink</span> <span class=\"attr\">text</span>=<span class=\"string\">'I love to blink'</span> /&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">Blink</span> <span class=\"attr\">text</span>=<span class=\"string\">'Yes blinking is so great'</span> /&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">Blink</span> <span class=\"attr\">text</span>=<span class=\"string\">'Why did they ever take this out of HTML'</span> /&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">Blink</span> <span class=\"attr\">text</span>=<span class=\"string\">'Look at me look at me look at me'</span> /&gt;</span></div><div class=\"line\">      <span class=\"tag\">&lt;/<span class=\"name\">View</span>&gt;</span></div><div class=\"line\">    );</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">AppRegistry.registerComponent('AwesomeProject', () =&gt; BlinkApp);</div></pre></td></tr></table></figure>\n<hr>\n<h4 id=\"setInterval-函数\"><a href=\"#setInterval-函数\" class=\"headerlink\" title=\"setInterval()函数\"></a>setInterval()函数</h4><blockquote>\n<p>首先，认识一下setInterval（)函数<br> 1、setInterval() 方法可按照指定的周期（以毫秒计）来调用函数或计算表达式。<br> 2、setInterval() 方法会不停地调用函数，直到 clearInterval() 被调用或窗口被关闭。由 setInterval() 返回的 ID 值可用作 clearInterval() 方法的参数。</p>\n</blockquote>\n<p>setInterval(code,millisec)</p>\n<ul>\n<li>参数1，必要的函数</li>\n<li>参数2，周期（以毫米计数）</li>\n</ul>\n<p>使用clearInterval()函数来取消循环</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">language</span>=<span class=\"string\">javascript</span>&gt;</span><span class=\"javascript\"></div><div class=\"line\"><span class=\"keyword\">var</span> int=self.setInterval(<span class=\"string\">\"clock()\"</span>,<span class=\"number\">50</span>) <span class=\"comment\">//self表示当前页面</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">clock</span>(<span class=\"params\"></span>)</div><div class=\"line\">  </span>&#123;</div><div class=\"line\">  <span class=\"keyword\">var</span> t=<span class=\"keyword\">new</span> <span class=\"built_in\">Date</span>()</div><div class=\"line\">  <span class=\"built_in\">document</span>.getElementById(<span class=\"string\">\"clock\"</span>).value=t</div><div class=\"line\">  &#125;</div><div class=\"line\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">form</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">button</span> <span class=\"attr\">onclick</span>=<span class=\"string\">\"int=window.clearInterval(int)\"</span>&gt;</span> //在这个窗口下获取</div><div class=\"line\">Stop interval<span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></div></pre></td></tr></table></figure>\n<hr>\n<p>State的核心使用方法：</p>\n<p>1、在构造函数中初始化：this.state = …<br>2、通过this.setState()函数来修改state的值。<br>3、使用定义的变量。</p>\n<p><em>每次state中的数发生变化时，会刷新一次UI界面。来修改数据</em></p>"}],"PostAsset":[],"PostCategory":[],"PostTag":[{"post_id":"cj0v5msv80004x5yprl6f46s3","tag_id":"cj0v5msv30002x5yp4zvl96es","_id":"cj0v5msvd0007x5yp19m8rdt1"},{"post_id":"cj0v5msux0000x5ypuqmrgozq","tag_id":"cj0v5msv30002x5yp4zvl96es","_id":"cj0v5msve0009x5yponyigubi"},{"post_id":"cj0v5msva0005x5yppr6zxwa0","tag_id":"cj0v5msv30002x5yp4zvl96es","_id":"cj0v5msvh000cx5ypn9uh7x8i"},{"post_id":"cj0v5msvd0008x5ypcu3e048d","tag_id":"cj0v5msv30002x5yp4zvl96es","_id":"cj0v5msvi000ex5ypxs1ezfdz"},{"post_id":"cj0v5msv10001x5ypic7fosr0","tag_id":"cj0v5msv30002x5yp4zvl96es","_id":"cj0v5msvk000gx5ypfssl3x53"},{"post_id":"cj0v5msvf000ax5ypn5n66z6g","tag_id":"cj0v5msv30002x5yp4zvl96es","_id":"cj0v5msvn000jx5ypjjzphavj"},{"post_id":"cj0v5msvh000dx5ypx3g8zenl","tag_id":"cj0v5msv30002x5yp4zvl96es","_id":"cj0v5msvp000lx5ypfygmc1cb"},{"post_id":"cj0v5msv60003x5ypmn1c9y2c","tag_id":"cj0v5msv30002x5yp4zvl96es","_id":"cj0v5msvq000nx5ypgeadx884"},{"post_id":"cj0v5msvi000fx5ypv6cbk68r","tag_id":"cj0v5msvm000ix5ypy1s2htuo","_id":"cj0v5msvs000qx5ypg8hbjpil"},{"post_id":"cj0v5msvt000rx5ypl9qdbeal","tag_id":"cj0v5msvm000ix5ypy1s2htuo","_id":"cj0v5msvx000ux5ypnjnjgdst"},{"post_id":"cj0v5msvk000hx5ypxipcjd97","tag_id":"cj0v5msvm000ix5ypy1s2htuo","_id":"cj0v5msvy000wx5yprn34hcot"},{"post_id":"cj0v5msvn000kx5yp59beddfy","tag_id":"cj0v5msvm000ix5ypy1s2htuo","_id":"cj0v5msw0000zx5ypmfisryme"},{"post_id":"cj0v5msvz000xx5ypgdz1m5xk","tag_id":"cj0v5msv30002x5yp4zvl96es","_id":"cj0v5msw10010x5ypstbc5v1n"},{"post_id":"cj0v5msvp000mx5ypi0ovkwob","tag_id":"cj0v5msvm000ix5ypy1s2htuo","_id":"cj0v5msw20012x5yp7zjhltfe"},{"post_id":"cj0v5msvp000mx5ypi0ovkwob","tag_id":"cj0v5msw0000yx5ypzr6i817z","_id":"cj0v5msw20013x5yp2u52lq2t"},{"post_id":"cj0v5msvr000ox5ypov0xzhy9","tag_id":"cj0v5msvm000ix5ypy1s2htuo","_id":"cj0v5msw30015x5yp55pxdbm2"},{"post_id":"cj0v5msvr000ox5ypov0xzhy9","tag_id":"cj0v5msw0000yx5ypzr6i817z","_id":"cj0v5msw40016x5ypae1oslnb"},{"post_id":"cj0v5msvw000sx5ypf7i5b8wj","tag_id":"cj0v5msw20014x5ypi0ju1329","_id":"cj0v5msw60018x5ypah31dgun"},{"post_id":"cj0v5msvx000vx5ypgc8ow0zt","tag_id":"cj0v5msw50017x5yp10rrnqyt","_id":"cj0v5msw60019x5ypda6n6ygt"}],"Tag":[{"name":"React-native","_id":"cj0v5msv30002x5yp4zvl96es"},{"name":"Android","_id":"cj0v5msvm000ix5ypy1s2htuo"},{"name":"Material Design","_id":"cj0v5msw0000yx5ypzr6i817z"},{"name":"随笔","_id":"cj0v5msw20014x5ypi0ju1329"},{"name":"Java","_id":"cj0v5msw50017x5yp10rrnqyt"}]}}